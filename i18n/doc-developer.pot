# SOME DESCRIPTIVE TITLE
# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2010-12-01 14:23+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: ENCODING"

#. type: Attribute 'lang' of: <book>
#: en/book.xml:7
msgid "en"
msgstr ""

#. type: Content of: <book><bookinfo><title>
#: en/book.xml:9
msgid "OTRS 3.0 - Developer Manual"
msgstr ""

#. type: Content of: <book><bookinfo>
#: en/book.xml:10
msgid ""
"<edition>Cancún Beach (México)</edition> <copyright> <year>2003-2010</year> "
"<holder>OTRS AG</holder> </copyright> <date>2010-08-13</date>"
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:18
msgid ""
"René Bakker, Hauke Böttcher, Stefan Bedorf, Shawn Beasley, Jens Bothe, Udo "
"Bretz, Martin Edenhofer, Martin Gruner, Manuel Hecht, Christopher Kuhn, "
"André Mindermann, Henning Oschwald, Thomas Raith, Stefan Rother, Burchard "
"Steinbild"
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:22
msgid "This work is copyrighted by OTRS AG."
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:25
msgid ""
"You may copy it in whole or in part as long as the copies retain this "
"copyright statement."
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:29
msgid ""
"UNIX is a registered trademark of X/Open Company Limited.  Linux is a "
"registered trademark of Linus Torvalds."
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:33
msgid ""
"MS-DOS, Windows, Windows 95, Windows 98, Windows NT, Windows 2000, Windows "
"XP, Windows 2003 and Windows Vista are registered trademarks of Microsoft "
"Corporation.  Other trademarks and registered trademarks are: SUSE and YaST "
"of SUSE Linux GmbH, Red Hat and Fedora are registered trademarks of Red Hat, "
"Inc.  Mandrake is a registered trademark of MandrakeSoft, SA.  Debian is a "
"registered trademark of Software in the Public Interest, Inc.  MySQL and the "
"MySQL Logo are registered trademarks of MySQL AB."
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:42
msgid ""
"All trade names are used without the guarantee for their free use and are "
"possibly registered trade marks."
msgstr ""

#. type: Content of: <book><bookinfo><legalnotice><para>
#: en/book.xml:46
msgid ""
"OTRS AG essentially follows the notations of the manufacturers.  Other "
"products mentioned in this manual may be trademarks of the respective "
"manufacturer."
msgstr ""

#. type: Content of: <chapter><title>
#: en/content/get-started.xml:6
msgid "Getting Started"
msgstr ""

#. type: Content of: <chapter><abstract><para>
#: en/content/get-started.xml:9
msgid ""
"OTRS is a multi-platform web application framework which was originally "
"developed for a trouble ticket system. It supports different web servers and "
"databases."
msgstr ""

#. type: Content of: <chapter><abstract><para>
#: en/content/get-started.xml:13
msgid ""
"This manual shows how to develop your own OTRS modules and applications "
"based on the OTRS styleguides."
msgstr ""

#. type: Content of: <section><title>
#: en/content/get-started/development-environment.xml:6
msgid "Development Environment"
msgstr ""

#. type: Content of: <section><para>
#: en/content/get-started/development-environment.xml:8
msgid ""
"To facilitate the writing of OTRS expansion modules, the creation of a "
"development environment is necessary."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/development-environment.xml:11
msgid "Framework checkout (CVS)"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:13
msgid ""
"First of all a directory must be created in which the modules can be "
"stored.  Then switch to the new directory using the command line and check "
"them out of OTRS 2.4 or the CVS head by using the following command "
"(loginpassword: cvs):"
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/get-started/development-environment.xml:19
#, no-wrap
msgid ""
"shell> cvs -d :pserver:anonymous@source.otrs.org:/home/cvs login\n"
"# for CVS Head\n"
"shell> cvs -z3 -d :pserver:anonymous@source.otrs.org:/home/cvs co otrs\n"
"# for a specific branch\n"
"shell> cvs -z3 -d :pserver:anonymous@source.otrs.org:/home/cvs co -r rel-2_4 "
"otrs\n"
"        "
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/get-started/development-environment.xml:18 en/content/get-started/development-environment.xml:45 en/content/get-started/development-environment.xml:56 en/content/get-started/development-environment.xml:71 en/content/additional-resources.xml:40
msgid "<placeholder type=\"screen\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:27
msgid ""
"OTRS expansion modules can be checked out following the same routine.  Check "
"out the \"module-tools\" module, too for your development environment. It "
"contains a number of useful tools."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:31
msgid ""
"To enable the CVS-OTRS it is necessary to configure it on the Apache web "
"server and to create the Config.pm.  Then the Installer.pl can be "
"executed. The basic system is ready to run now."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/development-environment.xml:36
msgid "Linking Expansion Modules"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:38
msgid ""
"A clear separation between OTRS and the modules is necessary for proper "
"developing.  Particularly when using a CVS, a clear separation is crucial.  "
"In order to facilitate the OTRS access to the files, links must be created.  "
"This is done by a script in the directory module tools (to get this tools, "
"check out the CVS module \"module-tools\").  Example: Linking the Calendar "
"Module:"
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/get-started/development-environment.xml:46
#, no-wrap
msgid ""
"shell> ~/src/module-tools/link.pl ~/src/Calendar/ ~/src/otrs/\n"
"        "
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:50
msgid "Whenever new files are added, they must be linked as described above."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:53
msgid "To remove links from OTRS enter the following command:"
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/get-started/development-environment.xml:57
#, no-wrap
msgid ""
"shell> ~/src/module-tools/remove_links.pl ~/src/otrs/\n"
"        "
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/development-environment.xml:62
msgid "Necessary Actions after Linking"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/development-environment.xml:64
msgid ""
"As soon as the linking is completed, the Sysconfig must be run to register "
"the module in OTRS.  Required users, groups and roles must be created "
"manually and access authorizations must be defined.  If an additional "
"databank table is required, this must be created manually, too.  If an OPM "
"package exists, the SQL commands can be read out to create the tables.  "
"Example:"
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/get-started/development-environment.xml:72
#, no-wrap
msgid ""
"shell> cat Calendar.sopm | bin/xml2sql.pl -t mysql\n"
"        "
msgstr ""

#. type: Content of: <section><title>
#: en/content/get-started/architecture.xml:6
msgid "Architecture Overview"
msgstr ""

#. type: Content of: <section><para>
#: en/content/get-started/architecture.xml:8
msgid ""
"The OTRS framework is modular. The following picture shows the basic layer "
"architecture of OTRS."
msgstr ""

#. type: Content of: <section><screenshot>
#: en/content/get-started/architecture.xml:12
msgid ""
"<graphic srccredit=\"\" scale=\"60\" "
"fileref=\"screenshots/architecture.png\"></graphic>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/architecture.xml:15
msgid "Directories"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/get-started/architecture.xml:21
msgid "Directory"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/get-started/architecture.xml:22 en/content/hacking-otrs/module-format.xml:236 en/content/hacking-otrs/module-format.xml:249 en/content/hacking-otrs/module-format.xml:269 en/content/hacking-otrs/module-format.xml:274 en/content/hacking-otrs/package-building.xml:90
msgid "Description"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:27
msgid "bin/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:28
msgid "CMD programmes"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:31
msgid "bin/cgi-bin/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:32
msgid "web handle"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:35
msgid "bin/fcgi-bin/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:36
msgid "fast cgi web handle"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:39
msgid "Kernel"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:40
msgid "modules"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:43 en/content/hacking-otrs/writing-otrs-application.xml:23
msgid "Kernel/Config/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:44
msgid "config"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:47
msgid "Kernel/Config/Files"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:48
msgid "config files"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:51
msgid "Kernel/Language"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:52
msgid "language translation"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:55 en/content/hacking-otrs/writing-otrs-application.xml:20
msgid "Kernel/System/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:56
msgid "core modules, e.g. Log, Ticket..."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:59 en/content/hacking-otrs/writing-otrs-application.xml:21
msgid "Kernel/Modules/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:60
msgid "frontend modules, e.g. QueueView..."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:63
msgid "Kernel/Output/HTML/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:64
msgid "html templates"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:67
msgid "var/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:68
msgid "variable data"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:71
msgid "var/log"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:72
msgid "logfiles"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:75
msgid "var/cron/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:76
msgid "cron files"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:79
msgid "var/httpd/htdocs/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:80
msgid "htdocs directory with index.html"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:83
msgid "var/httpd/htdocs/css/Standard/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:84
msgid "css-style-sheets"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:87
msgid "var/httpd/htdocs/images/Standard/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:88
msgid "icons and pictures"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:91
msgid "var/httpd/htdocs/js/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:92
msgid "java script files"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:95
msgid "var/httpd/htdocs/images/yui/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:96
msgid "several yui versions"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:99
msgid "scripts/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:100
msgid "misc"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:103
msgid "scripts/test/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:104
msgid "test files"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:107
msgid "scripts/sample/"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/get-started/architecture.xml:108
msgid "sample files"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/architecture.xml:116
msgid "Files"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:117
msgid ".pl = Perl"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:118
msgid ".pm = Perl Modul"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:119
msgid ".dtl = Dynamic Template Language (html template file)"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:120
msgid ".dist = Default Templates of Files"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/get-started/architecture.xml:123 en/content/hacking-otrs/module-format.xml:9 en/content/hacking-otrs/module-format.xml:303
msgid "Core Modules"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:125
msgid ""
"Core modules are located under $OTRS_HOME/Kernel/System/*. This layer is for "
"the logical work. Core modules are used to handle system routines like "
"\"lock ticket\" and \"create ticket\". A few main core modules are:"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:132
msgid "Kernel::System::Config (to access config options)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:135
msgid "Kernel::System::Log (to log into OTRS log backend)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:138
msgid "Kernel::System::DB (to access the database backend)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:141
msgid "Kernel::System::Auth (to check a user authentication)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:144
msgid "Kernel::System::User (to manage users)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:147
msgid "Kernel::System::Group (to manage groups)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/get-started/architecture.xml:150
msgid "Kernel::System::Email (for sending emails)"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:155
msgid ""
"For more information, see: <ulink "
"url=\"http://dev.otrs.org/\">http://dev.otrs.org/</ulink>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/architecture.xml:159
msgid "Frontend Handle"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:161
msgid ""
"The interface between the browser, web server and the frontend modules.  A "
"frontend module can be used via the http-link."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:165
msgid "<ulink url=\"\">http://localhost/otrs/index.pl?Action=Modul</ulink>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/get-started/architecture.xml:169 en/content/hacking-otrs/module-format.xml:25 en/content/hacking-otrs/module-format.xml:96
msgid "Frontend Modules"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:171
msgid ""
"Frontend modules are located under \"$OTRS_HOE/Kernel/Modules/*.pm\". There "
"are two public functions in there - \"new()\" and \"run()\" - which are "
"accessed from the Frontend Handle (e.g. index.pl)."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:176
msgid ""
"\"new()\" is used to create a frontend module object. The Frontend Handle "
"provides the used frontend module with the basic framework objects. These "
"are, for example: ParamObject (to get formular params), DBObject (to use "
"existing databse connects), LayoutObject (to use templates and other html "
"layout functions), ConfigObject (to access config settings), LogObject (to "
"use the framework log system), UserObject (to get the user functions from "
"the current user), GroupObject (to get the group functions)."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:184
msgid ""
"For more information on core modules see: <ulink "
"url=\"http://dev.otrs.org/\">http://dev.otrs.org/</ulink>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/architecture.xml:189
msgid "CMD Frontend"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:191
msgid ""
"The CMD (Command) Frontend is like the Web Frontend Handle and the Web "
"Frontend Module in one (just without the LayoutObject) and uses the core "
"modules for some actions in the system."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/get-started/architecture.xml:197
msgid "Database"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:199
msgid "The database interface supports different databases."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/get-started/architecture.xml:202
msgid ""
"For the OTRS data model please refer to the files in your /doc directory.  "
"Alternatively you can look at the data model on our CVS server: <ulink "
"url=\"http://source.otrs.org/viewvc.cgi/otrs/doc/otrs-database.png?view=markup\">http://source.otrs.org/viewvc.cgi/otrs/doc/otrs-database.png?view=markup</ulink>."
msgstr ""

#. type: Content of: <chapter><title>
#: en/content/hacking-otrs.xml:6
msgid "Hacking OTRS"
msgstr ""

#. type: Content of: <chapter><abstract><para>
#: en/content/hacking-otrs.xml:9
msgid ""
"In this chapter, we'll take a closer look at how OTRS works, how to extend "
"it and how to publish your OTRS extensions."
msgstr ""

#. type: Content of: <chapter><section><title>
#: en/content/hacking-otrs.xml:15
msgid "How it Works"
msgstr ""

#. type: Content of: <chapter><section><title>
#: en/content/hacking-otrs.xml:26
msgid "How to Extend it"
msgstr ""

#. type: Content of: <chapter><section><title>
#: en/content/hacking-otrs.xml:34
msgid "How to Publish your OTRS Extensions"
msgstr ""

#. type: Content of: <chapter><section><title>
#: en/content/hacking-otrs.xml:41
msgid "How to Upgrade your OTRS Extensions to Newer Versions of OTRS"
msgstr ""

#. type: Content of: <chapter><section><para>
#: en/content/hacking-otrs.xml:44
msgid ""
"Usually, new major OTRS releases also bring changes in the internals which "
"need to be reflected in extension modules too. This chapter will describe "
"these changes for each version upgrade."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/config-mechanism.xml:6
msgid "Config Mechanism"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:8
msgid "Default Config"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:10
msgid ""
"There are different default config files. The main one, which comes with the "
"framework, is:"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:14
msgid "<filename>Kernel/Config/Defaults.pm</filename>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:17
msgid ""
"This file should be left untouched as it is automatically updated on "
"framework updates.  There is also a sub directory where you can store the "
"default config files for your own modules. These files are used "
"automatically."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:22
msgid "The directory is located under:"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:25
msgid "<filename>$OTRS_HOME/Kernel/Config/Files/*.pm</filename>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:28
msgid "And could look as follows:"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:31
msgid "<filename>Kernel/config/Files/Calendar.pm</filename>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:34
#, no-wrap
msgid ""
"# module reg and nav bar\n"
"$Self->{'Frontend::Module'}->{'AgentCalendar'} = {\n"
"    Description => 'Calendar',\n"
"    NavBarName => 'Ticket',\n"
"    NavBar => [\n"
"        {\n"
"            Description => 'Calendar',\n"
"            Name => 'Calendar',\n"
"            Image => 'calendar.png',\n"
"            Link => 'Action=AgentCalendar',\n"
"            NavBar => 'Ticket',\n"
"            Prio => 5000,\n"
"            AccessKey => 'c',\n"
"        },\n"
"    ],\n"
"};\n"
"\n"
"# show online customers\n"
"$Self->{'Frontend::NotifyModule'}->{'80-ShowCalendarEvents'} = {\n"
"    Module => 'Kernel::Output::HTML::NotificationCalendar',\n"
"};\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:34 en/content/hacking-otrs/config-mechanism.xml:85 en/content/hacking-otrs/config-mechanism.xml:93 en/content/hacking-otrs/config-mechanism.xml:113 en/content/hacking-otrs/config-mechanism.xml:129 en/content/hacking-otrs/config-mechanism.xml:173 en/content/hacking-otrs/config-mechanism.xml:186 en/content/hacking-otrs/config-mechanism.xml:199 en/content/hacking-otrs/config-mechanism.xml:215 en/content/hacking-otrs/config-mechanism.xml:231 en/content/hacking-otrs/config-mechanism.xml:247 en/content/hacking-otrs/config-mechanism.xml:275 en/content/hacking-otrs/config-mechanism.xml:305 en/content/hacking-otrs/module-format.xml:322 en/content/hacking-otrs/module-format.xml:414 en/content/hacking-otrs/module-format.xml:501 en/content/hacking-otrs/module-format.xml:524 en/content/hacking-otrs/module-format.xml:583 en/content/hacking-otrs/module-format.xml:601 en/content/hacking-otrs/module-format.xml:721 en/content/hacking-otrs/module-format.xml:741 en/content/hacking-otrs/module-format/agent-auth.xml:24 en/content/hacking-otrs/module-format/agent-auth.xml:185 en/content/hacking-otrs/module-format/auth-sync.xml:25 en/content/hacking-otrs/module-format/auth-sync.xml:92 en/content/hacking-otrs/module-format/customer-auth.xml:24 en/content/hacking-otrs/module-format/customer-auth.xml:185 en/content/hacking-otrs/module-format/customer-user-preferences.xml:24 en/content/hacking-otrs/module-format/customer-user-preferences.xml:158 en/content/hacking-otrs/module-format/log.xml:24 en/content/hacking-otrs/module-format/log.xml:139 en/content/hacking-otrs/module-format/queue-preferences.xml:25 en/content/hacking-otrs/module-format/queue-preferences.xml:138 en/content/hacking-otrs/module-format/service-preferences.xml:25 en/content/hacking-otrs/module-format/service-preferences.xml:138 en/content/hacking-otrs/module-format/sla-preferences.xml:25 en/content/hacking-otrs/module-format/sla-preferences.xml:138 en/content/hacking-otrs/module-format/stats.xml:42 en/content/hacking-otrs/module-format/stats.xml:69 en/content/hacking-otrs/module-format/stats.xml:98 en/content/hacking-otrs/module-format/stats.xml:110 en/content/hacking-otrs/module-format/stats.xml:209 en/content/hacking-otrs/module-format/stats.xml:224 en/content/hacking-otrs/module-format/stats.xml:243 en/content/hacking-otrs/module-format/stats.xml:256 en/content/hacking-otrs/module-format/stats.xml:287 en/content/hacking-otrs/module-format/stats.xml:362 en/content/hacking-otrs/module-format/stats.xml:376 en/content/hacking-otrs/module-format/stats.xml:419 en/content/hacking-otrs/module-format/stats.xml:457 en/content/hacking-otrs/module-format/stats.xml:668 en/content/hacking-otrs/module-format/stats.xml:728 en/content/hacking-otrs/module-format/stats.xml:758 en/content/hacking-otrs/module-format/stats.xml:814 en/content/hacking-otrs/module-format/stats.xml:863 en/content/hacking-otrs/module-format/stats.xml:1122 en/content/hacking-otrs/module-format/stats.xml:1127 en/content/hacking-otrs/module-format/virtualfs.xml:16 en/content/hacking-otrs/module-format/virtualfs.xml:24 en/content/hacking-otrs/module-format/dashboard.xml:16 en/content/hacking-otrs/module-format/notify.xml:43 en/content/hacking-otrs/module-format/notify.xml:132 en/content/hacking-otrs/module-format/ticket-menu.xml:26 en/content/hacking-otrs/module-format/ticket-menu.xml:144 en/content/hacking-otrs/object-basics.xml:101 en/content/hacking-otrs/object-basics.xml:109 en/content/hacking-otrs/object-basics.xml:124 en/content/hacking-otrs/writing-otrs-application.xml:36 en/content/hacking-otrs/writing-otrs-application.xml:75 en/content/hacking-otrs/writing-otrs-application.xml:141 en/content/hacking-otrs/writing-otrs-application.xml:185 en/content/hacking-otrs/writing-otrs-application.xml:227 en/content/hacking-otrs/package-building.xml:239 en/content/hacking-otrs/package-building.xml:255 en/content/hacking-otrs/package-building.xml:271 en/content/hacking-otrs/package-building.xml:287
msgid "<placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:60
msgid "Custom Config"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:62
msgid "If you want to change a config option, copy it to"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:65
msgid "<filename>Kernel/Config.pm</filename>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:68
msgid ""
"and set the new option. This file will be read out last and so all default "
"config options are overwritten with your settings."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:72
msgid "This way it is easy to handle updates - you just need the Kernel/Config.pm."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:76
msgid "Accessing Config Options"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:78
msgid ""
"You can read and write (for one request) the config options via the core "
"module \"Kernel::Config\".  The config object is a base object and thus "
"available in each Frontend Module."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:82
msgid "If you want to access a config option:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:85
#, no-wrap
msgid ""
"my $ConfigOption = $Self->{ConfigObject}->Get('Prefix::Option');\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:90
msgid ""
"If you want to change a config option at runtime and just for this one "
"request/process:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:93
#, no-wrap
msgid ""
"$Self->{ConfigObject}->Set(\n"
"    Key => 'Prefix::Option'\n"
"    Value => 'SomeNewValue',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:102
msgid "XML Config Options"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:104
msgid "XML config files are located under:"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:107
msgid "<filename>$OTRS_HOME/Kernel/Config/Files/*.xml</filename>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:110
msgid "Each config file has the following layout:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:113
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
"<otrs_config version=\"1.0\" init=\"Changes\">\n"
"\n"
"    <!--  config items will be here -->\n"
"\n"
"</otrs_config>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:123
msgid ""
"The \"init\" attribute describes where the config options should be "
"loaded. There are different levels available and will be loaded/overloaded "
"in the following order: \"Framework\" (for framework settings e. g. session "
"option), \"Application\" (for application settings e. g. ticket options), "
"\"Config\" (for extensions to existing applications e. g. ITSM options) and "
"\"Changes\" (for custom development e. g. to overwrite framework or ticket "
"options)."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:126
msgid "If you want to add config options, here is an example:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:129
#, no-wrap
msgid ""
"<ConfigItem Name=\"Ticket::Hook\" Required=\"1\" Valid=\"1\" "
"ConfigLevel=\"300\">\n"
"    <Description Lang=\"en\">The identifyer for a ticket. The default is "
"Ticket#.</Description>\n"
"    <Description Lang=\"de\">Ticket-Identifikator. Als Standard wird Ticket# "
"verwendet.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Core::Ticket</SubGroup>\n"
"    <Setting>\n"
"        <String Regex=\"\">Ticket#</String>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:142
msgid ""
"If \"required\" is set to \"1\", the config variable is included and cannot "
"be disabled."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:145
msgid ""
"If \"valid\" is set to \"1\", the config variable is active. If it is set to "
"\"0\", the config variable is inactive."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:148
msgid ""
"If the optional attribute \"ConfigLevel\" is set, the config variable might "
"not be edited by the administrator, depending on his own config level. The "
"config variable \"ConfigLevel\" sets the level of technical experience of "
"the administrator. It can be 100 (Expert), 200 (Advanced) or 300 "
"(Beginner).  As a guideline which config level should be given to an option, "
"it is recommended that all options having to do with the configuration of "
"externel interaction, like Sendmail, LDAP, SOAP, and others should get a "
"config level of at least 200 (Advanced)."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:156
msgid "The config variable is defined in the \"setting\" element."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:159
msgid "Types of XML Config Variables"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:161
msgid "The XML config settings support various types of variables."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:165
msgid "String"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:167
msgid ""
"A config element for numbers and single-line strings.  Checking the validity "
"with a regex is possible.  The check attribute checks elements on the file "
"system.  This contains files and directories."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:173
#, no-wrap
msgid ""
"<Setting>\n"
"    <String Regex=\"\" Check=\"File\"></String>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:181
msgid "Textarea"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:183
msgid "A config element for multiline text."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:186
#, no-wrap
msgid ""
"<Setting>\n"
"    <TextArea Regex=\"\"></TextArea>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:194
msgid "Options"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:196
msgid "This config element offers preset values as a pull-down menu."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:199
#, no-wrap
msgid ""
"<Setting>\n"
"    <Option SelectedID=\"Key\">\n"
"        <Item Key=\"\"></Item>\n"
"        <Item Key=\"\"></Item>\n"
"    </Option>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:210
msgid "Array"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:212
msgid "With this config element arrays can be displayed."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:215
#, no-wrap
msgid ""
"<Setting>\n"
"    <Array>\n"
"        <Item></Item>\n"
"        <Item></Item>\n"
"    </Array>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:226
msgid "Hash"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:228
msgid "With this config element hashes can be displayed."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:231
#, no-wrap
msgid ""
"<Setting>\n"
"    <Hash>\n"
"        <Item Key=\"\"></Item>\n"
"        <Item Key=\"\"></Item>\n"
"    </Hash>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:242
msgid "Hash with SubArray, SubHash"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:244
msgid "A hash can contain content, arrays or hashes."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:247
#, no-wrap
msgid ""
"<Setting>\n"
"    <Hash>\n"
"        <Item Key=\"\"></Item>\n"
"        <Item Key=\"\">\n"
"            <Hash>\n"
"                <Item Key=\"\"></Item>\n"
"                <Item Key=\"\"></Item>\n"
"            </Hash>\n"
"        </Item>\n"
"        <Item Key=\"\">\n"
"            <Array>\n"
"                <Item></Item>\n"
"                <Item></Item>\n"
"            </Array>\n"
"        </Item>\n"
"        <Item Key=\"\"></Item>\n"
"    </Hash>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:270
msgid "FrontendModuleReg (NavBar)"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:272
msgid "Module registration for Agent Interface."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:275
#, no-wrap
msgid ""
"<Setting>\n"
"    <FrontendModuleReg>\n"
"        <Group>group1</Group>\n"
"        <Group>group2</Group>\n"
"        <Description>Logout</Description>\n"
"        <Title></Title>\n"
"        <NavBarName></NavBarName>\n"
"        <NavBar>\n"
"            <Description>Logout</Description>\n"
"            <Name>Logout</Name>\n"
"            <Image>exit.png</Image>\n"
"            <Link>Action=Logout</Link>\n"
"            <NavBar></NavBar>\n"
"            <Type></Type>\n"
"            <Block>ItemPre</Block>\n"
"            <AccessKey>l</AccessKey>\n"
"            <Prio>100</Prio>\n"
"        </NavBar>\n"
"    </FrontendModuleReg>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/config-mechanism.xml:300
msgid "FrontendModuleReg (NavBarModule)"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/config-mechanism.xml:302
msgid "Module registration for Admin Interface"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/config-mechanism.xml:305
#, no-wrap
msgid ""
"<Setting>\n"
"    <FrontendModuleReg>\n"
"        <Group>admin</Group>\n"
"        <Group>admin2</Group>\n"
"        <Description>Admin</Description>\n"
"        <Title>User</Title>\n"
"        <NavBarName>Admin</NavBarName>\n"
"        <NavBarModule>\n"
"            <Module>Kernel::Output::HTML::NavBarModuleAdmin</Module>\n"
"            <Name>Users</Name>\n"
"            <Block>Block1</Block>\n"
"            <Prio>100</Prio>\n"
"        </NavBarModule>\n"
"    </FrontendModuleReg>\n"
"</Setting>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/database-mechanism.xml:6
msgid "Database Mechanism"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/database-mechanism.xml:8
msgid "OTRS comes with a database layer that supports different databases."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:11 en/content/hacking-otrs/loader.xml:17 en/content/contributing/translate.xml:11
msgid "How it works"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:13
msgid "The database layer (Kernel::System::DB) has two input options: SQL and XML."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:16
msgid "SQL"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:18
msgid ""
"The SQL interface should be used for normal database actions (SELECT, "
"INSERT, UPDATE, ...). It can be used like a normal Perl DBI interface."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:22
msgid "INSERT/UPDATE/DELETE"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:23
#, no-wrap
msgid ""
"$Self->{DBObject}->Do(\n"
"    SQL=> \"INSERT INTO table (name, id) VALUES ('SomeName', 123)\",\n"
");\n"
"\n"
"$Self->{DBObject}->Do(\n"
"    SQL=> \"UPDATE table SET name = 'SomeName', id = 123\",\n"
");\n"
"\n"
"$Self->{DBObject}->Do(\n"
"    SQL=> \"DELETE FROM table WHERE id = 123\",\n"
");\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:38
msgid "SELECT"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:39
#, no-wrap
msgid ""
"my $SQL = \"SELECT id FROM table WHERE tn = '123'\";\n"
"\n"
"$Self->{DBObject}->Prepare(SQL => $SQL, Limit => 15);\n"
"\n"
"while (my @Row = $Self->{DBObject}->FetchrowArray()) {\n"
"    $Id = $Row[0];\n"
"}\n"
"return $Id;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><note><para>
#: en/content/hacking-otrs/database-mechanism.xml:51
msgid ""
"Take care to use Limit as param and not in the SQL string because not all "
"databases support LIMIT in SQL strings."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:55
#, no-wrap
msgid ""
"my $SQL = \"SELECT id FROM table WHERE tn = ? AND group = ?\";\n"
"\n"
"$Self->{DBObject}->Prepare(\n"
"    SQL   => $SQL,\n"
"    Limit => 15,\n"
"    Bind  => [ $Tn, $Group ],\n"
");\n"
"\n"
"while (my @Row = $Self->{DBObject}->FetchrowArray()) {\n"
"    $Id = $Row[0];\n"
"}\n"
"return $Id;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><note><para>
#: en/content/hacking-otrs/database-mechanism.xml:71
msgid ""
"Use the Bind attribute where ever you can, especially for long "
"statements. If you use Bind you do not need the function Quote()."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:77
msgid "QUOTE"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:80
#, no-wrap
msgid ""
"my $QuotedString = $Self->{DBObject}->Quote(\"It's a problem!\");\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:79
msgid "String: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:86
#, no-wrap
msgid ""
"my $QuotedInteger = $Self->{DBObject}->Quote('123', 'Integer');\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:85
msgid "Integer: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:92
#, no-wrap
msgid ""
"my $QuotedNumber = $Self->{DBObject}->Quote('21.35', 'Number');\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:91
msgid "Number: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><note><para>
#: en/content/hacking-otrs/database-mechanism.xml:98
msgid "Please use the Bind attribute instead of Quote() where ever you can."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:104
msgid "XML"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:106
msgid ""
"The XML interface should be used for INSERT, CREATE TABLE, DROP TABLE and "
"ALTER TABLE.  As this syntax is different from database to database, using "
"it makes sure that you write applications that can be used in all of them."
msgstr ""

#. type: Content of: <section><section><section><note><para>
#: en/content/hacking-otrs/database-mechanism.xml:112
msgid ""
"The &lt;Insert&gt; has changed in >=2.2. Values are now used in content area "
"(not longer in attribut Value)."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:116
msgid "INSERT"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:117
#, no-wrap
msgid ""
"<Insert Table=\"some_table\">\n"
"    <Data Key=\"id\">1</Data>\n"
"    <Data Key=\"description\" Type=\"Quote\">exploit</Data>\n"
"</Insert>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:125
msgid "CREATE TABLE"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:127
msgid ""
"Possible data types are: BIGINT, SMALLINT, INTEGER, VARCHAR "
"(Size=1-1000000), DATE (Format: yyyy-mm-dd hh:mm:ss) and LONGBLOB."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:129
#, no-wrap
msgid ""
"<TableCreate Name=\"calendar_event\">\n"
"    <Column Name=\"id\" Required=\"true\" PrimaryKey=\"true\" "
"AutoIncrement=\"true\" Type=\"BIGINT\"/>\n"
"    <Column Name=\"title\" Required=\"true\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"    <Column Name=\"content\" Required=\"false\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"    <Column Name=\"start_time\" Required=\"true\" Type=\"DATE\"/>\n"
"    <Column Name=\"end_time\" Required=\"true\" Type=\"DATE\"/>\n"
"    <Column Name=\"owner_id\" Required=\"true\" Type=\"INTEGER\"/>\n"
"    <Column Name=\"event_status\" Required=\"true\" Size=\"50\" "
"Type=\"VARCHAR\"/>\n"
"    <Index Name=\"calendar_event_title\">\n"
"        <IndexColumn Name=\"title\"/>\n"
"    </Index>\n"
"    <Unique Name=\"calendar_event_title\">\n"
"        <UniqueColumn Name=\"title\"/>\n"
"    </Unique>\n"
"    <ForeignKey ForeignTable=\"users\">\n"
"        <Reference Local=\"owner_id\" Foreign=\"id\"/>\n"
"    </ForeignKey>\n"
"</TableCreate>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:151
msgid "DROP TABLE"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:152
#, no-wrap
msgid ""
"<TableDrop Name=\"calendar_event\"/>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:157
msgid "ALTER TABLE"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:159
msgid "The following shows an example of add, change and drop columns."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:161
#, no-wrap
msgid ""
"<TableAlter Name=\"calendar_event\">\n"
"    <ColumnAdd Name=\"test_name\" Type=\"varchar\" Size=\"20\" "
"Required=\"1\"/>\n"
"\n"
"    <ColumnChange NameOld=\"test_name\" NameNew=\"test_title\" "
"Type=\"varchar\" Size=\"30\" Required=\"1\"/>\n"
"\n"
"    <ColumnChange NameOld=\"test_title\" NameNew=\"test_title\" "
"Type=\"varchar\" Size=\"100\" Required=\"0\"/>\n"
"\n"
"    <ColumnDrop Name=\"test_title\"/>\n"
"\n"
"    <IndexCreate Name=\"index_test3\">\n"
"        <IndexColumn Name=\"test3\"/>\n"
"    </IndexCreate>\n"
"\n"
"    <IndexDrop Name=\"index_test3\"/>\n"
"\n"
"    <UniqueCreate Name=\"uniq_test3\">\n"
"        <UniqueColumn Name=\"test3\"/>\n"
"    </UniqueCreate>\n"
"\n"
"    <UniqueDrop Name=\"uniq_test3\"/>\n"
"</TableAlter>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:185
msgid "The next shows an example how to rename a table."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:187
#, no-wrap
msgid ""
"<TableAlter NameOld=\"calendar_event\" NameNew=\"calendar_event_new\"/>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:192
msgid "Code to process XML"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/database-mechanism.xml:193
#, no-wrap
msgid ""
"my @XMLARRAY = @{$Self->ParseXML(String => $XML)};\n"
"\n"
"my @SQL = $Self->{DBObject}->SQLProcessor(\n"
"    Database => \\@XMLARRAY,\n"
");\n"
"push(@SQL, $Self->{DBObject}->SQLProcessorPost());\n"
"\n"
"for (@SQL) {\n"
"    $Self->{DBObject}->Do(SQL => $_);\n"
"}\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:209
msgid "Database Drivers"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/database-mechanism.xml:211
msgid ""
"The database drivers are located under "
"<filename>$OTRS_HOME/Kernel/System/DB/*.pm</filename>."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/database-mechanism.xml:215
msgid "Supported Databases"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/database-mechanism.xml:219
msgid "MySQL"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/database-mechanism.xml:222
msgid "PostgreSQL"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/database-mechanism.xml:225
msgid "Oracle"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/database-mechanism.xml:228
msgid "MSSQL"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/database-mechanism.xml:231
msgid "DB2"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/log-mechanism.xml:6
msgid "Log Mechanism"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/log-mechanism.xml:8
msgid ""
"OTRS comes with a log backend that can be used for application logging and "
"debugging."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/log-mechanism.xml:11
msgid "Use and Syntax"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/log-mechanism.xml:14
#, no-wrap
msgid ""
"$Self->{LogObject}->Log(\n"
"    Priority => 'error',\n"
"    Message => 'Need something!',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/log-mechanism.xml:13
msgid ""
"All module layers have ready-made Log Objects which can be used by "
"<placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/log-mechanism.xml:23
msgid "Example"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/log-mechanism.xml:26
#, no-wrap
msgid ""
"use Kernel::Config;\n"
"use Kernel::System::Encode;\n"
"use Kernel::System::Log;\n"
"\n"
"my $ConfigObject = Kernel::Config->new();\n"
"my $EncodeObject = Kernel::System::Encode->new(\n"
"    ConfigObject => $ConfigObject,\n"
");\n"
"my $LogObject    = Kernel::System::Log->new(\n"
"    ConfigObject => $ConfigObject,\n"
");\n"
"\n"
"$Self->{LogObject}->Log(\n"
"    Priority => 'error',\n"
"    Message => 'Need something!',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/log-mechanism.xml:25
msgid ""
"The following example shows how to use the log mechanism without a module "
"layer.  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/skins.xml:6
msgid "Skins"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/skins.xml:8
msgid "Since OTRS 3.0, the visual appearance of OTRS is controlled by \"skins\"."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/skins.xml:11
msgid ""
"A skin is a set of CSS and image files, which together control how the GUI "
"is presented to the user. Skins do not change the HTML content that is "
"generated by OTRS (this is what \"Themes\" do), but they control how it is "
"displayed. With the help of modern CSS standards it is possible to change "
"the display thoroughly (e.g.  repositioning parts of dialogs, hiding "
"elements, ...)."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/skins.xml:19
msgid "Skin Basics"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:22
msgid ""
"All skins are in "
"<filename>$OTRS_HOME/var/httpd/htdocs/skins/$SKIN_TYPE/$SKIN_NAME</filename>.  "
"There are two types of skins: agent and customer skins."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:27
msgid ""
"Each of the agents can select individually, which of the installed agent "
"skins they want to \"wear\"."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:31
msgid ""
"For the customer interface, a skin has to be selected globally with the "
"config setting <literal>Loader::Customer::SelectedSkin</literal>. All "
"customers will see this skin."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/skins.xml:37
msgid "How skins are loaded"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:45
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css-cache/CommonCSS_179376764084443c181048401ae0e2ad.css\" "
"/>\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/ivory/css-cache/CommonCSS_e0783e0c2445ad9cc59c35d6e4629684.css\" "
"/>\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:56
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Reset.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Default.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Header.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.OverviewControl.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.OverviewSmall.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.OverviewMedium.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.OverviewLarge.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Footer.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Grid.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Form.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Table.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Widget.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.WidgetMenu.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.TicketDetail.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Tooltip.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Dialog.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Print.css\" />\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Agent.CustomerUser.GoogleMaps.css\" "
"/>\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/default/css/Core.Agent.CustomerUser.OpenTicket.css\" "
"/>\n"
"    <link rel=\"stylesheet\" "
"href=\"/otrs-web/skins/Agent/ivory/css/Core.Dialog.css\" />\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:40
msgid ""
"It is important to note that the \"default\" skin will "
"<emphasis>always</emphasis> be loaded <emphasis>first</emphasis>.  If the "
"agent selected another skin than the \"default\" one, then the other one "
"will be loaded only <emphasis>after</emphasis> the default skin. By "
"\"loading\" here we mean that OTRS will put tags into the HTML content which "
"cause the CSS files to be loaded by the browser. Let's see an example of "
"this: <placeholder type=\"programlisting\" id=\"0\"/> Here it can clearly be "
"seen that the default skin is loaded first, and then the custom skin "
"specified by the agent. In this example, we see the result of the activated "
"loader (<literal>Loader::Enabled</literal> set to 1), which gathers all CSS "
"files, concatenates and minifies them and serves them as one chunk to the "
"browser. This saves bandwith and also reduces the number of HTTP "
"requests. Let's see the same example with the Loader turned off: "
"<placeholder type=\"programlisting\" id=\"1\"/> Here we can better see the "
"individual files that come from the skins."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:83
msgid ""
"There are different types of CSS files: common files which must always be "
"loaded, and \"module-specific\" files which are only loaded for special "
"modules within the OTRS framework."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:89
msgid ""
"In addition, it is possible to specify CSS files which only must be loaded "
"on IE7 or IE8 (in the case of the customer interface, also IE6). This is "
"unfortunate, but it was not possible to develop a modern GUI on these "
"browsers without having special CSS for them."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:95
msgid ""
"For details regarding the CSS file types, please see the <link "
"linkend=\"loader\">section on the Loader</link>."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:99
msgid ""
"For each HTML page generation, the loader will first take all configured CSS "
"files from the default skin, and then for each file look if it is also "
"available in a custom skin (if a custom skin is selected) and load them "
"after the default files."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:105
msgid ""
"That means a) that CSS files in custom skins need to have the same names as "
"in the default skins, and b) that a custom skin does not need to have all "
"files of the default skin. That is the big advantage of loading the default "
"skin first: a custom skin has all default CSS rules present and only needs "
"to change those which should result in a different display. That can often "
"be done in a single file, like in the example above."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:116
#, no-wrap
msgid ""
".Header h1 {\n"
"    font-weight: bold;\n"
"    color: #000;\n"
"}\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:126
#, no-wrap
msgid ""
".Header h1 {\n"
"    color: #F00;\n"
"}\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:134
#, no-wrap
msgid ""
".Header h1 {\n"
"    font-weight: normal;\n"
"    color: #F00;\n"
"}\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:113
msgid ""
"Another effect of this is that you need to be careful to overwrite all "
"default CSS rules in your custom skins that you want to change. Let's see an "
"example: <placeholder type=\"programlisting\" id=\"0\"/> This defines "
"special headings inside of the .Header element as bold, black text. Now if "
"you want to change that in your skin to another color and normal text, it is "
"not enough to write <placeholder type=\"programlisting\" id=\"1\"/> Because "
"the original rule for <literal>font-weight</literal> still applies. You need "
"to override it explicitly: <placeholder type=\"programlisting\" id=\"2\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/skins.xml:145
msgid "Creating a New Skin"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:146
msgid ""
"In this section, we will be creating a new agent skin which replaces the "
"default OTRS logo with a custom company logo, and configure that skin to be "
"the one which all agents will see by default."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:149
msgid "There are only two simple steps we need to take to achieve this goal:"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/skins.xml:151
msgid "create the skin files and"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/skins.xml:152
msgid "make the skin known to the OTRS system."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:157
msgid ""
"Let's start by creating the files needed for our new skin. First of all, we "
"need to create a new folder for this skin (we'll call it \"custom\"). This "
"folder will be "
"<filename>$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom</filename>."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:167
#, no-wrap
msgid ""
"#Logo {\n"
"    background: url(../img/custom-logo.png) no-repeat;\n"
"    height: 67px; /* specify height and width to match your logo's "
"dimensions */\n"
"    width: 224px;\n"
"    /* optional: specify \"top\" and \"right\" to reposition the logo on the "
"screen */\n"
"}\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:162
msgid ""
"In there, we need to place the new logo file "
"(e.g. <filename>custom-logo.png</filename> in a new directory "
"<filename>img</filename>. In addition to that, a new CSS file must be "
"created in the new folder <filename>css</filename> which defines the new "
"skin's appearance. We'll call it <filename>Core.Header.css</filename> "
"(remember that it must have the same name as the files in the \"default\" "
"skin). This is the code needed for the CSS file: <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/skins.xml:181
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
"<otrs_config version=\"1.0\" init=\"Framework\">\n"
"    <ConfigItem Name=\"Loader::Agent::Skin###100-custom\" Required=\"0\" "
"Valid=\"1\">\n"
"        <Description Translatable=\"1\">Custom skin for the development "
"manual.</Description>\n"
"        <Group>Framework</Group>\n"
"        <SubGroup>Frontend::Agent</SubGroup>\n"
"        <Setting>\n"
"            <Hash>\n"
"                <Item Key=\"InternalName\">custom</Item>\n"
"                <Item Key=\"VisibleName\">Custom</Item>\n"
"                <Item Key=\"Description\">Custom skin for the development "
"manual.</Item>\n"
"                <Item Key=\"HomePage\">www.yourcompany.com</Item>\n"
"            </Hash>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"</otrs_config>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:177
msgid ""
"Now comes the second step, making the new skin known to the OTRS system. For "
"this, we need to create a new config file "
"<filename>$OTRS_HOME/Kernel/Config/Files/CustomSkin.xml</filename>, which "
"will contain the needed settings as follows: <placeholder "
"type=\"programlisting\" id=\"0\"/> To make this configuration active, we "
"need to navigate to the SysConfig module in the admin area of OTRS "
"(alternatively, you can run the script "
"<filename>$OTRS_HOME/bin/otrs.RebuildConfig.pl</filename>).  This will "
"regenerate the Perl cache of the XML configuration files, so that our new "
"skin is now known and can be selected in the system. To make it the default "
"skin that new agents see before they made their own skin selection, edit the "
"SysConfig setting \"Loader::Agent::DefaultSelectedSkin\" and set it to "
"\"custom\"."
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/hacking-otrs/skins.xml:210
#, no-wrap
msgid ""
"$OTRS_HOME/Kernel/Config/Files/CustomSkin.xml\n"
"$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom/img/custom-logo.png\n"
"$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom/css/Core.Header.css\n"
"            "
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/skins.xml:207
msgid ""
"In conclusion: to create a new skin in OTRS, we had to place the new logo "
"file, and create one CSS and one XML file, resulting in three new files: "
"<placeholder type=\"screen\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/loader.xml:6
msgid "The CSS and JavaScript \"Loader\""
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/loader.xml:8
msgid ""
"Starting with OTRS 3.0, the CSS and JavaScript code in OTRS grew to a large "
"amount. To be able to satisfy both development concerns (good "
"maintainability by a large number of separate files) and performance issues "
"(making few HTTP requests and serving minified content without unneccessary "
"whitespace and documentation)  had to be addressed. To achieve these goals, "
"the Loader was invented."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:19
msgid "To put it simple, the Loader"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/loader.xml:23
msgid ""
"determines for each request precisely which CSS and JavaScript files are "
"needed at the client side by the current application module"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/loader.xml:30
msgid "collects all the relevant data"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/loader.xml:35
msgid "minifies the data, removing unneccessary whitespace and documentation"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/loader.xml:40
msgid ""
"serves it to the client in only a few HTTP reqests instead of many "
"individual ones, allowing the client to cache these snippets in the browser "
"cache"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/loader.xml:46
msgid ""
"perform these tasks in a highly performing way, utilizing the caching "
"mechanisms of OTRS."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:53
msgid ""
"Of course, there is a little bit more detailed involved, but this should "
"suffice as a first overview."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/loader.xml:59
msgid "Basic Operation"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:61
msgid ""
"With the configuration settings <literal>Loader::Enabled::CSS</literal> and "
"<literal>Loader::Enabled::JavaScript</literal>, the loader can be turned on "
"and off for JavaScript and CSS, respectively (it is on by default)."
msgstr ""

#. type: Content of: <section><section><warning><para>
#: en/content/hacking-otrs/loader.xml:67
msgid ""
"Because of rendering problems in Internet Explorer, the Loader cannot be "
"turned off for CSS files for this client browser (config setting will be "
"overridden).  Up to version 8, Internet Explorer cannot handle more than 32 "
"CSS files on a page."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:73
msgid ""
"To learn about how the Loader works, please turn it off in your OTRS "
"installation with the aforementioned configuration settings. Now look at the "
"source code of the application module that you are currently using in this "
"OTRS system (after a reload, of course). You will see that there are many "
"CSS files loaded in the <literal>&lt;head&gt;</literal> section of the page, "
"and many JavaScript files at the bottom of the page, just before the closing "
"<literal>&lt;/body&gt;</literal> element."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:82
msgid ""
"Having the content like this in many individual files with a readable "
"formatting makes the development much easier, and even possible at "
"all. However, this has the disadvantage of a large number of HTTP requests "
"(network latency has a big effect)  and unneccessary content (whitespace and "
"documentation) which needs to be transferred to the client."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:93
#, no-wrap
msgid ""
"<script type=\"text/javascript\" "
"src=\"/otrs30-dev-web/js/js-cache/CommonJS_d16010491cbd4faaaeb740136a8ecbfd.js\"></script>\n"
"\n"
"<script type=\"text/javascript\" "
"src=\"/otrs30-dev-web/js/js-cache/ModuleJS_b54ba9c085577ac48745f6849978907c.js\"></script>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:89
msgid ""
"The Loader solves this problem by performing the steps outlined in the short "
"description above. Please turn on the Loader again and reload your page "
"now. Now you can see that there are only very few CSS and JavaScript tags in "
"the HTML code, like this: <placeholder type=\"programlisting\" id=\"0\"/> "
"What just happened? During the original request generating the HTML code for "
"this page, the Loader generated these two files (or took them from the "
"cache) and put the shown <literal>&lt;script&gt;</literal> tags on the page "
"which link to these files, instead of linking to all relevant JavaScript "
"files separately (as you saw it without the loader being active)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:108
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\" "
"href=\"/otrs30-dev-web/skins/Agent/default/css-cache/CommonCSS_00753c78c9be7a634c70e914486bfbad.css\" "
"/>\n"
"\n"
"<!--[if IE 7]>\n"
"    <link rel=\"stylesheet\" type=\"text/css\" "
"href=\"/otrs30-dev-web/skins/Agent/default/css-cache/CommonCSS_IE7_59394a0516ce2e7359c255a06835d31f.css\" "
"/>\n"
"<![endif]-->\n"
"\n"
"<!--[if IE 8]>\n"
"    <link rel=\"stylesheet\" type=\"text/css\" "
"href=\"/otrs30-dev-web/skins/Agent/default/css-cache/CommonCSS_IE8_ff58bd010ef0169703062b6001b13ca9.css\" "
"/>\n"
"<![endif]-->\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:106
msgid ""
"The CSS section looks a little more complicated: <placeholder "
"type=\"programlisting\" id=\"0\"/> The reason is that Internet Explorer 7 "
"and 8 need special treatment in addition to the default CSS because of their "
"lacking support of web standard technologies.  So we have some normal CSS "
"that is loaded in all browsers, and some special CSS that is inside of "
"so-called \"conditional comments\" which cause it to be loaded "
"<emphasis>only</emphasis> by Internet Explorer 7/8. All other browsers will "
"ignore it."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:127
msgid ""
"Now we have outlined how the loader works. Let's look at how you can utilize "
"that in your own OTRS extensions by adding configuration data to the loader, "
"telling it to load additional or alternative CSS or JavaScript content."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/loader.xml:134
msgid "Configuring the Loader: JavaScript"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:136
msgid ""
"To be able to operate correctly, the Loader needs to know which content it "
"has to load for a particular OTRS application module. First, it will look "
"for JavaScript files which <emphasis>always</emphasis> have to be loaded, "
"and then it looks for special files which are only relevant for the current "
"application module."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/loader.xml:142
msgid "Common JavaScript"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:144
msgid ""
"The list of JavaScript files to be loaded is configured in the configuration "
"settings <literal>Loader::Agent::CommonJS</literal> (for the agent "
"interface) and <literal>Loader::Customer::CommonJS</literal> (for the "
"customer interface)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:152
#, no-wrap
msgid ""
"<ConfigItem Name=\"Loader::Agent::CommonJS###000-Framework\" Required=\"1\" "
"Valid=\"1\">\n"
"    <Description Translatable=\"1\">List of JS files to always be loaded for "
"the agent interface.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Core::Web</SubGroup>\n"
"    <Setting>\n"
"        <Array>\n"
"            <Item>thirdparty/json/json2.js</Item>\n"
"            <Item>thirdparty/jquery-1.4.2/jquery.js</Item>\n"
"\n"
"            ...\n"
"\n"
"            <Item>Core.App.js</Item>\n"
"            <Item>Core.Agent.js</Item>\n"
"            <Item>Core.Agent.Search.js</Item>\n"
"        </Array>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:149
msgid ""
"These settings are designed as hashes, so that OTRS extensions can add their "
"own hash keys for additional content to be loaded. Let's look at an example: "
"<placeholder type=\"programlisting\" id=\"0\"/> This is the list of "
"JavaScript files which always need to be loaded for the agent interface of "
"OTRS."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:179
#, no-wrap
msgid ""
"<ConfigItem Name=\"Loader::Agent::CommonJS###100-CustomPackage\" "
"Required=\"0\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">List of JS files to always be loaded for "
"the agent interface for package \"CustomPackage\".</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Core::Web</SubGroup>\n"
"    <Setting>\n"
"        <Array>\n"
"            <Item>CustomPackage.App.js</Item>\n"
"        </Array>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:176
msgid ""
"To add new content which is supposed to be loaded always in the agent "
"interface, just add an XML configuration file with another hash entry: "
"<placeholder type=\"programlisting\" id=\"0\"/> Simple, isn't it?"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/loader.xml:197
msgid "Module-Specific JavaScript"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:207
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::Module###AgentDashboard\" Required=\"0\" "
"Valid=\"1\">\n"
"    <Description Translatable=\"1\">Frontend module registration for the "
"agent interface.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::Agent::ModuleRegistration</SubGroup>\n"
"    <Setting>\n"
"        <FrontendModuleReg>\n"
"            <Description>Agent Dashboard</Description>\n"
"            <Title></Title>\n"
"            <NavBarName>Dashboard</NavBarName>\n"
"            <NavBar>\n"
"                <Description Translatable=\"1\"></Description>\n"
"                <Name Translatable=\"1\">Dashboard</Name>\n"
"                <Link>Action=AgentDashboard</Link>\n"
"                <NavBar>Dashboard</NavBar>\n"
"                <Type>Menu</Type>\n"
"                <Description Translatable=\"1\"></Description>\n"
"                <Block>ItemArea</Block>\n"
"                <AccessKey>d</AccessKey>\n"
"                <Prio>50</Prio>\n"
"            </NavBar>\n"
"            <Loader>\n"
"                <JavaScript>thirdparty/flot/excanvas.js</JavaScript>\n"
"                <JavaScript>thirdparty/flot/jquery.flot.js</JavaScript>\n"
"                <JavaScript>Core.UI.Chart.js</JavaScript>\n"
"                <JavaScript>Core.UI.DnD.js</JavaScript>\n"
"                <JavaScript>Core.Agent.Dashboard.js</JavaScript>\n"
"            </Loader>\n"
"        </FrontendModuleReg>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:199
msgid ""
"Not all JavaScript is usable for all application modules of OTRS.  Therefore "
"it is possible to specify module-specific JavaScript files.  Whenever a "
"certain module is used (such as <literal>AgentDashboard</literal>), the "
"module-specific JavaScript for this module will also be loaded.  The "
"configuration is done in the frontend module registration in the XML "
"configurations.  Again, an example: <placeholder type=\"programlisting\" "
"id=\"0\"/> It is possible to put a <literal>&lt;Loader&gt;</literal> tag in "
"the frontend module registrations which may contain "
"<literal>&lt;JavaScript&gt;</literal> tags, one for each file that is "
"supposed to be loaded for this application module."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:246
msgid ""
"Now you have all information you need to configure the way the Loader "
"handles JavaScript code."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:254
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::ToolBarModule###410-Ticket::AgentTicketEmail\" "
"Required=\"0\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">Toolbar Item for a "
"shortcut.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Agent::ToolBarModule</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item Key=\"Module\">Kernel::Output::HTML::ToolBarLink</Item>\n"
"            <Item Key=\"Name\">New email ticket</Item>\n"
"            <Item Key=\"Priority\">1009999</Item>\n"
"            <Item Key=\"Link\">Action=AgentTicketEmail</Item>\n"
"            <Item Key=\"Action\">AgentTicketEmail</Item>\n"
"            <Item Key=\"AccessKey\">l</Item>\n"
"            <Item Key=\"CssClass\">EmailTicket</Item>\n"
"            <Item "
"Key=\"JavaScript\">OTRS.Agent.CustomToolbarModule.js</Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:250
msgid ""
"There is one special case: for <literal>ToolbarModule</literal>s, you can "
"also add custom JavaScript files. Just add a <literal>JavaScript</literal> "
"attribute to the configuration like this: <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/loader.xml:278
msgid "Configuring the Loader: CSS"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/loader.xml:280
msgid ""
"The loader handles CSS files very similar to JavaScript files, as described "
"in the previous <link linkend=\"loader-javascript\">section</link>, and "
"extending the settings works in the same way too."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/loader.xml:286
msgid "Common CSS"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:288
msgid ""
"The way common CSS is handled is very similar to the way <link "
"linkend=\"loader-common-javascript\">common JavaScript</link> is "
"loaded. Here, the configuration settings are called "
"<literal>Loader::Agent::CommonCSS</literal> and "
"<literal>Loader::Customer::CommonCSS</literal>, respectively."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:295
msgid ""
"However, as we already noted above, Internet Explorer 7 and 8 (and for the "
"customer interface also 6) need special treatment.  That's why there are "
"special configuration settings for them, to specify common CSS which should "
"only be loaded in these browsers.  The respective settings are "
"<literal>Loader::Agent::CommonCSS::IE7</literal>, "
"<literal>Loader::Agent::CommonCSS::IE8</literal>, "
"<literal>Loader::Customer::CommonCSS::IE6</literal>, "
"<literal>Loader::Customer::CommonCSS::IE7</literal> and "
"<literal>Loader::Customer::CommonCSS::IE8</literal>."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:309
#, no-wrap
msgid ""
"<ConfigItem Name=\"Loader::Agent::CommonCSS::IE8###000-Framework\" "
"Required=\"1\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">List of IE8-specific CSS files to always "
"be loaded for the agent interface.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Core::Web</SubGroup>\n"
"    <Setting>\n"
"        <Array>\n"
"            <Item>Core.OverviewSmall.IE8.css</Item>\n"
"        </Array>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:307
msgid ""
"An example: <placeholder type=\"programlisting\" id=\"0\"/> This is the list "
"of common CSS files for the agent interface which should only be loaded in "
"Internet Explorer 8."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/loader.xml:328
msgid "Module-Specific CSS"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:334
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::Module###Admin\" Required=\"0\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">Frontend module registration for the "
"agent interface.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::Admin::ModuleRegistration</SubGroup>\n"
"    <Setting>\n"
"        <FrontendModuleReg>\n"
"            <Group>admin</Group>\n"
"            <Description>Admin-Area</Description>\n"
"            <Title></Title>\n"
"            <NavBarName>Admin</NavBarName>\n"
"            <NavBar>\n"
"                <Type>Menu</Type>\n"
"                <Description Translatable=\"1\"></Description>\n"
"                <Block>ItemArea</Block>\n"
"                <Name Translatable=\"1\">Admin</Name>\n"
"                <Link>Action=Admin</Link>\n"
"                <NavBar>Admin</NavBar>\n"
"                <AccessKey>a</AccessKey>\n"
"                <Prio>10000</Prio>\n"
"            </NavBar>\n"
"            <NavBarModule>\n"
"                <Module>Kernel::Output::HTML::NavBarModuleAdmin</Module>\n"
"            </NavBarModule>\n"
"            <Loader>\n"
"                <CSS>Core.Agent.Admin.css</CSS>\n"
"                <CSS_IE7>Core.Agent.AdminIE7.css</CSS_IE7>\n"
"                <JavaScript>Core.Agent.Admin.SysConfig.js</JavaScript>\n"
"            </Loader>\n"
"        </FrontendModuleReg>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:330
msgid ""
"Module-specific CSS is handled very similar to the way <link "
"linkend=\"loader-module-javascript\">module-specific JavaScript</link> is "
"handled. It is also configured in the frontend module "
"registrations. Example: <placeholder type=\"programlisting\" id=\"0\"/> Here "
"we have a module (the admin overview page of the agent interface)  which has "
"special JavaScript, normal CSS (tagname <literal>&lt;CSS&gt;</literal>) and "
"special CSS for Internet Explorer 7 (tagname "
"<literal>&lt;CSS_IE7&gt;</literal>).  All of these need to be loaded in "
"addition to the common JavaScript and CSS defined for the agent interface."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:376
msgid ""
"It is also possible to specify module-specific CSS for Internet Explorer 8 "
"(tagname <literal>&lt;CSS_IE8&gt;</literal>) and, in the case of the "
"customer interface, for Internet Explorer 6 (tagname "
"<literal>&lt;CSS_IE6&gt;</literal>)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/loader.xml:385
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::ToolBarModule###410-Ticket::AgentTicketEmail\" "
"Required=\"0\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">Toolbar Item for a "
"shortcut.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Agent::ToolBarModule</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item Key=\"Module\">Kernel::Output::HTML::ToolBarLink</Item>\n"
"            <Item Key=\"Name\">New email ticket</Item>\n"
"            <Item Key=\"Priority\">1009999</Item>\n"
"            <Item Key=\"Link\">Action=AgentTicketEmail</Item>\n"
"            <Item Key=\"Action\">AgentTicketEmail</Item>\n"
"            <Item Key=\"AccessKey\">l</Item>\n"
"            <Item Key=\"CssClass\">EmailTicket</Item>\n"
"            <Item Key=\"CSS\">OTRS.Agent.CustomToolbarModule.css</Item>\n"
"            <Item "
"Key=\"CSS_IE7\">OTRS.Agent.CustomToolbarModule.IE7.css</Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/loader.xml:381
msgid ""
"There is one special case: for <literal>ToolbarModule</literal>s, you can "
"also add custom CSS files. Just add a <literal>CSS</literal>, "
"<literal>CSS_IE7</literal> or <literal>CSS_IE8</literal> attribute to the "
"configuration like this: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/templates.xml:6
msgid "Templating Mechanism"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/templates.xml:8
msgid ""
"Internally, OTRS uses a templating mechanism to dynamically generate its "
"HTML pages (and other content), while keeping the program logic (Perl) and "
"the presentation (HTML) separate. Typically, a frontend module will use an "
"own template file, pass some data to it and return the rendered result to "
"the user."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/templates.xml:15
msgid ""
"The template files are located at: "
"<filename>$OTRS_HOME/Kernel/Output/HTML/Standard/*.dtl</filename>"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/templates.xml:19
msgid ""
"Inside of these templates, a set of commands for data manipulation, "
"localization and simple logical structures can be used. This section "
"describes these commands and shows how to use them in templates."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/templates.xml:25
msgid "Template Commands"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/templates.xml:28
msgid "Data Manipulation Commands"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/templates.xml:30
msgid ""
"In templates, dynamic data must be inserted, quoted etc. This section lists "
"the relevant commands to do that."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:35
msgid "$Data{\"\"}"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:37
msgid ""
"If data parameters are given to the templates by the application module, "
"these data can be output to the template. <literal>$Data</literal> is the "
"most simple, but also most dangerous one. It will insert the data parameter "
"whose name is specified inside of the {\"\"} into the template as it is, "
"without any HTML quoting."
msgstr ""

#. type: Content of: <section><section><section><section><warning><para><literal>
#: en/content/hacking-otrs/templates.xml:45 en/content/hacking-otrs/templates.xml:127
msgid ""
"Because of the missing HTML quoting, this can result in security problems.  "
"Never output data that was input by a user without quoting in HTML context.  "
"The user could - for example - just insert a <literal>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:47 en/content/hacking-otrs/templates.xml:129
#, no-wrap
msgid "<script>]]"
msgstr ""

#. type: Content of: <section><section><section><section><warning><para>
#: en/content/hacking-otrs/templates.xml:47 en/content/hacking-otrs/templates.xml:129
msgid "</literal> tag, and it would be output on the HTML page generated by OTRS."
msgstr ""

#. type: Content of: <section><section><section><section><warning><para>
#: en/content/hacking-otrs/templates.xml:51
msgid ""
"Whenever possible, use <link "
"linkend=\"qdata\"><literal>$QData{\"\"}</literal></link> (in HTML) or <link "
"linkend=\"lqdata\"><literal>$LQData{\"\"}</literal></link> (in Links) "
"instead."
msgstr ""

#. type: Content of: <section><section><section><section><para><literal>
#: en/content/hacking-otrs/templates.xml:57
msgid ""
"Example: Whenever we generate HTML in the application, we need to output it "
"to the template without HTML quoting, like <literal>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:58
#, no-wrap
msgid "<select>]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:61
#, no-wrap
msgid ""
"<label for=\"Dropdown\">Example Dropdown</label>\n"
"$Data{\"DropdownString\"}\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:58
msgid ""
"</literal> elements, which are generated by the function "
"<literal>Layout::BuildSelection</literal> in OTRS.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:69
msgid "$QData{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:74
#, no-wrap
msgid ""
"The name of the author is $QData{\"Name\"}.\n"
"                    ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:82
#, no-wrap
msgid ""
"The first 20 characters of the author's name: $QData{\"Name\",\"20\"}.\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:71
msgid ""
"This command has the same function as <link "
"linkend=\"data\"><literal>$Data{\"\"}</literal></link>, but it performs HTML "
"quoting on the data as it is inserted to the template.  <placeholder "
"type=\"programlisting\" id=\"0\"/> It's also possible specify a maximum "
"length for the value.  If, for example, you just want to show 8 characters "
"of a variable (result will be \"SomeName[...]\"), use the following: "
"<placeholder type=\"programlisting\" id=\"1\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:89
msgid "$LQData{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:98
#, no-wrap
msgid ""
"<a "
"href=\"$Env{\"Baselink\"};Location=$LQData{\"File\"}\">$QData{\"File\",\"110\"}</a>\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:91
msgid ""
"This command has the same function as <link "
"linkend=\"data\"><literal>$Data{\"\"}</literal></link>, but it performs "
"<ulink url=\"http://en.wikipedia.org/wiki/Percent-encoding\">URL "
"encoding</ulink> on the data as it is inserted to the template. This should "
"be used to output single parameter names or values of URLs, to prevent "
"security problems.  It cannot be used for complete URLs because it will also "
"mask <literal>=</literal>, for example.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:105
msgid "$Env{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:109
#, no-wrap
msgid ""
"The current user name is: $Env{\"UserFirstname\"}\n"
"\n"
"Some other common predefined variables are:\n"
"\n"
"$Env{\"SessionID\"} --> the current session id\n"
"$Env{\"Time\"} --> the current time e. g.  Thu Dec 27 16:00:55 2001\n"
"$Env{\"CGIHandle\"} --> the current CGI handle e. g.  index.pl\n"
"$Env{\"UserCharset\"} --> the current site charset e. g.  iso-8859-1\n"
"$Env{\"Baselink\"} --> the baselink --> index.pl?SessionID=...\n"
"$Env{\"UserFirstname\"} --> e. g. Dirk $Env{\"UserFirstname\"}\n"
"$Env{\"UserLogin\"} --> e. g. mgg@x11.org\n"
"$Env{\"UserIsGroup[users]\"} = Yes --> user groups (useful for own links)\n"
"$Env{\"UserIsGroup[admin]\"} = Yes $Env{\"Action\"} --> the current action\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:107
msgid ""
"Inserts the environment variable with the name specified in {\"\"}. Some "
"examples: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><warning><para>
#: en/content/hacking-otrs/templates.xml:133
msgid ""
"Whenever possible, use <link "
"linkend=\"qenv\"><literal>$QEnv{\"\"}</literal></link> instead."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:139
msgid "$QEnv{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:144
#, no-wrap
msgid ""
"The current user name is: $QEnv{\"UserFirstname\"}\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:141
msgid ""
"Works like <link linkend=\"data\"><literal>$Env{\"\"}</literal></link>, but "
"performs HTML encoding when the data is inserted to the template.  "
"<placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:151
msgid "$Config{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:156
#, no-wrap
msgid ""
"[Kernel/Config.pm]\n"
"    # FQDN\n"
"    # (Full qualified domain name of your system.)\n"
"    $Self->{FQDN} = 'otrs.example.com';\n"
"    # AdminEmail\n"
"    # (Email of the system admin.)\n"
"    $Self->{AdminEmail} = 'admin@example.com';\n"
"[...]\n"
"                    ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:169
#, no-wrap
msgid ""
"The hostname is '$Config{\"FQDN\"}'\n"
"The admin email address is '$Config{\"AdminEmail\"}'\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:153
msgid ""
"With this tag you can insert config variables into the template. Let's see "
"an example Kernel/Config.pm: <placeholder type=\"programlisting\" id=\"0\"/> "
"To output values from it in the template, use: <placeholder "
"type=\"programlisting\" id=\"1\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><warning><para>
#: en/content/hacking-otrs/templates.xml:176
msgid "Because of the missing HTML quoting, this can result in security problems."
msgstr ""

#. type: Content of: <section><section><section><section><warning><para>
#: en/content/hacking-otrs/templates.xml:179
msgid ""
"Whenever possible, use <link "
"linkend=\"quote\"><literal>$Quote{\"$Config{\"\"}\"}</literal></link>."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:185
msgid "$Quote{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:189
#, no-wrap
msgid ""
"$Quote{\"$Config{\"ProductName\"}\"} "
"($Quote{\"$Config{\"Ticket::Hook\"}\"})\n"
"                    ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:197
#, no-wrap
msgid ""
"$Quote{\"Some long long string\", \"8\"})\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:187
msgid ""
"This tag can be used to perform quoting on HTML strings, when no other "
"quoting is possible.  <placeholder type=\"programlisting\" id=\"0\"/> It's "
"also possible specify a maximum length for the value.  If, for example, you "
"just want to show 8 characters of a variable (result will be \"Some "
"lon[...]\"), use the following: <placeholder type=\"programlisting\" "
"id=\"1\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/templates.xml:207
msgid "Localization Commands"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:209
msgid "$Text{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:215
#, no-wrap
msgid ""
"Translate this text: $Text{\"Help\"}\n"
"                    ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:223
#, no-wrap
msgid ""
"Translate data from the application: $Text{\"$Data{\"Type\"}\"}\n"
"                    ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:230
#, no-wrap
msgid ""
"Translate this text and insert the given data: $Text{\"Change %s settings\", "
"\"$Data{\"Type\"}\"}\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:211
msgid ""
"Translates the enlosed string into the current user's selected language and "
"performs HTML quoting on the resulting string. If no translation is found, "
"the original string will be used.  <placeholder type=\"programlisting\" "
"id=\"0\"/> When translating data coming from the application, use "
"<literal>$Data</literal> inside of <literal>$Text</literal>, not "
"<literal>$QData</literal>, to prevent double quoting: <placeholder "
"type=\"programlisting\" id=\"1\"/> You can also specify parameters (%s) "
"inside of the string which should be replaced with other data: <placeholder "
"type=\"programlisting\" id=\"2\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:237
msgid "$JSText{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:245
#, no-wrap
msgid ""
"window.alert('$JSText{\"Some message's content\"}');\n"
"\n"
"// after the command was replaced in the template, this will\n"
"// result in (for an English speaking agent):\n"
"\n"
"window.alert('Some message\\'s content');\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:239
msgid ""
"Works in the same way as <link "
"linkend=\"text\"><literal>$Text{\"\"}</literal></link>, but does not perform "
"HTML encoding but JavaScript string escaping instead (all "
"<literal>'</literal> characters will be encoded as "
"<literal>\\'</literal>. So with the help of this tag you can make sure that "
"even dynamic strings will not break your JavaScript code.  <placeholder "
"type=\"programlisting\" id=\"0\"/> Make sure to use <literal>'</literal> as "
"string delimiter for strings where you want to use "
"<literal>$JSText</literal> inside."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:260
msgid "$TimeLong{\"\"}"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:262
msgid ""
"Inserts a localized date/time stamp (including a possible time zone "
"difference of the current agent)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:271
#, no-wrap
msgid ""
"# from AgentTicketHistory.dtl\n"
"$TimeLong{\"$Data{\"CreateTime\"}\"}\n"
"\n"
"# Result for US English locale:\n"
"06/09/2010 15:45:41\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:266
msgid ""
"In different cultural areas, different convention for date and time "
"formatting are used. For example, what is the 01.02.2010 in Germany, would "
"be 02/01/2010 in the USA. <literal>$Time{\"\"}</literal> abstracts this away "
"from the templates. Let's see an example: <placeholder "
"type=\"programlisting\" id=\"0\"/> First, the data is inserted from the "
"application module with <literal>$Data</literal>.  Here always an ISO UTC "
"timestamp (2010-06-09 15:45:41) must be passed as data to "
"<literal>$TimeLong{\"\"}</literal>. Then <literal>$TimeLong{\"\"}</literal> "
"will take that data and output it according to the date/time definition of "
"the current locale."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:286
msgid ""
"The data passed to <literal>$TimeLong{\"\"}</literal> must be UTC. If a time "
"zone offset is specified for the current agent, it will be applied to the "
"UTC timestamp before the output is generated."
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:292
msgid "$TimeShort{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:297
#, no-wrap
msgid ""
"$TimeShort{\"$Data{\"CreateTime\"}\"}\n"
"\n"
"# Result for US English locale:\n"
"06/09/2010 15:45\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:294
msgid ""
"Works like <link "
"linkend=\"timelong\"><literal>$TimeLong{\"\"}</literal></link>, but does not "
"output the seconds.  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:306
msgid "$Date{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:311
#, no-wrap
msgid ""
"$Date{\"$Data{\"CreateTime\"}\"}\n"
"\n"
"# Result for US English locale:\n"
"06/09/2010\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:308
msgid ""
"Works like <link "
"linkend=\"timelong\"><literal>$TimeLong{\"\"}</literal></link>, but outputs "
"only the date, not the time.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/templates.xml:322
msgid "Template Processing Commands"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:325
msgid "Comment"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:331
#, no-wrap
msgid ""
"# this section is temporarily disabled\n"
"# <div class=\"AsBlock\">\n"
"#     <a href=\"...\">link</a>\n"
"# </div>\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:327
msgid ""
"The dtl comment starts with a # at the beginning of a line and will not be "
"shown in the html output. This can be used both for commenting the DTL "
"(=Template) code or for disabling parts of it.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:341
msgid "$Include{\"\"}"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:346
#, no-wrap
msgid ""
"# include Copyright.dtl\n"
"$Include{\"Copyright\"}\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:343
msgid ""
"Includes another template file into the current one. The included file may "
"also contain template commands.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/templates.xml:354
msgid "dtl:block"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:356
msgid ""
"With this command, one can specify parts of a template file as a block. This "
"block needs to be explicitly filled with a function call from the "
"application, to be present in the generated output. The application can call "
"the block 0 (it will not be present in the output), 1 or more times (each "
"with possibly a different set of data parameters passed to the template)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:365
#, no-wrap
msgid ""
"<table class=\"DataTable\">\n"
"    <thead>\n"
"        <tr>\n"
"            <th>$Text{\"Name\"}</th>\n"
"            <th>$Text{\"Type\"}</th>\n"
"            <th>$Text{\"Comment\"}</th>\n"
"            <th>$Text{\"Valid\"}</th>\n"
"            <th>$Text{\"Changed\"}</th>\n"
"            <th>$Text{\"Created\"}</th>\n"
"        </tr>\n"
"    </thead>\n"
"    <tbody>\n"
"<!-- dtl:block:NoDataFoundMsg -->\n"
"        <tr>\n"
"            <td colspan=\"6\">\n"
"                $Text{\"No data found.\"}\n"
"            </td>\n"
"        </tr>\n"
"<!-- dtl:block:NoDataFoundMsg -->\n"
"<!-- dtl:block:OverviewResultRow -->\n"
"        <tr>\n"
"            <td><a class=\"AsBlock\" "
"href=\"$Env{\"Baselink\"}Action=$Env{\"Action\"};Subaction=Change;ID=$LQData{\"ID\"}\">$QData{\"Name\"}</a></td>\n"
"            <td>$Text{\"$Data{\"TypeName\"}\"}</td>\n"
"            <td "
"title=\"$QData{\"Comment\"}\">$QData{\"Comment\",\"20\"}</td>\n"
"            <td>$Text{\"$Data{\"Valid\"}\"}</td>\n"
"            <td>$TimeShort{\"$QData{\"ChangeTime\"}\"}</td>\n"
"            <td>$TimeShort{\"$QData{\"CreateTime\"}\"}</td>\n"
"        </tr>\n"
"<!-- dtl:block:OverviewResultRow -->\n"
"    </tbody>\n"
"</table>\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:363
msgid ""
"One common use case is the filling of a table with dynamic data: "
"<placeholder type=\"programlisting\" id=\"0\"/> The surrounding table with "
"the header is always generated.  If no data was found, the block "
"<literal>NoDataFoundMsg</literal> is called once, resulting in a table with "
"one data row with the message \"No data found.\""
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:404
msgid ""
"If data was found, for each row there is one function call made for the "
"block <literal>OverViewResultRow</literal> (each time passing in the data "
"for this particular row), resulting in a table with as many data rows as "
"results were found."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:412
#, no-wrap
msgid ""
" my %List = $Self->{StateObject}->StateList(\n"
"    UserID => 1,\n"
"    Valid  => 0,\n"
");\n"
"\n"
"# if there are any states, they are shown\n"
"if (%List) {\n"
"\n"
"    # get valid list\n"
"    my %ValidList = $Self->{ValidObject}->ValidList();\n"
"    for ( sort { $List{$a} cmp $List{$b} } keys %List ) {\n"
"\n"
"        my %Data = $Self->{StateObject}->StateGet( ID => $_, );\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'OverviewResultRow',\n"
"            Data => {\n"
"                Valid => $ValidList{ $Data{ValidID} },\n"
"                %Data,\n"
"            },\n"
"        );\n"
"    }\n"
"}\n"
"\n"
"# otherwise a no data found msg is displayed\n"
"else {\n"
"    $Self->{LayoutObject}->Block(\n"
"        Name => 'NoDataFoundMsg',\n"
"        Data => {},\n"
"    );\n"
"}\n"
"                    ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:410
msgid ""
"Let's look at how the blocks are called from the application module: "
"<placeholder type=\"programlisting\" id=\"0\"/> Note how the blocks have "
"both their name and an optional set of data passed in as separate parameters "
"to the block function call. Data inserting commands inside a block always "
"need the data provided to the block function call of this block, not the "
"<link linkend=\"using-templates\">general template rendering call</link>."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/templates.xml:452
msgid ""
"For details, please refer to the documentation of "
"<literal>Kernel::Output::HTML::Layout</literal> on <ulink "
"url=\"http://dev.otrs/org\">dev.otrs.org</ulink>."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/templates.xml:458
msgid "dtl:js_on_document_complete"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:464
#, no-wrap
msgid ""
"<form title=\"$Text{\"Move ticket to a different queue\"}\" "
"action=\"$Env{\"CGIHandle\"}\" method=\"get\">\n"
"    <input type=\"hidden\" name=\"Action\" value=\"AgentTicketMove\"/>\n"
"    <input type=\"hidden\" name=\"QueueID\" "
"value=\"$QData{\"QueueID\"}\"/>\n"
"    <input type=\"hidden\" name=\"TicketID\" "
"value=\"$QData{\"TicketID\"}\"/>\n"
"    <label for=\"DestQueueID\" class=\"InvisibleText\">$Text{\"Change "
"queue\"}:</label>\n"
"    $Data{\"MoveQueuesStrg\"}\n"
"</form>\n"
"<!-- dtl:js_on_document_complete -->\n"
"<script type=\"text/javascript\">\n"
"    $('#DestQueueID').bind('change', function (Event) {\n"
"        $(this).closest('form').submit();\n"
"    });\n"
"</script>\n"
"<!-- dtl:js_on_document_complete -->\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/templates.xml:460
msgid ""
"Marks JavaScript code which should be executed after all CSS, JavaScript and "
"other external content has been loaded and the basic JavaScript "
"initialization was finished. Again, let's look at an example: <placeholder "
"type=\"programlisting\" id=\"0\"/> This snippet creates a small form and "
"puts an onchange-Handler on the &lt;select&gt; element which causes and "
"automatical form submit."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/templates.xml:485
msgid ""
"Why is it neccessary to enclose the JavaScript code in "
"<literal>dtl:js_on_document_complate</literal>? Starting with OTRS 3.0, "
"JavaScript loading was moved to the footer part of the page for performance "
"reasons. This means that within the &lt;body&gt; of the page, no JavaScript "
"libraries are loaded yet.  With "
"<literal>dtl:js_on_document_complete</literal> you can make sure that this "
"JavaScript is moved to a part of the final HTML document, where it will be "
"executed only after the entire external JavaScript and CSS content has been "
"successfully loaded and initialized."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/templates.xml:496
msgid ""
"Inside the <literal>dtl:js_on_document_complete</literal> block, you can use "
"&lt;script&gt; tags to enclose your JavaScript code, but you do not have to "
"do so.  It may be beneficial because it will enable correct syntax "
"highlighting in IDEs which support it."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/templates.xml:505
msgid "Using a template file"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/templates.xml:509
#, no-wrap
msgid ""
"# render AdminState.dtl\n"
"$Output .= $Self->{LayoutObject}->Output(\n"
"    TemplateFile => 'AdminState',\n"
"    Data         => \\%Param,\n"
");\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/templates.xml:507
msgid ""
"Ok, but how to actually process a template file and generate the result? "
"This is really simple: <placeholder type=\"programlisting\" id=\"0\"/> In "
"the frontend modules, the <literal>Output()</literal> function of "
"<literal>Kernel::Output::HTML::Layout</literal> is called (after all the "
"needed blocks have been called in this template) to generate the final "
"output. An optional set of data parameters is passed to the template, for "
"all data inserting commands which are not inside of a block."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format.xml:6
msgid "Module Format"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format.xml:32
msgid "Old Module Descriptions"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format.xml:33
msgid "Please remove these old sections if newer ones were created."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:35
msgid "Navigation Module"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:37
msgid ""
"In this module layer you can create dynamic navigation bar items with "
"dynamic content (Name and Description). Navigation Module are located under "
"Kernel/Output/HTML/NavBar*.pm."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:42
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/NavBarABC.pm - shows a navbar item dynamicaly\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Output::HTML::NavBarABC;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"# --\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"    [...]\n"
"    return $Self;\n"
"}\n"
"# --\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"    my %Return = ();\n"
"    $Return{'0999989'} = {\n"
"        Block       => 'ItemPersonal',\n"
"        Description => 'Some Desctipton',\n"
"        Name        => 'Text',\n"
"        Image       => 'new-message.png',\n"
"        Link        => 'Action=AgentMailbox&amp;Subaction=New',\n"
"        AccessKey   => 'j',\n"
"    };\n"
"    return %Return;\n"
"}\n"
"# --\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:41 en/content/hacking-otrs/module-format.xml:114 en/content/contributing/translate.xml:50 en/content/contributing/translate.xml:111 en/content/contributing/translate.xml:155
msgid "Format: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:86
#, no-wrap
msgid ""
"[Kernel/Config.pm]\n"
"# agent interface notification module\n"
"$Self->{'Frontend::NavBarModule'}->{'99-ABC'} = {\n"
"    Module => 'Kernel::Output::HTML::NavBarABC',\n"
"};\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:84
msgid ""
"To use this module add the following code to the Kernel/Config.pm and "
"restart your webserver (if you use mod_perl).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:98
msgid ""
"Frontend Modules are located under \"$OTRS_HOME/Kernel/Modules/*.pm\". There "
"are two public functions in there - new() and run() - which are accessed "
"from the Frontend Handle (e. g. index.pl). \"new()\" is used to create a "
"frontend module object. The Frontend Handle provides the used frontend "
"module with the basic framework object.  These are, for example: ParamObject "
"(to get formular params), DBObject (to use existing database connects), "
"LayoutObject (to use templates and other html layout functions), "
"ConfigObject (to access config settings), LogObject (to use the framework "
"log system), UserObject (to get the user functions from the current user), "
"GroupObject (to get the group functions), MainObject (to get main functions "
"like 'Require') and EncodeObject (for the charset encoding)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:110
msgid ""
"For more information on core modules see <ulink "
"url=\"http://dev.otrs.org/\">http://dev.otrs.org/</ulink>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:115
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Modules/AgentTest.pm - message of the day\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Modules::AgentTest;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"# --\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"    [...]\n"
"    return $Self;\n"
"}\n"
"# --\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"    [...]\n"
"    # ---------------------------------------------------------- #\n"
"    # add a new object (Note: dtl text 'New')\n"
"    # ---------------------------------------------------------- #\n"
"    if ($Self->{Subaction} eq 'Add') {\n"
"        my $Output   = '';\n"
"        my %Frontend = ();\n"
"        [...]\n"
"        # add add block\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'Add',\n"
"            Data => {%Param, %Frontend},\n"
"        );\n"
"        # build output\n"
"        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "
"\"Test\");\n"
"        $Output .= $Self->{LayoutObject}->NavigationBar();\n"
"        $Output .= $Self->{LayoutObject}->Output(\n"
"            Data => {%Param, %Frontend},\n"
"            TemplateFile => 'AgentTest',\n"
"        );\n"
"        $Output .= $Self->{LayoutObject}->Footer();\n"
"        return $Output;\n"
"    }\n"
"    # ---------------------------------------------------------- #\n"
"    # show overview screen\n"
"    # ---------------------------------------------------------- #\n"
"    elsif ($Self->{Subaction} eq 'Overview') {\n"
"        # add overview block\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'Overview',\n"
"            Data => {%Param, %Frontend},\n"
"        );\n"
"        # build output\n"
"        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "
"\"Test\");\n"
"        $Output .= $Self->{LayoutObject}->NavigationBar();\n"
"        $Output .= $Self->{LayoutObject}->Output(\n"
"            Data => {%Param, %Frontend},\n"
"            TemplateFile => 'AgentTest',\n"
"        );\n"
"        $Output .= $Self->{LayoutObject}->Footer();\n"
"        return $Output;\n"
"    }\n"
"    # ---------------------------------------------------------- #\n"
"    # show error screen\n"
"    # ---------------------------------------------------------- #\n"
"    return $Self->{LayoutObject}->ErrorScreen(Message => \"Invalid Subaction "
"process!\");\n"
"}\n"
"# --\n"
"1;\n"
"        ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:200
#, no-wrap
msgid ""
"[Kernel/Config.pm]\n"
"$Self->{'Frontend::Module'}->{'AgentTest'} = {\n"
"    Group => ['admin'],\n"
"    GroupRo => ['test', 'admin'],\n"
"    Description => 'A test Module',\n"
"    NavBarName => 'Ticket',\n"
"    NavBar => [\n"
"        {\n"
"            Description => 'Test Module',\n"
"            Name => 'Test',\n"
"            Image => 'stats.png',\n"
"            Link => 'Action=AgentTest',\n"
"            NavBar => 'Ticket',\n"
"            Prio => 85,\n"
"        },\n"
"    ],\n"
"};\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:196
msgid ""
"You also need a module registration for frontend modules. Define read only "
"groups with the \"GroupRo\" and read/write groups with the 'Group' param "
"(see table below for details). You can define navigation bar icons via the "
"\"NavBar'\"param, too (see table below for details).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:221
msgid ""
"You can access this frontend module via http (browse) with the Action param "
"= Module or over the navigation bar."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:225
msgid "<ulink url=\"\">http://localhost/otrs/index.pl?Action=AgentTest</ulink>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:228
msgid "Description of Frontend::Module options:"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/module-format.xml:235 en/content/hacking-otrs/module-format.xml:268
msgid "Key"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:241
msgid "Group"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:242
msgid "An ARRAY reference of rw groups of this module."
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:245
msgid "GroupRo"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:246
msgid "An ARRAY reference of ro groups of this module."
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:250
msgid "Module description, just for internal use - not shown in the user interface."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:253 en/content/hacking-otrs/object-basics.xml:163
msgid "NavBarName"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:254
msgid "NavBar context name of this module."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:261
msgid "Description of NavBar (icon points) options:"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:275
msgid ""
"The description of the icon which is shown in the navbar after the curser is "
"pointed on it."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:278 en/content/hacking-otrs/module-format/agent-auth.xml:203 en/content/hacking-otrs/module-format/auth-sync.xml:110 en/content/hacking-otrs/module-format/customer-auth.xml:211 en/content/hacking-otrs/module-format/customer-user-preferences.xml:194 en/content/hacking-otrs/module-format/queue-preferences.xml:164 en/content/hacking-otrs/module-format/service-preferences.xml:164 en/content/hacking-otrs/module-format/sla-preferences.xml:164 en/content/hacking-otrs/module-format/stats.xml:176 en/content/hacking-otrs/module-format/stats.xml:801 en/content/hacking-otrs/module-format/notify.xml:163 en/content/hacking-otrs/module-format/ticket-menu.xml:183 en/content/hacking-otrs/object-basics.xml:171 en/content/hacking-otrs/package-building.xml:18
msgid "Name"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:279
msgid "The icon name shown in the navbar."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/module-format.xml:282 en/content/hacking-otrs/object-basics.xml:175 en/content/hacking-otrs/object-basics.xml:212 en/content/hacking-otrs/object-basics.xml:267 en/content/hacking-otrs/object-basics.xml:310
msgid "Image"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:283
msgid "The icon image shown in the navbar."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:286 en/content/hacking-otrs/object-basics.xml:179
msgid "Link"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:287
msgid "The link behind the icon in the navbar."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:290 en/content/hacking-otrs/object-basics.xml:183
msgid "NavBar"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:291
msgid "Only shown this icon in this NavBar context."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/module-format.xml:294 en/content/hacking-otrs/object-basics.xml:187 en/content/hacking-otrs/object-basics.xml:210 en/content/hacking-otrs/object-basics.xml:265 en/content/hacking-otrs/object-basics.xml:308
msgid "Prio"
msgstr ""

#. type: Content of: <section><section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format.xml:295
msgid "Sort prio of the icon in the navbar."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:305
msgid ""
"Core modules are located under $OTRS_HOME/Kernel/System/*. This layer is for "
"the logical work. The modules are used to handle system routines like \"lock "
"ticket\" and \"create ticket\". These modules always need pod (Perl "
"Documentation)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:310
msgid ""
"A few common core modules are: Log (Kernel::System::Log); Ticket "
"(Kernel::System::Ticket), Auth (Kernel::System::Auth), User "
"(Kernel::System::User), Email (Kernel::System::Email)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:315
msgid ""
"For more information on the core modules see <ulink "
"url=\"http://dev.otrs.org/\">http://dev.otrs.org</ulink>"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:319 en/content/hacking-otrs/module-format.xml:411 en/content/hacking-otrs/module-format.xml:521 en/content/hacking-otrs/module-format.xml:598 en/content/hacking-otrs/module-format.xml:738
msgid "Format:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:322
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Backend.pm - a core module\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Backend;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"=head1 NAME\n"
"\n"
"Kernel::System::Log - global log interface\n"
"\n"
"=head1 SYNOPSIS\n"
"\n"
"All log functions.\n"
"\n"
"=head1 PUBLIC INTERFACE\n"
"\n"
"=over 4\n"
"\n"
"=item new()\n"
"\n"
"create a backend object\n"
"\n"
"use Kernel::Config;\n"
"use Kernel::System::Backend;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"my $ConfigObject = Kernel::Config->new();\n"
"my $BackendObject    = Kernel::System::Backend->new(ConfigObject => "
"$ConfigObject);\n"
"\n"
"=cut\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"    [...]\n"
"    return $Self;\n"
"}\n"
"\n"
"=item SomeMethodeA()\n"
"\n"
"some info about the methode\n"
"\n"
"$BackendObject->SomeMethodeA(ParamA => 'error', ParamB => \"Need "
"something!\");\n"
"\n"
"=cut\n"
"\n"
"sub SomeMethodeA{\n"
"    my ( $Self, %Param ) = @_;\n"
"    [...]\n"
"    return 1;\n"
"}\n"
"1;\n"
"\n"
"=head1 TERMS AND CONDITIONS\n"
"\n"
"This software is part of the OTRS project (http://otrs.org/).\n"
"\n"
"This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"the enclosed file COPYING for license information (AGPL). If you\n"
"did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"\n"
"=head1 VERSION\n"
"\n"
"$Revision: 1.4 $ $Date: 2012-05-02 07:40:03 $\n"
"\n"
"=cut\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:404
msgid "Customer User Module"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:406
msgid ""
"This module layer can be used as a bridge between your customer source "
"system and OTRS. Thus it is possible to use your customer data directly for "
"your data ware house (read only and read/write)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:414
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/CustomerUser/ABC.pm - a customer data backend\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::CustomerUser::ABD;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"# --\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"    [...]\n"
"    return $Self;\n"
"}\n"
"# --\n"
"sub CustomerName {\n"
"    [...]\n"
"    return $Name;\n"
"}\n"
"# --\n"
"sub CustomerSearch {\n"
"    [...]\n"
"    return %Result;\n"
"}\n"
"# --\n"
"sub CustomerUserList {\n"
"    [...]\n"
"    return %List;\n"
"}\n"
"# --\n"
"sub CustomerIDs {\n"
"    [...]\n"
"    return @CustomerIDs;\n"
"}\n"
"# --\n"
"sub CustomerUserDataGet {\n"
"    [...]\n"
"    return %Data;\n"
"}\n"
"# --\n"
"sub CustomerUserAdd {\n"
"    [...]\n"
"    return 1\n"
"}\n"
"# --\n"
"sub CustomerUserUpdate {\n"
"    [...]\n"
"    return 1;\n"
"}\n"
"# --\n"
"sub SetPassword {\n"
"    [...]\n"
"    return 1;\n"
"}\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:484
msgid "To use this module, see the admin manual."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:488
msgid "Customer Navigation Module"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:490
msgid ""
"In this module layer you can create dynamic navigation bar items with "
"dynamic content (Name and Description)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:494
msgid "The format is the same as in the Navigation Module."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:497
msgid ""
"Just the config setting key is different. To use this module, add the "
"following to the Kernel/Config.pm and restart your webserver (if you use "
"mod_perl)."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:501
#, no-wrap
msgid ""
"[Kernel/Config.pm]\n"
"# customer notifiacation module\n"
"$Self->{'CustomerFrontend::NavBarModule'}->{'99-ABC'} = {\n"
"    Module => 'Kernel::Output::HTML::NavBarABC',\n"
"};\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:511
msgid "Ticket Modules"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:513
msgid "Ticket Number Module"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:515
msgid ""
"If you want to create your own ticket number format, just create your own "
"ticket number module. These modules are located under "
"\"Kernel/System/Ticket/Number/*.pm\".  For default modules see the admin "
"manual. You just need 2 functions: CreateTicketNr() and GetTNByString():"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:524
#, no-wrap
msgid ""
"# --\n"
"# Ticket/Number/Simple.pm - a ticket number auto increment generator\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Ticket::Number::Simple;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub CreateTicketNr {\n"
"    my $Self = shift;\n"
"    my $JumpCounter = shift || 0;\n"
"    # get needed config options\n"
"    [...]\n"
"    return $Tn;\n"
"}\n"
"# --\n"
"sub GetTNByString {\n"
"    my $Self = shift;\n"
"    my $String = shift || return;\n"
"    [...]\n"
"    return $Tn;\n"
"}\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:563
msgid "Ticket PostMaster Module"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:565
msgid ""
"PostMaster modules are used during the PostMaster process.  There are two "
"kinds of PostMaster modules. PostMasterPre (used after parsing an email)  "
"and PostMasterPost (used after an email is processed and in the database) "
"modules."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:570
msgid ""
"If you want to create your own postmaster filter, just create your own "
"module.  These modules are located under "
"\"Kernel/System/PostMaster/Filter/*.pm\".  For default modules see the admin "
"manual. You just need two functions: new() and Run():"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:576
msgid ""
"The following is an examplary module to match emails and set X-OTRS-Headers "
"(see doc/X-OTRS-Headers.txt for more info)."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:580 en/content/hacking-otrs/module-format.xml:718
msgid "Kernel/Config.pm:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:583
#, no-wrap
msgid ""
"# Job Name: 1-Match\n"
"# (block/ignore all spam email with From: noreply@)\n"
"$Self->{'PostMaster::PreFilterModule'}->{'1-Example'} = {\n"
"    Module => 'Kernel::System::PostMaster::Filter::Example',\n"
"    Match => {\n"
"        From => 'noreply@',\n"
"    },\n"
"    Set => {\n"
"        'X-OTRS-Ignore' => 'yes',\n"
"    },\n"
"};\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:601
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/PostMaster/Filter/Example.pm - a postmaster filter\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::PostMaster::Filter::Example;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless ($Self, $Type);\n"
"\n"
"    $Self->{Debug} = $Param{Debug} || 0;\n"
"\n"
"    # get needed objects\n"
"    for (qw(ConfigObject EncodeObject LogObject DBObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"Got no $_!\";\n"
"    }\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"    # get config options\n"
"    my %Config = ();\n"
"    my %Match = ();\n"
"    my %Set = ();\n"
"    if ($Param{JobConfig} &amp;&amp; ref($Param{JobConfig}) eq 'HASH') {\n"
"        %Config = %{$Param{JobConfig}};\n"
"        if ($Config{Match}) {\n"
"            %Match = %{$Config{Match}};\n"
"        }\n"
"        if ($Config{Set}) {\n"
"            %Set = %{$Config{Set}};\n"
"        }\n"
"    }\n"
"    # match 'Match => ???' stuff\n"
"    my $Matched = '';\n"
"    my $MatchedNot = 0;\n"
"    for (sort keys %Match) {\n"
"        if ($Param{GetParam}->{$_} &amp;&amp; $Param{GetParam}->{$_} =~ "
"/$Match{$_}/i) {\n"
"            $Matched = $1 || '1';\n"
"            if ($Self->{Debug} > 1) {\n"
"                $Self->{LogObject}->Log(\n"
"                    Priority => 'debug',\n"
"                    Message => \"'$Param{GetParam}->{$_}' =~ /$Match{$_}/i "
"matched!\",\n"
"                );\n"
"            }\n"
"        }\n"
"        else {\n"
"            $MatchedNot = 1;\n"
"            if ($Self->{Debug} > 1) {\n"
"                $Self->{LogObject}->Log(\n"
"                    Priority => 'debug',\n"
"                    Message => \"'$Param{GetParam}->{$_}' =~ /$Match{$_}/i "
"matched NOT!\",\n"
"                );\n"
"            }\n"
"        }\n"
"    }\n"
"    # should I ignore the incoming mail?\n"
"    if ($Matched &amp;&amp; !$MatchedNot) {\n"
"        for (keys %Set) {\n"
"            if ($Set{$_} =~ /\\[\\*\\*\\*\\]/i) {\n"
"                $Set{$_} = $Matched;\n"
"            }\n"
"            $Param{GetParam}->{$_} = $Set{$_};\n"
"            $Self->{LogObject}->Log(\n"
"                Priority => 'notice',\n"
"                Message => \"Set param '$_' to '$Set{$_}' (Message-ID: "
"$Param{GetParam}->{'Message-ID'}) \",\n"
"            );\n"
"        }\n"
"    }\n"
"\n"
"    return 1;\n"
"}\n"
"\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><para><screenshot>
#: en/content/hacking-otrs/module-format.xml:699
msgid ""
"<graphic srccredit=\"\" scale=\"60\" "
"fileref=\"screenshots/email-processing.png\"></graphic>"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:697
msgid ""
"The following image shows you the email processing flow.  <placeholder "
"type=\"screenshot\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format.xml:704 en/content/hacking-otrs/module-format/ticket-menu.xml:7
msgid "Ticket Menu Module"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:706
msgid "To add links in the ticket menu, just use ticket menu modules."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:709
msgid ""
"If you want to create your own ticket menu link, just create your own "
"module.  These modules are located under "
"\"Kernel/Output/HTML/TicketMenu*.pm\".  For default modules see the admin "
"manual. You just need two functions: new() and Run():"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:715
msgid "The following example shows you how to show a lock or a unlock ticket link."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:721
#, no-wrap
msgid ""
"# for ticket zoom menu\n"
"$Self->{'Ticket::Frontend::MenuModule'}->{'100-Lock'} =  {\n"
"    Action => 'AgentTicketLock',\n"
"    Module => 'Kernel::Output::HTML::TicketMenuLock',\n"
"    Name   => 'Lock'\n"
"};\n"
"\n"
"# for ticket preview menu\n"
"$Self->{'Ticket::Frontend::PreMenuModule'}->{'100-Lock'} =  {\n"
"    Action => 'AgentTicketLock',\n"
"    Module => 'Kernel::Output::HTML::TicketMenuLock',\n"
"    Name   => 'Lock'\n"
"};\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format.xml:741
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/TicketMenuLock.pm\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Output::HTML::TicketMenuLock;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"# --\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless ($Self, $Type);\n"
"\n"
"    # get needed objects\n"
"    for (qw(ConfigObject LogObject DBObject LayoutObject UserID "
"TicketObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"Got no $_!\";\n"
"    }\n"
"\n"
"    return $Self;\n"
"}\n"
"# --\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"    # check needed stuff\n"
"    if (!$Param{Ticket}) {\n"
"        $Self->{LogObject}->Log(Priority => 'error', Message => 'Need "
"Ticket!');\n"
"        return;\n"
"    }\n"
"\n"
"    # check permission\n"
"    if ($Self->{TicketObject}->LockIsTicketLocked(TicketID => "
"$Param{TicketID})) {\n"
"        my $AccessOk = $Self->{TicketObject}->OwnerCheck(\n"
"            TicketID => $Param{TicketID},\n"
"            OwnerID => $Self->{UserID},\n"
"        );\n"
"        if (!$AccessOk) {\n"
"            return $Param{Counter};\n"
"        }\n"
"    }\n"
"\n"
"    $Self->{LayoutObject}->Block(\n"
"        Name => 'Menu',\n"
"        Data => { },\n"
"    );\n"
"    if ($Param{Counter}) {\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'MenuItemSplit',\n"
"            Data => {  },\n"
"        );\n"
"    }\n"
"    if ($Param{Ticket}->{Lock} eq 'lock') {\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'MenuItem',\n"
"            Data => {\n"
"                %{$Param{Config}},\n"
"                %{$Param{Ticket}},\n"
"                %Param,\n"
"                Name => 'Unlock',\n"
"                Description => 'Unlock to give it back to the queue!',\n"
"                Link => "
"'Action=AgentTicketLock&amp;Subaction=Unlock&amp;TicketID=$QData{\"TicketID\"}',\n"
"            },\n"
"        );\n"
"    }\n"
"    else {\n"
"        $Self->{LayoutObject}->Block(\n"
"            Name => 'MenuItem',\n"
"            Data => {\n"
"                %{$Param{Config}},\n"
"                %Param,\n"
"                Name => 'Lock',\n"
"                Description => 'Lock it to work on it!',\n"
"                Link => "
"'Action=AgentTicketLock&amp;Subaction=Lock&amp;TicketID=$QData{\"TicketID\"}',\n"
"            },\n"
"        );\n"
"    }\n"
"    $Param{Counter}++;\n"
"    return $Param{Counter};\n"
"}\n"
"# --\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><section><title>
#: en/content/hacking-otrs/module-format.xml:841
msgid "More Modules"
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:843
msgid ""
"The Agent Ticket Permission Modules (Kernel/System/Ticket/Permission/) "
"contain functions to verify an agent's authorisation to access a ticket."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:847
msgid ""
"The Customer Ticket Permission Modules "
"(Kernel/System/Ticket/CustomerPermission/) contain functions to verify a "
"customer's authorisation to access a ticket."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:851
msgid ""
"The Article Module (Kernel/System/Ticket/Article.pm) facilitates the readout "
"and generating of ticket articles."
msgstr ""

#. type: Content of: <section><section><section><section><para>
#: en/content/hacking-otrs/module-format.xml:854
msgid ""
"More modules and their descriptions are listed under <ulink "
"url=\"http://dev.otrs.org/\">http://dev.otrs.org/</ulink>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/agent-auth.xml:7
msgid "Agent Authentication Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/agent-auth.xml:9
msgid ""
"There are several agent authentication modules (DB, LDAP and HTTPBasicAuth)  "
"which come with the OTRS framework. It is also possible to develop your own "
"authentication modules. The agent authentication modules are located under "
"Kernel/System/Auth/*.pm. For more information about their configuration see "
"the admin manual.  Following, there is an example of a simple agent auth "
"module. Save it under Kernel/System/Auth/Simple.pm.  You just need 3 "
"functions: new(), GetOption() and Auth(). Return the uid, then the "
"authentication is ok."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/agent-auth.xml:18 en/content/hacking-otrs/module-format/auth-sync.xml:19 en/content/hacking-otrs/module-format/customer-auth.xml:18 en/content/hacking-otrs/module-format/customer-user-preferences.xml:18 en/content/hacking-otrs/module-format/queue-preferences.xml:19 en/content/hacking-otrs/module-format/service-preferences.xml:19 en/content/hacking-otrs/module-format/sla-preferences.xml:19 en/content/hacking-otrs/module-format/notify.xml:34 en/content/hacking-otrs/module-format/ticket-menu.xml:17
msgid "Code Example"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/agent-auth.xml:20
msgid ""
"The interface class is called Kernel::System::Auth. The example agent "
"authentication may be called Kernel::System::Auth::CustomAuth. You can find "
"an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/agent-auth.xml:24
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Auth/CustomAuth.pm - provides the CustomAuth "
"authentication\n"
"# based on Martin Edenhofer's Kernel::System::Auth::DB\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# ID: CustomAuth.pm,v 1.1 2010/05/10 15:30:34 fk Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Auth::CustomAuth;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Authen::CustomAuth;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(LogObject ConfigObject DBObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"No $_!\";\n"
"    }\n"
"\n"
"    # Debug 0=off 1=on\n"
"    $Self->{Debug} = 0;\n"
"\n"
"    # get config\n"
"    $Self->{Die} = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Die' "
". $Param{Count} );\n"
"\n"
"    # get user table\n"
"    $Self->{CustomAuthHost} = $Self->{ConfigObject}->Get( "
"'AuthModule::CustomAuth::Host' . $Param{Count} )\n"
"        || die \"Need AuthModule::CustomAuth::Host$Param{Count}.\";\n"
"    $Self->{CustomAuthSecret}\n"
"        = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Password' "
". $Param{Count} )\n"
"        || die \"Need AuthModule::CustomAuth::Password$Param{Count}.\";\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub GetOption {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    if ( !$Param{What} ) {\n"
"        $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"What!\" );\n"
"        return;\n"
"    }\n"
"\n"
"    # module options\n"
"    my %Option = ( PreAuth => 0, );\n"
"\n"
"    # return option\n"
"    return $Option{ $Param{What} };\n"
"}\n"
"\n"
"sub Auth {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    if ( !$Param{User} ) {\n"
"        $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"User!\" );\n"
"        return;\n"
"    }\n"
"\n"
"    # get params\n"
"    my $User       = $Param{User}      || '';\n"
"    my $Pw         = $Param{Pw}        || '';\n"
"    my $RemoteAddr = $ENV{REMOTE_ADDR} || 'Got no REMOTE_ADDR env!';\n"
"    my $UserID     = '';\n"
"    my $GetPw      = '';\n"
"\n"
"    # just in case for debug!\n"
"    if ( $Self->{Debug} > 0 ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: '$User' tried to authenticate with Pw: '$Pw' "
"($RemoteAddr)\",\n"
"        );\n"
"    }\n"
"\n"
"    # just a note\n"
"    if ( !$User ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"No User given!!! (REMOTE_ADDR: $RemoteAddr)\",\n"
"        );\n"
"        return;\n"
"    }\n"
"\n"
"    # just a note\n"
"    if ( !$Pw ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User authentication without Pw!!! "
"(REMOTE_ADDR: $RemoteAddr)\",\n"
"        );\n"
"        return;\n"
"    }\n"
"\n"
"    # Create a radius object\n"
"    my $CustomAuth = Authen::CustomAuth->new(\n"
"        Host   => $Self->{CustomAuthHost},\n"
"        Secret => $Self->{CustomAuthecret},\n"
"    );\n"
"    if ( !$CustomAuth ) {\n"
"        if ( $Self->{Die} ) {\n"
"            die \"Can't connect to $Self->{CustomAuthHost}: $@\";\n"
"        }\n"
"        else {\n"
"            $Self->{LogObject}->Log(\n"
"                Priority => 'error',\n"
"                Message  => \"Can't connect to $Self->{CustomAuthHost}: "
"$@\",\n"
"            );\n"
"            return;\n"
"        }\n"
"    }\n"
"    my $AuthResult = $CustomAuth->check_pwd( $User, $Pw );\n"
"\n"
"    # login note\n"
"    if ( defined($AuthResult) && $AuthResult == 1 ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User authentication ok (REMOTE_ADDR: "
"$RemoteAddr).\",\n"
"        );\n"
"        return $User;\n"
"    }\n"
"\n"
"    # just a note\n"
"    else {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User authentication with wrong Pw!!! "
"(REMOTE_ADDR: $RemoteAddr)\"\n"
"        );\n"
"        return;\n"
"    }\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/agent-auth.xml:177 en/content/hacking-otrs/module-format/auth-sync.xml:84 en/content/hacking-otrs/module-format/customer-auth.xml:179 en/content/hacking-otrs/module-format/customer-user-preferences.xml:152 en/content/hacking-otrs/module-format/queue-preferences.xml:132 en/content/hacking-otrs/module-format/service-preferences.xml:132 en/content/hacking-otrs/module-format/sla-preferences.xml:132 en/content/hacking-otrs/module-format/notify.xml:124 en/content/hacking-otrs/module-format/ticket-menu.xml:136
msgid "Configuration Example"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/agent-auth.xml:179
msgid ""
"There is the need to activate your custom agent authenticate module.  This "
"can be done using the perl configuration below.  It is not recommended to "
"use the xml configuration because you can lock you out via the sysconfig."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/agent-auth.xml:185
#, no-wrap
msgid ""
"            $Self->{'AuthModule'} = 'Kernel::System::Auth::CustomAuth';\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/agent-auth.xml:191 en/content/hacking-otrs/module-format/customer-auth.xml:199 en/content/hacking-otrs/module-format/customer-user-preferences.xml:182 en/content/hacking-otrs/module-format/service-preferences.xml:152 en/content/hacking-otrs/module-format/sla-preferences.xml:152 en/content/hacking-otrs/module-format/notify.xml:150 en/content/hacking-otrs/module-format/ticket-menu.xml:162
msgid "Use Case Example"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/agent-auth.xml:193 en/content/hacking-otrs/module-format/customer-auth.xml:201
msgid "Useful authentification implementation could be a soap backend."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/agent-auth.xml:197 en/content/hacking-otrs/module-format/auth-sync.xml:104 en/content/hacking-otrs/module-format/customer-auth.xml:205 en/content/hacking-otrs/module-format/customer-user-preferences.xml:188 en/content/hacking-otrs/module-format/outputfilter.xml:135 en/content/hacking-otrs/module-format/queue-preferences.xml:158 en/content/hacking-otrs/module-format/service-preferences.xml:158 en/content/hacking-otrs/module-format/sla-preferences.xml:158 en/content/hacking-otrs/module-format/stats.xml:698 en/content/hacking-otrs/module-format/stats.xml:1099 en/content/hacking-otrs/module-format/virtualfs.xml:42 en/content/hacking-otrs/module-format/ticketnumber-generator.xml:51 en/content/hacking-otrs/module-format/dashboard.xml:203 en/content/hacking-otrs/module-format/notify.xml:157 en/content/hacking-otrs/module-format/ticket-menu.xml:177 en/content/hacking-otrs/module-format/ticketevent.xml:59
msgid "Release Availability"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:204 en/content/hacking-otrs/module-format/auth-sync.xml:111 en/content/hacking-otrs/module-format/customer-auth.xml:212 en/content/hacking-otrs/module-format/customer-user-preferences.xml:195 en/content/hacking-otrs/module-format/queue-preferences.xml:165 en/content/hacking-otrs/module-format/service-preferences.xml:165 en/content/hacking-otrs/module-format/sla-preferences.xml:165 en/content/hacking-otrs/module-format/notify.xml:164 en/content/hacking-otrs/module-format/ticket-menu.xml:184
msgid "Release"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:209 en/content/hacking-otrs/module-format/customer-auth.xml:217 en/content/hacking-otrs/module-format/customer-user-preferences.xml:200
msgid "DB"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:210 en/content/hacking-otrs/module-format/agent-auth.xml:218 en/content/hacking-otrs/module-format/customer-auth.xml:218 en/content/hacking-otrs/module-format/customer-auth.xml:226
msgid "1.0"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:213 en/content/hacking-otrs/module-format/customer-auth.xml:221
msgid "HTTPBasicAuth"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:214 en/content/hacking-otrs/module-format/customer-auth.xml:222 en/content/hacking-otrs/module-format/notify.xml:178 en/content/hacking-otrs/module-format/notify.xml:186
msgid "1.2"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:217 en/content/hacking-otrs/module-format/auth-sync.xml:116 en/content/hacking-otrs/module-format/customer-auth.xml:225
msgid "LDAP"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:221 en/content/hacking-otrs/module-format/customer-auth.xml:229
msgid "Radius"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/agent-auth.xml:222 en/content/hacking-otrs/module-format/customer-auth.xml:230
msgid "1.3"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/auth-sync.xml:7
msgid "Authentication Synchonisation Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/auth-sync.xml:9
msgid ""
"There is a LDAP authentication synchonisation module which come with the "
"OTRS framework. It is also possible to develop your own authentication "
"modules. The authentication synchonisation modules are located under "
"Kernel/System/Auth/Sync/*.pm. For more information about their configuration "
"see the admin manual.  Following, there is an example of an authentication "
"synchonisation module.  Save it under "
"Kernel/System/Auth/Sync/CustomAuthSync.pm.  You just need 2 functions: new() "
"and Sync(). Return 1, then the synchonisation is ok."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/auth-sync.xml:21
msgid ""
"The interface class is called Kernel::System::Auth. The example agent "
"authentication may be called Kernel::System::Auth::Sync::CustomAuthSync. You "
"can find an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/auth-sync.xml:25
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Auth/Sync/CustomAuthSync.pm - provides the CustomAuthSync\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: CustomAuthSync.pm,v 1.9 2010/03/25 14:42:45 martin Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Auth::Sync::CustomAuthSync;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"use Net::LDAP;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(LogObject ConfigObject DBObject UserObject GroupObject "
"EncodeObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"No $_!\";\n"
"    }\n"
"\n"
"    # Debug 0=off 1=on\n"
"    $Self->{Debug} = 0;\n"
"\n"
"...\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Sync {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(User)) {\n"
"        if ( !$Param{$_} ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"...\n"
"    return 1;\n"
"}\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/auth-sync.xml:86
msgid ""
"There is the need to activate your custom synconisation authenticate "
"module.  This can be done using the perl configuration below.  It is not "
"recommended to use the xml configuration because you can lock you out via "
"the sysconfig."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/auth-sync.xml:92
#, no-wrap
msgid ""
"            $Self->{'AuthSyncModule'} = "
"'Kernel::System::Auth::Sync::LDAP';\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/auth-sync.xml:98 en/content/hacking-otrs/module-format/queue-preferences.xml:152
msgid "Use Case Examples"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/auth-sync.xml:100
msgid "Useful synchonisation implementation could be a soap or radius backend."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/auth-sync.xml:117 en/content/hacking-otrs/module-format/service-preferences.xml:171 en/content/hacking-otrs/module-format/sla-preferences.xml:171 en/content/hacking-otrs/module-format/ticket-menu.xml:202
msgid "2.4"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/auth-sync.xml:125 en/content/hacking-otrs/module-format/log.xml:158 en/content/hacking-otrs/module-format/outputfilter.xml:116 en/content/hacking-otrs/module-format/stats.xml:692 en/content/hacking-otrs/module-format/stats.xml:1093 en/content/hacking-otrs/module-format/virtualfs.xml:36 en/content/hacking-otrs/module-format/ticketnumber-generator.xml:42 en/content/hacking-otrs/module-format/dashboard.xml:197 en/content/hacking-otrs/module-format/ticket-menu.xml:169 en/content/hacking-otrs/module-format/ticketevent.xml:53
msgid "Caveats and Warnings"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/auth-sync.xml:127
msgid ""
"Please note that the synchonisation was part of the authentification class "
"Kernel::System::Auth before framework 2.4."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/customer-auth.xml:7
msgid "Customer Authentication Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/customer-auth.xml:9
msgid ""
"There are several customer authentication modules (DB, LDAP and "
"HTTPBasicAuth)  which come with the OTRS framework. It is also possible to "
"develop your own authentication modules. The customer authentication modules "
"are located under Kernel/System/CustomerAuth/*.pm. For more information "
"about their configuration see the admin manual.  Following, there is an "
"example of a simple customer auth module. Save it under "
"Kernel/System/CustomerAuth/Simple.pm.  You just need 3 functions: new(), "
"GetOption() and Auth(). Return the uid, then the authentication is ok."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/customer-auth.xml:20
msgid ""
"The interface class is called Kernel::System::CustomerAuth. The example "
"customer authentication may be called "
"Kernel::System::CustomerAuth::CustomAuth. You can find an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/customer-auth.xml:24
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/CustomerAuth/CustomAuth.pm - provides the custom "
"Authentication\n"
"# based on Martin Edenhofer's Kernel::System::Auth::DB\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: CustomAuth.pm,v 1.11 2009/09/22 15:16:05 mb Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::CustomerAuth::CustomAuth;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Authen::CustomAuth;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(LogObject ConfigObject DBObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"No $_!\";\n"
"    }\n"
"\n"
"    # Debug 0=off 1=on\n"
"    $Self->{Debug} = 0;\n"
"\n"
"    # get config\n"
"    $Self->{Die}\n"
"        = $Self->{ConfigObject}->Get( "
"'Customer::AuthModule::CustomAuth::Die' . $Param{Count} );\n"
"\n"
"    # get user table\n"
"    $Self->{CustomAuthHost}\n"
"        = $Self->{ConfigObject}->Get( "
"'Customer::AuthModule::CustomAuth::Host' . $Param{Count} )\n"
"        || die \"Need Customer::AuthModule::CustomAuth::Host$Param{Count} in "
"Kernel/Config.pm\";\n"
"    $Self->{CustomAuthSecret}\n"
"        = $Self->{ConfigObject}->Get( "
"'Customer::AuthModule::CustomAuth::Password' . $Param{Count} )\n"
"        || die \"Need "
"Customer::AuthModule::CustomAuth::Password$Param{Count} in "
"Kernel/Config.pm\";\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub GetOption {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    if ( !$Param{What} ) {\n"
"        $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"What!\" );\n"
"        return;\n"
"    }\n"
"\n"
"    # module options\n"
"    my %Option = ( PreAuth => 0, );\n"
"\n"
"    # return option\n"
"    return $Option{ $Param{What} };\n"
"}\n"
"\n"
"sub Auth {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    if ( !$Param{User} ) {\n"
"        $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"User!\" );\n"
"        return;\n"
"    }\n"
"\n"
"    # get params\n"
"    my $User       = $Param{User}      || '';\n"
"    my $Pw         = $Param{Pw}        || '';\n"
"    my $RemoteAddr = $ENV{REMOTE_ADDR} || 'Got no REMOTE_ADDR env!';\n"
"    my $UserID     = '';\n"
"    my $GetPw      = '';\n"
"\n"
"    # just in case for debug!\n"
"    if ( $Self->{Debug} > 0 ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: '$User' tried to authentificate with Pw: "
"'$Pw' ($RemoteAddr)\",\n"
"        );\n"
"    }\n"
"\n"
"    # just a note\n"
"    if ( !$User ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"No User given!!! (REMOTE_ADDR: $RemoteAddr)\",\n"
"        );\n"
"        return;\n"
"    }\n"
"\n"
"    # just a note\n"
"    if ( !$Pw ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User Authentication without Pw!!! "
"(REMOTE_ADDR: $RemoteAddr)\",\n"
"        );\n"
"        return;\n"
"    }\n"
"\n"
"    # Create a custom object\n"
"    my $CustomAuth = Authen::CustomAuth->new(\n"
"        Host   => $Self->{CustomAuthHost},\n"
"        Secret => $Self->{CustomAuthSecret},\n"
"    );\n"
"    if ( !$CustomAuth ) {\n"
"        if ( $Self->{Die} ) {\n"
"            die \"Can't connect to $Self->{CustomAuthHost}: $@\";\n"
"        }\n"
"        else {\n"
"            $Self->{LogObject}->Log(\n"
"                Priority => 'error',\n"
"                Message  => \"Can't connect to $Self->{CustomAuthHost}: "
"$@\",\n"
"            );\n"
"            return;\n"
"        }\n"
"    }\n"
"    my $AuthResult = $CustomAuth->check_pwd( $User, $Pw );\n"
"\n"
"    # login note\n"
"    if ( defined($AuthResult) && $AuthResult == 1 ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User Authentication ok (REMOTE_ADDR: "
"$RemoteAddr).\",\n"
"        );\n"
"        return $User;\n"
"    }\n"
"\n"
"    # just a note\n"
"    else {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'notice',\n"
"            Message  => \"User: $User Authentication with wrong Pw!!! "
"(REMOTE_ADDR: $RemoteAddr)\"\n"
"        );\n"
"        return;\n"
"    }\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/customer-auth.xml:181
msgid ""
"There is the need to activate your custom customer authenticate module.  "
"This can be done using the xml configuration below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/customer-auth.xml:185
#, no-wrap
msgid ""
"<ConfigItem Name=\"AuthModule\" Required=\"1\" Valid=\"1\">\n"
"    <Description Lang=\"en\">Module to authenticate "
"customers.</Description>\n"
"    <Description Lang=\"de\">Modul zum Authentifizieren der "
"Customer.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::CustomerAuthAuth</SubGroup>\n"
"    <Setting>\n"
"        <Option Location=\"Kernel/System/CustomerAuth/*.pm\" "
"SelectedID=\"Kernel::System::CustomerAuth::CustomAuth\"></Option>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:7
msgid "Customer User Preferences Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:9
msgid ""
"There is a DB customer-user preferences module which come with the OTRS "
"framework.  It is also possible to develop your own customer-user "
"preferences modules.  The customer-user preferences modules are located "
"under Kernel/System/CustomerUser/Preferences/*.pm. For more information "
"about their configuration see the admin manual.  There is an example of a "
"customer-user preferences module below.  Save it under "
"Kernel/System/CustomerUser/Preferences/Custom.pm.  You just need 4 "
"functions: new(), SearchPreferences(), SetPreferences() and "
"GetPreferences()."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:20
msgid ""
"The interface class is called Kernel::System::CustomerUser. The example "
"customer-user preferences may be called "
"Kernel::System::CustomerUser::Preferences::Custom. You can find an example "
"below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:24
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/CustomerUser/Preferences/Custom.pm - some customer user "
"functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: Custom.pm,v 1.20 2009/10/07 20:41:50 martin Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::CustomerUser::Preferences::Custom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for my $Object (qw(DBObject ConfigObject LogObject)) {\n"
"        $Self->{$Object} = $Param{$Object} || die \"Got no $Object!\";\n"
"    }\n"
"\n"
"    # preferences table data\n"
"    $Self->{PreferencesTable} = "
"$Self->{ConfigObject}->Get('CustomerPreferences')->{Params}->{Table}\n"
"        || 'customer_preferences';\n"
"    $Self->{PreferencesTableKey}\n"
"        = "
"$Self->{ConfigObject}->Get('CustomerPreferences')->{Params}->{TableKey}\n"
"        || 'preferences_key';\n"
"    $Self->{PreferencesTableValue}\n"
"        = "
"$Self->{ConfigObject}->Get('CustomerPreferences')->{Params}->{TableValue}\n"
"        || 'preferences_value';\n"
"    $Self->{PreferencesTableUserID}\n"
"        = "
"$Self->{ConfigObject}->Get('CustomerPreferences')->{Params}->{TableUserID}\n"
"        || 'user_id';\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub SetPreferences {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my $UserID = $Param{UserID} || return;\n"
"    my $Key    = $Param{Key}    || return;\n"
"    my $Value = defined( $Param{Value} ) ? $Param{Value} : '';\n"
"\n"
"    # delete old data\n"
"    return if !$Self->{DBObject}->Do(\n"
"        SQL => \"DELETE FROM $Self->{PreferencesTable} WHERE \"\n"
"            . \" $Self->{PreferencesTableUserID} = ? AND "
"$Self->{PreferencesTableKey} = ?\",\n"
"        Bind => [ \\$UserID, \\$Key ],\n"
"    );\n"
"\n"
"    $Value .= 'Custom';\n"
"\n"
"    # insert new data\n"
"    return if !$Self->{DBObject}->Do(\n"
"        SQL => \"INSERT INTO $Self->{PreferencesTable} "
"($Self->{PreferencesTableUserID}, \"\n"
"            . \" $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue}) \"\n"
"            . \" VALUES (?, ?, ?)\",\n"
"        Bind => [ \\$UserID, \\$Key, \\$Value ],\n"
"    );\n"
"\n"
"    return 1;\n"
"}\n"
"\n"
"sub GetPreferences {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my $UserID = $Param{UserID} || return;\n"
"    my %Data;\n"
"\n"
"    # get preferences\n"
"\n"
"    return if !$Self->{DBObject}->Prepare(\n"
"        SQL => \"SELECT $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue} \"\n"
"            . \" FROM $Self->{PreferencesTable} WHERE "
"$Self->{PreferencesTableUserID} = ?\",\n"
"        Bind => [ \\$UserID ],\n"
"    );\n"
"    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {\n"
"        $Data{ $Row[0] } = $Row[1];\n"
"    }\n"
"\n"
"    # return data\n"
"    return %Data;\n"
"}\n"
"\n"
"sub SearchPreferences {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my %UserID;\n"
"    my $Key   = $Param{Key}   || '';\n"
"    my $Value = $Param{Value} || '';\n"
"\n"
"    # get preferences\n"
"    my $SQL = \"SELECT $Self->{PreferencesTableUserID}, "
"$Self->{PreferencesTableValue} \"\n"
"        . \" FROM \"\n"
"        . \" $Self->{PreferencesTable} \"\n"
"        . \" WHERE \"\n"
"        . \" $Self->{PreferencesTableKey} = '\"\n"
"        . $Self->{DBObject}->Quote($Key) . \"'\" . \" AND \"\n"
"        . \" LOWER($Self->{PreferencesTableValue}) LIKE LOWER('\"\n"
"        . $Self->{DBObject}->Quote( $Value, 'Like' ) . \"')\";\n"
"\n"
"    return if !$Self->{DBObject}->Prepare( SQL => $SQL );\n"
"    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {\n"
"        $UserID{ $Row[0] } = $Row[1];\n"
"    }\n"
"\n"
"    # return data\n"
"    return %UserID;\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:154
msgid ""
"There is the need to activate your custom customer-user preferences module.  "
"This can be done using the xml configuration below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:158
#, no-wrap
msgid ""
"<ConfigItem Name=\"CustomerPreferences\" Required=\"1\" Valid=\"1\">\n"
"    <Description Lang=\"en\">Parameters for the customer preference "
"table.</Description>\n"
"    <Description Lang=\"de\">Parameter für die Tabelle mit den Einstellungen "
"für die Customer.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::Customer::Preferences</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item "
"Key=\"Module\">Kernel::System::CustomerUser::Preferences::Custom</Item>\n"
"            <Item  Key=\"Params\">\n"
"                <Hash>\n"
"                    <Item Key=\"Table\">customer_preferences</Item>\n"
"                    <Item Key=\"TableKey\">preferences_key</Item>\n"
"                    <Item Key=\"TableValue\">preferences_value</Item>\n"
"                    <Item Key=\"TableUserID\">user_id</Item>\n"
"                </Hash>\n"
"            </Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:184
msgid "Useful preferences implementation could be a soap or ldap backend."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/customer-user-preferences.xml:201 en/content/hacking-otrs/module-format/queue-preferences.xml:171
msgid "2.3"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/log.xml:8
msgid "Log Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/log.xml:11
msgid ""
"There is a gobal log interface for OTRS that provides the possibility to "
"create own log backends."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/log.xml:14
msgid ""
"Writing an own logging backend is as easy as reimplementing the "
"Kernel::System::Log::Log() method."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/log.xml:17
msgid "Code example: Kernel::System::Log::CustomFile"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/log.xml:19
msgid ""
"In this small example, we'll write a little file logging backend which works "
"similar to Kernel::System::Log::File, but prepends a string to each logging "
"entry."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/log.xml:24
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Log/CustomFile.pm - file log backend\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Log::CustomFile;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"umask \"002\";\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # get needed objects\n"
"    for (qw(ConfigObject EncodeObject)) {\n"
"        if ( $Param{$_} ) {\n"
"            $Self->{$_} = $Param{$_};\n"
"        }\n"
"        else {\n"
"            die \"Got no $_!\";\n"
"        }\n"
"    }\n"
"\n"
"    # get logfile location\n"
"    $Self->{LogFile} = '/var/log/CustomFile.log';\n"
"\n"
"    # set custom prefix\n"
"    $Self->{CustomPrefix} = 'CustomFileExample';\n"
"\n"
"    # Fixed bug# 2265 - For IIS we need to create a own error log file.\n"
"    # Bind stderr to log file, because iis do print stderr to web page.\n"
"    if ( $ENV{SERVER_SOFTWARE} && $ENV{SERVER_SOFTWARE} =~ "
"/^microsoft\\-iis/i ) {\n"
"        if ( !open STDERR, '>>', $Self->{LogFile} . '.error' ) {\n"
"            print STDERR \"ERROR: Can't write $Self->{LogFile}.error: "
"$!\";\n"
"        }\n"
"    }\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Log {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my $FH;\n"
"\n"
"    # open logfile\n"
"    if ( !open $FH, '>>', $Self->{LogFile} ) {\n"
"\n"
"        # print error screen\n"
"        print STDERR \"\\n\";\n"
"        print STDERR \" >> Can't write $Self->{LogFile}: $! <<\\n\";\n"
"        print STDERR \"\\n\";\n"
"        return;\n"
"    }\n"
"\n"
"    # write log file\n"
"    $Self->{EncodeObject}->SetIO($FH);\n"
"    print $FH '[' . localtime() . ']';\n"
"    if ( lc $Param{Priority} eq 'debug' ) {\n"
"        print $FH \"[Debug][$Param{Module}][$Param{Line}] "
"$Self->{CustomPrefix} $Param{Message}\\n\";\n"
"    }\n"
"    elsif ( lc $Param{Priority} eq 'info' ) {\n"
"        print $FH \"[Info][$Param{Module}]  $Self->{CustomPrefix} "
"$Param{Message}\\n\";\n"
"    }\n"
"    elsif ( lc $Param{Priority} eq 'notice' ) {\n"
"        print $FH \"[Notice][$Param{Module}] $Self->{CustomPrefix} "
"$Param{Message}\\n\";\n"
"    }\n"
"    elsif ( lc $Param{Priority} eq 'error' ) {\n"
"        print $FH \"[Error][$Param{Module}][$Param{Line}] "
"$Self->{CustomPrefix} $Param{Message}\\n\";\n"
"    }\n"
"    else {\n"
"\n"
"        # print error messages to STDERR\n"
"        print STDERR\n"
"            \"[Error][$Param{Module}] $Self->{CustomPrefix} Priority: "
"'$Param{Priority}' not defined! Message: $Param{Message}\\n\";\n"
"\n"
"        # and of course to logfile\n"
"        print $FH\n"
"            \"[Error][$Param{Module}] $Self->{CustomPrefix} Priority: "
"'$Param{Priority}' not defined! Message: $Param{Message}\\n\";\n"
"    }\n"
"\n"
"    # close file handle\n"
"    close $FH;\n"
"    return 1;\n"
"}\n"
"\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/log.xml:131 en/content/hacking-otrs/module-format/outputfilter.xml:65 en/content/hacking-otrs/module-format/stats.xml:666 en/content/hacking-otrs/module-format/stats.xml:1081 en/content/hacking-otrs/module-format/virtualfs.xml:22 en/content/hacking-otrs/module-format/ticketnumber-generator.xml:26 en/content/hacking-otrs/module-format/ticketevent.xml:21
msgid "Configuration example"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/log.xml:133
msgid ""
"To activate our custom logging module, the administrator can either set the "
"existing configuration item \"LogModule\" manually to "
"\"Kernel::System::Log::CustomFile\". To realize this automatically, you can "
"provide an XML configuration file which overrides the default setting."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/log.xml:139
#, no-wrap
msgid ""
"<ConfigItem Name=\"LogModule\" Required=\"1\" Valid=\"1\">\n"
"    <Description Translatable=\"1\">Set Kernel::System::Log::CustomFile as "
"default logging backend.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Core::Log</SubGroup>\n"
"    <Setting>\n"
"        <Option Location=\"Kernel/System/Log/*.pm\" "
"SelectedID=\"Kernel::System::Log::CustomFile\"></Option>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/log.xml:152 en/content/hacking-otrs/module-format/stats.xml:686 en/content/hacking-otrs/module-format/stats.xml:1087 en/content/hacking-otrs/module-format/virtualfs.xml:30
msgid "Use case examples"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/log.xml:154
msgid ""
"Useful logging backends could be logging to a web service or to encrypted "
"files."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/log.xml:160
msgid ""
"Please note that Kernel::System::Log has other methods than Log() which "
"cannot be reimplemented, for example code for working with shared memory "
"segments and log data caching."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:4
msgid "Output Filter"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:6
msgid ""
"Output filters allow to modify HTML on the fly. It is best practice to use "
"output filters instead of modifying <filename>.dtl</filename> files "
"directly.  There are three good reasons for that.  When the same adaption "
"has to be applied to several frontend modules then the adaption only has to "
"be implemented once.  The second advantage is that when OTRS is upgraded "
"there is a chance that the filter doesn't have to be updated, when the "
"relevant pattern has not changed.  When two extensions modify the same file "
"there is a conflict during the installation of the second package.  This "
"conflict can be resolved by using two output filters that modify the same "
"frontend module."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:17
msgid ""
"There are four different kinds of output filters. They are active at "
"different stages of the generation of HTML content."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:21
msgid "FilterElementPre"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:23
msgid ""
"The content of a template can be changed by the filter before any processing "
"by the Layout module takes place.  This kind of filter should be used in "
"most cases.  Processing instructions like $Text{\"...\"}, $QData{\"...\"} "
"can be inserted into the template content and they will be honored by the "
"subsequent DTL processing."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:30
msgid "FilterElementPost"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:32
msgid ""
"The content of a template can be changed after variable substitution and "
"translation.  The kind of filter should only be used when the filter needs "
"access to translated strings or to substituted variables."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:38
msgid "FilterContent"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:40
msgid ""
"This kind of filter allows to process the complete HTML output for the "
"request right before it is sent to the browser.  This can be used for global "
"transformations.  But in real live there is rarely a need to use this kind "
"of filter."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:47
msgid "FilterText"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:49
msgid ""
"This kind of output filter is a plugin for the method "
"Kernel::Output::HTML::Layout::Ascii2HTML()  and is only active when the "
"parameter LinkFeature is set to 1.  Thus the FilterText output filters are "
"currently only active for the display of the body of plain text articles.  "
"Plain text articles are generated by incoming non-HTML mails and when OTRS "
"is configured to not use the rich text feature in the frontend."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:59 en/content/hacking-otrs/module-format/stats.xml:37 en/content/hacking-otrs/module-format/stats.xml:723 en/content/hacking-otrs/module-format/virtualfs.xml:14 en/content/hacking-otrs/module-format/ticketnumber-generator.xml:20 en/content/hacking-otrs/module-format/ticketevent.xml:15
msgid "Code example"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:61 en/content/hacking-otrs/module-format/outputfilter.xml:67
msgid "See package TemplateModule."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:71 en/content/hacking-otrs/module-format/ticketnumber-generator.xml:32 en/content/hacking-otrs/module-format/ticketevent.xml:27
msgid "Use Cases"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:73
msgid "Show additional ticket attributes in AgentTicketZoom."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:75
msgid ""
"All ticket attributes are passed to the AgentTicketZoom template.  Therefore "
"it suffices to insert e.g. the instruction $QData{\"Title\"} into the "
"content.  This can be achieved with a FilterElementPre output filter."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:81
msgid "Add an additional CSS file."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:83
msgid ""
"An additional CSS file can be added to all agent frontends with an "
"FilterElementPre filter that only modifies <filename>Header.dtl</filename>.  "
"Therefore it suffices to insert e.g. the instruction $QData{\"Title\"} into "
"the content.  This can be achieved with a FilterElementPre output filter."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:90
msgid "Show the service selection as a multi level menu."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:92
msgid ""
"Use a FilterElementPost for this feature.  The list of selectable services "
"can be parsed from the processed template output. The multi level selection "
"can be constructed from the service list and inserted into the template "
"content. A FilterElementPost output filter must be used for that."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:99
msgid "Create links within plain text article bodies."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:101
msgid ""
"A biotech company uses gene names like IPI00217472 in plain text articles.  "
"A FilterText output filter can be used to create links to a sequence "
"database, "
"e.g. "
"http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-e+[IPI-acc:IPI00217472]+-vn+2, "
"for the gene names."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:108
msgid "Prohibit active content"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:110
msgid ""
"There is firewall rule that disallows all active content. In order to avoid "
"rejection by the firewall the HTML tag &lt;applet&gt; can be filtered with "
"an FilterContent output filter."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:118
msgid ""
"Every ElementPre and ElementPost output filter is constructed and run for "
"every Template that is needed for the current request.  Thus low performance "
"of the output filter or a large number of filters can severely degrade "
"performance.  When that becomes an issue, the construction of needed objects "
"can be done in the Run-method after the checks.  Thus the expensive code is "
"run only in the relevant cases."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/outputfilter.xml:128
msgid "Best Practices"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:130
msgid ""
"In order to increase flexibility the list of affected templates should be "
"configurable in SysConfig."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/outputfilter.xml:137
msgid "The four kinds of output filters are available in OTRS 2.4."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:7
msgid "Queue Preferences Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:9
msgid ""
"There is a DB queue preferences module which come with the OTRS framework.  "
"It is also possible to develop your own queue preferences modules.  The "
"queue preferences modules are located under Kernel/System/Queue/*.pm. For "
"more information about their configuration see the admin manual.  Following, "
"there is an example of a queue preferences module.  Save it under "
"Kernel/System/Queue/PreferencesCustom.pm.  You just need 3 functions: new(), "
"QueuePreferencesSet() and QueuePreferencesGet(). Return 1, then the "
"synchonisation is ok."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:21
msgid ""
"The interface class is called Kernel::System::Queue. The example queue "
"preferences may be called Kernel::System::Queue::PreferencesCustom. You can "
"find an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/queue-preferences.xml:25
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Queue/PreferencesCustom.pm - some user functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: PreferencesCustom.pm,v 1.5 2009/02/16 11:47:34 tr Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Queue::PreferencesCustom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(DBObject ConfigObject LogObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"Got no $_!\";\n"
"    }\n"
"\n"
"    # preferences table data\n"
"    $Self->{PreferencesTable}        = 'queue_preferences';\n"
"    $Self->{PreferencesTableKey}     = 'preferences_key';\n"
"    $Self->{PreferencesTableValue}   = 'preferences_value';\n"
"    $Self->{PreferencesTableQueueID} = 'queue_id';\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub QueuePreferencesSet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(QueueID Key Value)) {\n"
"        if ( !defined( $Param{$_} ) ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # delete old data\n"
"    return if !$Self->{DBObject}->Do(\n"
"        SQL => \"DELETE FROM $Self->{PreferencesTable} WHERE \"\n"
"            . \"$Self->{PreferencesTableQueueID} = ? AND "
"$Self->{PreferencesTableKey} = ?\",\n"
"        Bind => [ \\$Param{QueueID}, \\$Param{Key} ],\n"
"    );\n"
"\n"
"    $Self->{PreferencesTableValue} .= 'PreferencesCustom';\n"
"\n"
"    # insert new data\n"
"    return $Self->{DBObject}->Do(\n"
"        SQL => \"INSERT INTO $Self->{PreferencesTable} "
"($Self->{PreferencesTableQueueID}, \"\n"
"            . \" $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue}) \"\n"
"            . \" VALUES (?, ?, ?)\",\n"
"        Bind => [ \\$Param{QueueID}, \\$Param{Key}, \\$Param{Value} ],\n"
"    );\n"
"}\n"
"\n"
"sub QueuePreferencesGet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(QueueID)) {\n"
"        if ( !$Param{$_} ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # check if queue preferences are available\n"
"    if ( !$Self->{ConfigObject}->Get('QueuePreferences') ) {\n"
"        return;\n"
"    }\n"
"\n"
"    # get preferences\n"
"    return if !$Self->{DBObject}->Prepare(\n"
"        SQL => \"SELECT $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue} \"\n"
"            . \" FROM $Self->{PreferencesTable} WHERE "
"$Self->{PreferencesTableQueueID} = ?\",\n"
"        Bind => [ \\$Param{QueueID} ],\n"
"    );\n"
"    my %Data;\n"
"    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {\n"
"        $Data{ $Row[0] } = $Row[1];\n"
"    }\n"
"\n"
"    # return data\n"
"    return %Data;\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:134
msgid ""
"There is the need to activate your custom queue preferences module.  This "
"can be done using the xml configuration below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/queue-preferences.xml:138
#, no-wrap
msgid ""
"<ConfigItem Name=\"Queue::PreferencesModule\" Required=\"1\" Valid=\"1\">\n"
"    <Description Lang=\"en\">Default queue preferences "
"module.</Description>\n"
"    <Description Lang=\"de\">Standard Queue Preferences "
"Module.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Queue::Preferences</SubGroup>\n"
"    <Setting>\n"
"        <String "
"Regex=\"\">Kernel::System::Queue::PreferencesCustom</String>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:154 en/content/hacking-otrs/module-format/service-preferences.xml:154 en/content/hacking-otrs/module-format/sla-preferences.xml:154
msgid "Useful preferences implementation could be a soap or radius backend."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/queue-preferences.xml:170 en/content/hacking-otrs/module-format/service-preferences.xml:170 en/content/hacking-otrs/module-format/sla-preferences.xml:170
msgid "PreferencesDB"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/service-preferences.xml:7
msgid "Service Preferences Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/service-preferences.xml:9
msgid ""
"There is a DB service preferences module which come with the OTRS "
"framework.  It is also possible to develop your own service preferences "
"modules.  The service preferences modules are located under "
"Kernel/System/Service/*.pm. For more information about their configuration "
"see the admin manual.  Following, there is an example of a service "
"preferences module.  Save it under "
"Kernel/System/Service/PreferencesCustom.pm.  You just need 3 functions: "
"new(), ServicePreferencesSet() and ServicePreferencesGet(). Return 1, then "
"the synchonisation is ok."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/service-preferences.xml:21
msgid ""
"The interface class is called Kernel::System::Service. The example service "
"preferences may be called Kernel::System::Service::PreferencesCustom. You "
"can find an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/service-preferences.xml:25
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Service/PreferencesCustom - some user functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: PreferencesCustom.pm,v 1.2 2009/02/16 11:47:34 tr Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Service::PreferencesCustom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(DBObject ConfigObject LogObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"Got no $_!\";\n"
"    }\n"
"\n"
"    # preferences table data\n"
"    $Self->{PreferencesTable}          = 'service_preferences';\n"
"    $Self->{PreferencesTableKey}       = 'preferences_key';\n"
"    $Self->{PreferencesTableValue}     = 'preferences_value';\n"
"    $Self->{PreferencesTableServiceID} = 'service_id';\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub ServicePreferencesSet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(ServiceID Key Value)) {\n"
"        if ( !defined( $Param{$_} ) ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # delete old data\n"
"    return if !$Self->{DBObject}->Do(\n"
"        SQL => \"DELETE FROM $Self->{PreferencesTable} WHERE \"\n"
"            . \"$Self->{PreferencesTableServiceID} = ? AND "
"$Self->{PreferencesTableKey} = ?\",\n"
"        Bind => [ \\$Param{ServiceID}, \\$Param{Key} ],\n"
"    );\n"
"\n"
"$Self->{PreferencesTableValue} .= 'PreferencesCustom';\n"
"\n"
"    # insert new data\n"
"    return $Self->{DBObject}->Do(\n"
"        SQL => \"INSERT INTO $Self->{PreferencesTable} "
"($Self->{PreferencesTableServiceID}, \"\n"
"            . \" $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue}) \"\n"
"            . \" VALUES (?, ?, ?)\",\n"
"        Bind => [ \\$Param{ServiceID}, \\$Param{Key}, \\$Param{Value} ],\n"
"    );\n"
"}\n"
"\n"
"sub ServicePreferencesGet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(ServiceID)) {\n"
"        if ( !$Param{$_} ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # check if service preferences are available\n"
"    if ( !$Self->{ConfigObject}->Get('ServicePreferences') ) {\n"
"        return;\n"
"    }\n"
"\n"
"    # get preferences\n"
"    return if !$Self->{DBObject}->Prepare(\n"
"        SQL => \"SELECT $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue} \"\n"
"            . \" FROM $Self->{PreferencesTable} WHERE "
"$Self->{PreferencesTableServiceID} = ?\",\n"
"        Bind => [ \\$Param{ServiceID} ],\n"
"    );\n"
"    my %Data;\n"
"    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {\n"
"        $Data{ $Row[0] } = $Row[1];\n"
"    }\n"
"\n"
"    # return data\n"
"    return %Data;\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/service-preferences.xml:134
msgid ""
"There is the need to activate your custom service preferences module.  This "
"can be done using the xml configuration below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/service-preferences.xml:138
#, no-wrap
msgid ""
"<ConfigItem Name=\"Service::PreferencesModule\" Required=\"1\" "
"Valid=\"1\">\n"
"    <Description Lang=\"en\">Default service preferences "
"module.</Description>\n"
"    <Description Lang=\"de\">Standard Service Preferences "
"Module.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Service::Preferences</SubGroup>\n"
"    <Setting>\n"
"        <String "
"Regex=\"\">Kernel::System::Service::PreferencesCustom</String>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/sla-preferences.xml:7
msgid "SLA Preferences Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/sla-preferences.xml:9
msgid ""
"There is a DB sla preferences module which come with the OTRS framework.  It "
"is also possible to develop your own sla preferences modules.  The sla "
"preferences modules are located under Kernel/System/SLA/*.pm. For more "
"information about their configuration see the admin manual.  Following, "
"there is an example of a sla preferences module.  Save it under "
"Kernel/System/SLA/PreferencesCustom.pm.  You just need 3 functions: new(), "
"SLAPreferencesSet() and SLAPreferencesGet(). Return 1, then the "
"synchonisation is ok."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/sla-preferences.xml:21
msgid ""
"The interface class is called Kernel::System::SLA. The example sla "
"preferences may be called Kernel::System::SLA::PreferencesCustom. You can "
"find an example below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/sla-preferences.xml:25
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/SLA/PreferencesCustom.pm - some user functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: PreferencesCustom.pm,v 1.2 2009/02/16 11:47:34 tr Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::SLA::PreferencesCustom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for (qw(DBObject ConfigObject LogObject)) {\n"
"        $Self->{$_} = $Param{$_} || die \"Got no $_!\";\n"
"    }\n"
"\n"
"    # preferences table data\n"
"    $Self->{PreferencesTable}      = 'sla_preferences';\n"
"    $Self->{PreferencesTableKey}   = 'preferences_key';\n"
"    $Self->{PreferencesTableValue} = 'preferences_value';\n"
"    $Self->{PreferencesTableSLAID} = 'sla_id';\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub SLAPreferencesSet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(SLAID Key Value)) {\n"
"        if ( !defined( $Param{$_} ) ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # delete old data\n"
"    return if !$Self->{DBObject}->Do(\n"
"        SQL => \"DELETE FROM $Self->{PreferencesTable} WHERE \"\n"
"            . \"$Self->{PreferencesTableSLAID} = ? AND "
"$Self->{PreferencesTableKey} = ?\",\n"
"        Bind => [ \\$Param{SLAID}, \\$Param{Key} ],\n"
"    );\n"
"\n"
"$Self->{PreferencesTableValue} .= 'PreferencesCustom';\n"
"\n"
"    # insert new data\n"
"    return $Self->{DBObject}->Do(\n"
"        SQL => \"INSERT INTO $Self->{PreferencesTable} "
"($Self->{PreferencesTableSLAID}, \"\n"
"            . \" $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue}) \"\n"
"            . \" VALUES (?, ?, ?)\",\n"
"        Bind => [ \\$Param{SLAID}, \\$Param{Key}, \\$Param{Value} ],\n"
"    );\n"
"}\n"
"\n"
"sub SLAPreferencesGet {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for (qw(SLAID)) {\n"
"        if ( !$Param{$_} ) {\n"
"            $Self->{LogObject}->Log( Priority => 'error', Message => \"Need "
"$_!\" );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # check if service preferences are available\n"
"    if ( !$Self->{ConfigObject}->Get('SLAPreferences') ) {\n"
"        return;\n"
"    }\n"
"\n"
"    # get preferences\n"
"    return if !$Self->{DBObject}->Prepare(\n"
"        SQL => \"SELECT $Self->{PreferencesTableKey}, "
"$Self->{PreferencesTableValue} \"\n"
"            . \" FROM $Self->{PreferencesTable} WHERE "
"$Self->{PreferencesTableSLAID} = ?\",\n"
"        Bind => [ \\$Param{SLAID} ],\n"
"    );\n"
"    my %Data;\n"
"    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {\n"
"        $Data{ $Row[0] } = $Row[1];\n"
"    }\n"
"\n"
"    # return data\n"
"    return %Data;\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/sla-preferences.xml:134
msgid ""
"There is the need to activate your custom sla preferences module.  This can "
"be done using the xml configuration below."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/sla-preferences.xml:138
#, no-wrap
msgid ""
"<ConfigItem Name=\"SLA::PreferencesModule\" Required=\"1\" Valid=\"1\">\n"
"    <Description Lang=\"en\">Default sla preferences module.</Description>\n"
"    <Description Lang=\"de\">Standard SLA Preferences "
"Module.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::SLA::Preferences</SubGroup>\n"
"    <Setting>\n"
"        <String Regex=\"\">Kernel::System::SLA::PreferencesCustom</String>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/stats.xml:5
msgid "Stats Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/stats.xml:7
msgid ""
"There are two different types of internal stats modules - dynamic and "
"static. This section describes how such stats modules can be developed."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/stats.xml:10
msgid "Dynamic Stats"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:12
msgid ""
"In contrast to static stats modules, dynamic statistics can be configured "
"via the OTRS web interface. In this section a simple statistic module is "
"developed. Each dynamic stats module has to implement these subroutines"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:17 en/content/hacking-otrs/module-format/stats.xml:712
msgid "new"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:20
msgid "GetObjectName"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:23
msgid "GetObjectAttributes"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:26
msgid "ExportWrapper"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:29
msgid "ImportWrapper"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:34
msgid ""
"Furthermore the module has to implement either GetStatElement or "
"GetStatTable. And if the header line of the result table should be changed, "
"a sub called GetHeaderLine has to be developed."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:39
msgid ""
"In this section a sample stats module is shown and each subroutine is "
"explained."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:42
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Stats/Dynamic/DynamicStatsTemplate.pm - all advice "
"functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Stats::Dynamic::DynamicStatsTemplate;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Kernel::System::Queue;\n"
"use Kernel::System::State;\n"
"use Kernel::System::Ticket;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:66
msgid ""
"This is common boilerplate that can be found in common OTRS modules. The "
"class/package name is declared via the package keyword. Then the needed "
"modules are 'use'd."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:69
#, no-wrap
msgid ""
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for my $Object (\n"
"        qw(DBObject ConfigObject LogObject UserObject TimeObject MainObject "
"EncodeObject)\n"
"        )\n"
"    {\n"
"        $Self->{$Object} = $Param{$Object} || die \"Got no $Object!\";\n"
"    }\n"
"\n"
"    # created needed objects\n"
"    $Self->{QueueObject}    = Kernel::System::Queue->new( %{$Self} );\n"
"    $Self->{TicketObject}   = Kernel::System::Ticket->new( %{$Self} );\n"
"    $Self->{StateObject}    = Kernel::System::State->new( %{$Self} );\n"
"\n"
"    return $Self;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:95
msgid ""
"new is the constructor for this statistic module. It creates a new instance "
"of the class. According to the coding guidelines objects of other classes "
"that are needed in this module have to be created in \"new\". In lines 27 to "
"29 the object of the stats module is created. Lines 31 to 37 check if "
"objects that are needed in this code - either for creating other objects or "
"in this module - are passed. After that the other objects are created."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:98
#, no-wrap
msgid ""
"sub GetObjectName {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    return 'Sample Statistics';\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:107
msgid ""
"GetObjectName returns a Name for the Statistics module. This is the label "
"that is shown in the drop down in the configuration as well as in the list "
"of existing statistics (column \"object\")."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:110
#, no-wrap
msgid ""
"sub GetObjectAttributes {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # get state list\n"
"    my %StateList = $Self->{StateObject}->StateList(\n"
"        UserID => 1,\n"
"    );\n"
"\n"
"    # get queue list\n"
"    my %QueueList = $Self->{QueueObject}->GetAllQueues();\n"
"\n"
"    # get current time to fix bug#3830\n"
"    my $TimeStamp = $Self->{TimeObject}->CurrentTimestamp();\n"
"    my ($Date) = split /\\s+/, $TimeStamp;\n"
"    my $Today = sprintf \"%s 23:59:59\", $Date;\n"
"\n"
"    my @ObjectAttributes = (\n"
"        {\n"
"            Name             => 'State',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'StateIDs',\n"
"            Block            => 'MultiSelectField',\n"
"            Values           => \\%StateList,\n"
"        },\n"
"        {\n"
"            Name             => 'Created in Queue',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'CreatedQueueIDs',\n"
"            Block            => 'MultiSelectField',\n"
"            Translation      => 0,\n"
"            Values           => \\%QueueList,\n"
"        },\n"
"        {\n"
"            Name             => 'Create Time',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'CreateTime',\n"
"            TimePeriodFormat => 'DateInputFormat',    # "
"'DateInputFormatLong',\n"
"            Block            => 'Time',\n"
"            TimeStop         => $Today,\n"
"            Values           => {\n"
"                TimeStart => 'TicketCreateTimeNewerDate',\n"
"                TimeStop  => 'TicketCreateTimeOlderDate',\n"
"            },\n"
"        },\n"
"    );\n"
"\n"
"    return @ObjectAttributes;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:168
msgid ""
"In this sample stats module, we want to provide three attributes the user "
"can chose from: A list of queues, a list of states an a time drop down. To "
"get the values shown in the drop down, some operations are needed. In this "
"case call StateList and GetAllQueues."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:171
msgid ""
"Then the list of attributes is created. Each attribute is defined via a "
"hashreference. You can use these keys:"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:177 en/content/hacking-otrs/module-format/stats.xml:798
msgid "the label in the web interface"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:180
msgid "UseAsXvalue"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:181
msgid "Can this attribute be used on the x-axis"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:184
msgid "UseAsValueSeries"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:185
msgid "Can this attribute be used on the y-axis"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:188
msgid "UseAsRestriction"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:189
msgid "Can this attribute be used for restrictions."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/module-format/stats.xml:192 en/content/hacking-otrs/object-basics.xml:157
msgid "Element"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:193 en/content/hacking-otrs/module-format/stats.xml:802
msgid "the HTML fieldname"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:196
msgid "Block"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:197
msgid ""
"the block name in the template file "
"(e.g. &lt;OTRS_HOME&gt;/Kernel/Output/HTML/Standard/AgentStatsEditXaxis.dtl)"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:200
msgid "Values"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:201 en/content/hacking-otrs/module-format/stats.xml:806
msgid "the values shown in the attribute"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:206
msgid ""
"Hint: If you install this sample an you configured a statistic with some "
"queues - lets say 'queue A' and 'queue B' - then these queues are the only "
"ones that are shown to the user when he starts the statistic. Sometimes a "
"dynamic drop down or multiselect field is needed. In this case, you can set "
"\"SelectedValues\" in the definition of the attribute:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:209
#, no-wrap
msgid ""
"        {\n"
"            Name             => 'Created in Queue',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'CreatedQueueIDs',\n"
"            Block            => 'MultiSelectField',\n"
"            Translation      => 0,\n"
"            Values           => \\%QueueList,\n"
"            SelectedValues   => [ @SelectedQueues ],\n"
"        },\n"
"                ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:224
#, no-wrap
msgid ""
"sub GetStatElement {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # search tickets\n"
"    return $Self->{TicketObject}->TicketSearch(\n"
"        UserID     => 1,\n"
"        Result     => 'COUNT',\n"
"        Permission => 'ro',\n"
"        Limit      => 100_000_000,\n"
"        %Param,\n"
"    );\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:240
msgid ""
"GetStatElement gets called for each cell in the result table. So it should "
"be a numeric value. In this sample it does a simple ticket search. The hash "
"%Param contains information about the \"current\" x-value and the y-value as "
"well as any restrictions. So, for a cell that should count the created "
"tickets for queue 'Misc' with state 'open' the passed parameter hash looks "
"something like this:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:243
#, no-wrap
msgid ""
"    'CreatedQueueIDs' => [\n"
"        '4'\n"
"    ],\n"
"    'StateIDs' => [\n"
"        '2'\n"
"    ]\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:253
msgid ""
"If the \"per cell\" calculation should be avoided, GetStatTable is an "
"alternative. GetStatTable returns a list of rows, hence an array of "
"arrayreferences. This leads to the same result as using GetStatElement"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:256
#, no-wrap
msgid ""
"sub GetStatTable {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my @StatData;\n"
"\n"
"    for my $StateName ( keys %{ $Param{TableStructure} } ) {\n"
"        my @Row;\n"
"        for my $Params ( @{ $Param{TableStructure}->{$StateName} } ) {\n"
"            my $Tickets = $Self->{TicketObject}->TicketSearch(\n"
"                UserID     => 1,\n"
"                Result     => 'COUNT',\n"
"                Permission => 'ro',\n"
"                Limit      => 100_000_000,\n"
"                %{$Params},\n"
"            );\n"
"\n"
"            push @Row, $Tickets;\n"
"        }\n"
"\n"
"        push @StatData, [ $StateName, @Row ];\n"
"    }\n"
"\n"
"    return @StatData;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:284
msgid ""
"GetStatTable gets all information about the stats query that is needed. The "
"passed parameters contains information about the attributes (Restrictions, "
"attributes that are used for x/y-axis) and the table structure. The table "
"structure is a hash reference where the keys are the values of the y-axis "
"and their values are hashreferences with the parameters used for "
"GetStatElement subroutines."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:287
#, no-wrap
msgid ""
"    'Restrictions' => {},\n"
"    'TableStructure' => {\n"
"        'closed successful' => [\n"
"            {\n"
"                'CreatedQueueIDs' => [\n"
"                    '3'\n"
"                ],\n"
"                'StateIDs' => [\n"
"                    '2'\n"
"                ]\n"
"            },\n"
"        ],\n"
"        'closed unsuccessful' => [\n"
"            {\n"
"                'CreatedQueueIDs' => [\n"
"                    '3'\n"
"                ],\n"
"                'StateIDs' => [\n"
"                    '3'\n"
"                ]\n"
"            },\n"
"        ],\n"
"    },\n"
"    'ValueSeries' => [\n"
"        {\n"
"            'Block' => 'MultiSelectField',\n"
"            'Element' => 'StateIDs',\n"
"            'Name' => 'State',\n"
"            'SelectedValues' => [\n"
"                '5',\n"
"                '3',\n"
"                '2',\n"
"                '1',\n"
"                '4'\n"
"            ],\n"
"            'Translation' => 1,\n"
"            'Values' => {\n"
"                '1' => 'new',\n"
"                '10' => 'closed with workaround',\n"
"                '2' => 'closed successful',\n"
"                '3' => 'closed unsuccessful',\n"
"                '4' => 'open',\n"
"                '5' => 'removed',\n"
"                '6' => 'pending reminder',\n"
"                '7' => 'pending auto close+',\n"
"                '8' => 'pending auto close-',\n"
"                '9' => 'merged'\n"
"            }\n"
"        }\n"
"    ],\n"
"    'XValue' => {\n"
"        'Block' => 'MultiSelectField',\n"
"        'Element' => 'CreatedQueueIDs',\n"
"        'Name' => 'Created in Queue',\n"
"        'SelectedValues' => [\n"
"            '3',\n"
"            '4',\n"
"            '1',\n"
"            '2'\n"
"        ],\n"
"        'Translation' => 0,\n"
"        'Values' => {\n"
"            '1' => 'Postmaster',\n"
"            '2' => 'Raw',\n"
"            '3' => 'Junk',\n"
"            '4' => 'Misc'\n"
"        }\n"
"    }\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:359
msgid ""
"Sometimes the headers of the table have to be changed. In that case, a "
"subroutine called GetHeaderLine has to be implemented. That subroutine has "
"to return an arrayreference with the column headers as elements. It gets "
"information about the x-values passed."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:362
#, no-wrap
msgid ""
"sub GetHeaderLine {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my @HeaderLine = ('');\n"
"    for my $SelectedXValue ( @{ $Param{XValue}->{SelectedValues} } ) {\n"
"        push @HeaderLine, $Param{XValue}->{Values}->{$SelectedXValue};\n"
"    }\n"
"\n"
"    return \\@HeaderLine;\n"
"}\n"
"                ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:376
#, no-wrap
msgid ""
"sub ExportWrapper {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # wrap ids to used spelling\n"
"    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {\n"
"        ELEMENT:\n"
"        for my $Element ( @{ $Param{$Use} } ) {\n"
"            next ELEMENT if !$Element || !$Element->{SelectedValues};\n"
"            my $ElementName = $Element->{Element};\n"
"            my $Values      = $Element->{SelectedValues};\n"
"\n"
"            if ( $ElementName eq 'QueueIDs' || $ElementName eq "
"'CreatedQueueIDs' ) {\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"                    $ID->{Content} = $Self->{QueueObject}->QueueLookup( "
"QueueID => $ID->{Content} );\n"
"                }\n"
"            }\n"
"            elsif ( $ElementName eq 'StateIDs' || $ElementName eq "
"'CreatedStateIDs' ) {\n"
"                my %StateList = $Self->{StateObject}->StateList( UserID => 1 "
");\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"                    $ID->{Content} = $StateList{ $ID->{Content} };\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    return \\%Param;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:410
msgid ""
"Configured statistics can be exported into XML format. But as queues with "
"the same queue names can have different IDs on different OTRS instances it "
"would be quite painful to export the IDs (the statistics would calculate the "
"wrong numbers then). So an export wrapper should be written to use the names "
"instead of ids. This should be done for each \"dimension\" of the stats "
"module (x-axis, y-axis and restrictions)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:413
msgid ""
"ImportWrapper works the other way around - it converts the name to the ID in "
"the instance the configuration is imported to."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:416
msgid "This is a sample export:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:419
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"\n"
"<otrs_stats>\n"
"<Cache>0</Cache>\n"
"<Description>Sample stats module</Description>\n"
"<File></File>\n"
"<Format>CSV</Format>\n"
"<Format>Print</Format>\n"
"<Object>DeveloperManualSample</Object>\n"
"<ObjectModule>Kernel::System::Stats::Dynamic::DynamicStatsTemplate</ObjectModule>\n"
"<ObjectName>Sample Statistics</ObjectName>\n"
"<Permission>stats</Permission>\n"
"<StatType>dynamic</StatType>\n"
"<SumCol>0</SumCol>\n"
"<SumRow>0</SumRow>\n"
"<Title>Sample 1</Title>\n"
"<UseAsValueSeries Element=\"StateIDs\" Fixed=\"1\">\n"
"<SelectedValues>removed</SelectedValues>\n"
"<SelectedValues>closed unsuccessful</SelectedValues>\n"
"<SelectedValues>closed successful</SelectedValues>\n"
"<SelectedValues>new</SelectedValues>\n"
"<SelectedValues>open</SelectedValues>\n"
"</UseAsValueSeries>\n"
"<UseAsXvalue Element=\"CreatedQueueIDs\" Fixed=\"1\">\n"
"<SelectedValues>Junk</SelectedValues>\n"
"<SelectedValues>Misc</SelectedValues>\n"
"<SelectedValues>Postmaster</SelectedValues>\n"
"<SelectedValues>Raw</SelectedValues>\n"
"</UseAsXvalue>\n"
"<Valid>1</Valid>\n"
"</otrs_stats>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:454
msgid ""
"Now, that all subroutines are explained, this is the complete sample stats "
"module."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:457
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Stats/Dynamic/DynamicStatsTemplate.pm - all advice "
"functions\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Stats::Dynamic::DynamicStatsTemplate;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Kernel::System::Queue;\n"
"use Kernel::System::State;\n"
"use Kernel::System::Ticket;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check needed objects\n"
"    for my $Object (\n"
"        qw(DBObject ConfigObject LogObject UserObject TimeObject MainObject "
"EncodeObject)\n"
"        )\n"
"    {\n"
"        $Self->{$Object} = $Param{$Object} || die \"Got no $Object!\";\n"
"    }\n"
"\n"
"    # created needed objects\n"
"    $Self->{QueueObject}    = Kernel::System::Queue->new( %{$Self} );\n"
"    $Self->{TicketObject}   = Kernel::System::Ticket->new( %{$Self} );\n"
"    $Self->{StateObject}    = Kernel::System::State->new( %{$Self} );\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub GetObjectName {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    return 'Sample Statistics';\n"
"}\n"
"\n"
"sub GetObjectAttributes {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # get state list\n"
"    my %StateList = $Self->{StateObject}->StateList(\n"
"        UserID => 1,\n"
"    );\n"
"\n"
"    # get queue list\n"
"    my %QueueList = $Self->{QueueObject}->GetAllQueues();\n"
"\n"
"    # get current time to fix bug#3830\n"
"    my $TimeStamp = $Self->{TimeObject}->CurrentTimestamp();\n"
"    my ($Date) = split /\\s+/, $TimeStamp;\n"
"    my $Today = sprintf \"%s 23:59:59\", $Date;\n"
"\n"
"    my @ObjectAttributes = (\n"
"        {\n"
"            Name             => 'State',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'StateIDs',\n"
"            Block            => 'MultiSelectField',\n"
"            Values           => \\%StateList,\n"
"        },\n"
"        {\n"
"            Name             => 'Created in Queue',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'CreatedQueueIDs',\n"
"            Block            => 'MultiSelectField',\n"
"            Translation      => 0,\n"
"            Values           => \\%QueueList,\n"
"        },\n"
"        {\n"
"            Name             => 'Create Time',\n"
"            UseAsXvalue      => 1,\n"
"            UseAsValueSeries => 1,\n"
"            UseAsRestriction => 1,\n"
"            Element          => 'CreateTime',\n"
"            TimePeriodFormat => 'DateInputFormat',    # "
"'DateInputFormatLong',\n"
"            Block            => 'Time',\n"
"            TimeStop         => $Today,\n"
"            Values           => {\n"
"                TimeStart => 'TicketCreateTimeNewerDate',\n"
"                TimeStop  => 'TicketCreateTimeOlderDate',\n"
"            },\n"
"        },\n"
"    );\n"
"\n"
"    return @ObjectAttributes;\n"
"}\n"
"\n"
"sub GetStatElement {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # search tickets\n"
"    return $Self->{TicketObject}->TicketSearch(\n"
"        UserID     => 1,\n"
"        Result     => 'COUNT',\n"
"        Permission => 'ro',\n"
"        Limit      => 100_000_000,\n"
"        %Param,\n"
"    );\n"
"}\n"
"\n"
"sub ExportWrapper {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # wrap ids to used spelling\n"
"    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {\n"
"        ELEMENT:\n"
"        for my $Element ( @{ $Param{$Use} } ) {\n"
"            next ELEMENT if !$Element || !$Element->{SelectedValues};\n"
"            my $ElementName = $Element->{Element};\n"
"            my $Values      = $Element->{SelectedValues};\n"
"\n"
"            if ( $ElementName eq 'QueueIDs' || $ElementName eq "
"'CreatedQueueIDs' ) {\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"                    $ID->{Content} = $Self->{QueueObject}->QueueLookup( "
"QueueID => $ID->{Content} );\n"
"                }\n"
"            }\n"
"            elsif ( $ElementName eq 'StateIDs' || $ElementName eq "
"'CreatedStateIDs' ) {\n"
"                my %StateList = $Self->{StateObject}->StateList( UserID => 1 "
");\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"                    $ID->{Content} = $StateList{ $ID->{Content} };\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    return \\%Param;\n"
"}\n"
"\n"
"sub ImportWrapper {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # wrap used spelling to ids\n"
"    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {\n"
"        ELEMENT:\n"
"        for my $Element ( @{ $Param{$Use} } ) {\n"
"            next ELEMENT if !$Element || !$Element->{SelectedValues};\n"
"            my $ElementName = $Element->{Element};\n"
"            my $Values      = $Element->{SelectedValues};\n"
"\n"
"            if ( $ElementName eq 'QueueIDs' || $ElementName eq "
"'CreatedQueueIDs' ) {\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"                    if ( $Self->{QueueObject}->QueueLookup( Queue => "
"$ID->{Content} ) ) {\n"
"                        $ID->{Content}\n"
"                            = $Self->{QueueObject}->QueueLookup( Queue => "
"$ID->{Content} );\n"
"                    }\n"
"                    else {\n"
"                        $Self->{LogObject}->Log(\n"
"                            Priority => 'error',\n"
"                            Message  => \"Import: Can' find the queue "
"$ID->{Content}!\"\n"
"                        );\n"
"                        $ID = undef;\n"
"                    }\n"
"                }\n"
"            }\n"
"            elsif ( $ElementName eq 'StateIDs' || $ElementName eq "
"'CreatedStateIDs' ) {\n"
"                ID:\n"
"                for my $ID ( @{$Values} ) {\n"
"                    next ID if !$ID;\n"
"\n"
"                    my %State = $Self->{StateObject}->StateGet(\n"
"                        Name  => $ID->{Content},\n"
"                        Cache => 1,\n"
"                    );\n"
"                    if ( $State{ID} ) {\n"
"                        $ID->{Content} = $State{ID};\n"
"                    }\n"
"                    else {\n"
"                        $Self->{LogObject}->Log(\n"
"                            Priority => 'error',\n"
"                            Message  => \"Import: Can' find state "
"$ID->{Content}!\"\n"
"                        );\n"
"                        $ID = undef;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    return \\%Param;\n"
"}\n"
"\n"
"1;\n"
"                ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:668
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n"
"<otrs_config version=\"1.0\" init=\"Config\">\n"
"    <ConfigItem "
"Name=\"Stats::DynamicObjectRegistration###DynamicStatsTemplate\" "
"Required=\"0\" Valid=\"1\">\n"
"        <Description Lang=\"en\">Here you can decide if the common stats "
"module may generate stats about the number of default tickets a requester "
"created.</Description>\n"
"        <Group>Framework</Group>\n"
"        <SubGroup>Core::Stats</SubGroup>\n"
"        <Setting>\n"
"            <Hash>\n"
"                <Item "
"Key=\"Module\">Kernel::System::Stats::Dynamic::DynamicStatsTemplate</Item>\n"
"            </Hash>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"</otrs_config>\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:688 en/content/hacking-otrs/module-format/stats.xml:1089
msgid "Use cases."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:694
msgid ""
"If you have a lot of cells in the result table and the GetStatElement is "
"quite complex, the request can take a long time."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:700
msgid "Dynamic stat modules are available since OTRS 2.0."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/module-format/stats.xml:705
msgid "Static Stats"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:707
msgid ""
"The subsequent paragraphs describe the static stats. Static stats are very "
"easy to create as these modules have to implement only three subroutines."
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:715
msgid "Param"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:718
msgid "Run"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:725
msgid "The following paragraphs describe the subroutines needed in a static stats."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:728
#, no-wrap
msgid ""
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {%Param};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check all needed objects\n"
"    for my $Needed (\n"
"        qw(DBObject ConfigObject LogObject\n"
"        TimeObject MainObject EncodeObject)\n"
"        )\n"
"    {\n"
"        $Self->{$Needed} = $Param{$Needed} || die \"Got no $Needed\";\n"
"    }\n"
"\n"
"    # create needed objects\n"
"    $Self->{TypeObject}   = Kernel::System::Type->new( %{$Self} );\n"
"    $Self->{TicketObject} = Kernel::System::Ticket->new( %{$Self} );\n"
"    $Self->{QueueObject}  = Kernel::System::Queue->new( %{$Self} );\n"
"\n"
"    return $Self;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:755
msgid ""
"new creates a new instance of the static stats class. First it creates a new "
"object and then it checks for the needed objects."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:758
#, no-wrap
msgid ""
"sub Param {\n"
"    my $Self = shift;\n"
"\n"
"    my %Queues = $Self->{QueueObject}->GetAllQueues();\n"
"    my %Types  = $Self->{TypeObject}->TypeList(\n"
"        Valid => 1,\n"
"    );\n"
"\n"
"    my @Params = (\n"
"        {\n"
"            Frontend  => 'Type',\n"
"            Name      => 'TypeIDs',\n"
"            Multiple  => 1,\n"
"            Size      => 3,\n"
"            Data      => \\%Types,\n"
"        },\n"
"        {\n"
"            Frontend  => 'Queue',\n"
"            Name      => 'QueueIDs',\n"
"            Multiple  => 1,\n"
"            Size      => 3,\n"
"            Data      => \\%Queues,\n"
"        },\n"
"    );\n"
"\n"
"    return @Params;\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:789
msgid ""
"The Param method provides the list of all parameters/attributes that can be "
"selected to create a static stat. It gets some parameters passed: The values "
"for the stats attributes provided in a request, the format of the stats and "
"the name of the object (name of the module)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:792
msgid ""
"The parameters/attributes have to be hashreferences with these "
"key-value-pairs."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:797
msgid "Frontent"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/stats.xml:805
msgid "Data"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:811
msgid ""
"Other parameter for the BuildSelection method of the LayoutObject can be "
"used, as it is done with \"Size\" and \"Multiple\" in this sample module."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:814
#, no-wrap
msgid ""
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for my $Needed (qw(TypeIDs QueueIDs)) {\n"
"        if ( !$Param{$Needed} ) {\n"
"            $Self->{LogObject}->Log(\n"
"                Priority => 'error',\n"
"                Message  => \"Need $Needed!\",\n"
"            );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # set report title\n"
"    my $Title = 'Tickets per Queue';\n"
"\n"
"    # table headlines\n"
"    my @HeadData = (\n"
"        'Ticket Number',\n"
"        'Queue',\n"
"        'Type',\n"
"    );\n"
"\n"
"    my @Data;\n"
"    my @TicketIDs = $Self->{TicketObject}->TicketSearch(\n"
"        UserID     => 1,\n"
"        Result     => 'ARRAY',\n"
"        Permission => 'ro',\n"
"        %Param,\n"
"    );\n"
"\n"
"    for my $TicketID ( @TicketIDs ) {\n"
"        my %Ticket = $Self->{TicketObject}->TicketGet(\n"
"            UserID => 1,\n"
"            TicketID => $TicketID,\n"
"        );\n"
"        push @Data, [ $Ticket{TicketNumber}, $Ticket{Queue}, $Ticket{Type} "
"];\n"
"    }\n"
"\n"
"    return ( [$Title], [@HeadData], @Data );\n"
"}\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:860
msgid ""
"The Run method actually generates the table data for the stats. It gets the "
"attributes for this stats passed. In this sample it in %Param a key "
"'TypeIDs' and a key 'QueueIDs' exist (see attributes in Param method) and "
"their values are arrayreferences. The returned data consists of three parts: "
"Two arrayreferences and an array. In the first arrayreference the title for "
"the statistic is stored, the second arrayreference contains the headlines "
"for the columns in the table. And then the data for the table body follow."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:863
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/Stats/Static/StaticStatsTemplate.pm\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::Stats::Static::StaticStatsTemplate;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Kernel::System::Type;\n"
"use Kernel::System::Ticket;\n"
"use Kernel::System::Queue;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"=head1 NAME\n"
"\n"
"StaticStatsTemplate.pm - the module that creates the stats about tickets in "
"a queue\n"
"\n"
"=head1 SYNOPSIS\n"
"\n"
"All functions\n"
"\n"
"=head1 PUBLIC INTERFACE\n"
"\n"
"=over 4\n"
"\n"
"=cut\n"
"\n"
"=item new()\n"
"\n"
"create an object\n"
"\n"
"    use Kernel::Config;\n"
"    use Kernel::System::Encode;\n"
"    use Kernel::System::Log;\n"
"    use Kernel::System::Main;\n"
"    use Kernel::System::Time;\n"
"    use Kernel::System::DB;\n"
"    use Kernel::System::Stats::Static::StaticStatsTemplate;\n"
"\n"
"    my $ConfigObject = Kernel::Config->new();\n"
"    my $EncodeObject = Kernel::System::Encode->new(\n"
"        ConfigObject => $ConfigObject,\n"
"    );\n"
"    my $LogObject    = Kernel::System::Log->new(\n"
"        ConfigObject => $ConfigObject,\n"
"    );\n"
"    my $MainObject = Kernel::System::Main->new(\n"
"        ConfigObject => $ConfigObject,\n"
"        LogObject    => $LogObject,\n"
"    );\n"
"    my $TimeObject = Kernel::System::Time->new(\n"
"        ConfigObject => $ConfigObject,\n"
"        LogObject    => $LogObject,\n"
"    );\n"
"    my $DBObject = Kernel::System::DB->new(\n"
"        ConfigObject => $ConfigObject,\n"
"        LogObject    => $LogObject,\n"
"        MainObject   => $MainObject,\n"
"    );\n"
"    my $StatsObject = "
"Kernel::System::Stats::Static::StaticStatsTemplate->new(\n"
"        ConfigObject => $ConfigObject,\n"
"        LogObject    => $LogObject,\n"
"        MainObject   => $MainObject,\n"
"        TimeObject   => $TimeObject,\n"
"        DBObject     => $DBObject,\n"
"        EncodeObject => $EncodeObject,\n"
"    );\n"
"\n"
"=cut\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {%Param};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # check all needed objects\n"
"    for my $Needed (\n"
"        qw(DBObject ConfigObject LogObject\n"
"        TimeObject MainObject EncodeObject)\n"
"        )\n"
"    {\n"
"        $Self->{$Needed} = $Param{$Needed} || die \"Got no $Needed\";\n"
"    }\n"
"\n"
"    # create needed objects\n"
"    $Self->{TypeObject}   = Kernel::System::Type->new( %{$Self} );\n"
"    $Self->{TicketObject} = Kernel::System::Ticket->new( %{$Self} );\n"
"    $Self->{QueueObject}  = Kernel::System::Queue->new( %{$Self} );\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"=item Param()\n"
"\n"
"Get all parameters a user can specify.\n"
"\n"
"    my @Params = $StatsObject->Param();\n"
"\n"
"=cut\n"
"\n"
"sub Param {\n"
"    my $Self = shift;\n"
"\n"
"    my %Queues = $Self->{QueueObject}->GetAllQueues();\n"
"    my %Types  = $Self->{TypeObject}->TypeList(\n"
"        Valid => 1,\n"
"    );\n"
"\n"
"    my @Params = (\n"
"        {\n"
"            Frontend  => 'Type',\n"
"            Name      => 'TypeIDs',\n"
"            Multiple  => 1,\n"
"            Size      => 3,\n"
"            Data      => \\%Types,\n"
"        },\n"
"        {\n"
"            Frontend  => 'Queue',\n"
"            Name      => 'QueueIDs',\n"
"            Multiple  => 1,\n"
"            Size      => 3,\n"
"            Data      => \\%Queues,\n"
"        },\n"
"    );\n"
"\n"
"    return @Params;\n"
"}\n"
"\n"
"=item Run()\n"
"\n"
"generate the statistic.\n"
"\n"
"    my $StatsInfo = $StatsObject->Run(\n"
"        TypeIDs  => [\n"
"            1, 2, 4\n"
"        ],\n"
"        QueueIDs => [\n"
"            3, 4, 6\n"
"        ],\n"
"    );\n"
"\n"
"=cut\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    for my $Needed (qw(TypeIDs QueueIDs)) {\n"
"        if ( !$Param{$Needed} ) {\n"
"            $Self->{LogObject}->Log(\n"
"                Priority => 'error',\n"
"                Message  => \"Need $Needed!\",\n"
"            );\n"
"            return;\n"
"        }\n"
"    }\n"
"\n"
"    # set report title\n"
"    my $Title = 'Tickets per Queue';\n"
"\n"
"    # table headlines\n"
"    my @HeadData = (\n"
"        'Ticket Number',\n"
"        'Queue',\n"
"        'Type',\n"
"    );\n"
"\n"
"    my @Data;\n"
"    my @TicketIDs = $Self->{TicketObject}->TicketSearch(\n"
"        UserID     => 1,\n"
"        Result     => 'ARRAY',\n"
"        Permission => 'ro',\n"
"        %Param,\n"
"    );\n"
"\n"
"    for my $TicketID ( @TicketIDs ) {\n"
"        my %Ticket = $Self->{TicketObject}->TicketGet(\n"
"            UserID => 1,\n"
"            TicketID => $TicketID,\n"
"        );\n"
"        push @Data, [ $Ticket{TicketNumber}, $Ticket{Queue}, $Ticket{Type} "
"];\n"
"    }\n"
"\n"
"    return ( [$Title], [@HeadData], @Data );\n"
"}\n"
"\n"
"1;\n"
"\n"
"=back\n"
"\n"
"=head1 TERMS AND CONDITIONS\n"
"\n"
"This software is part of the OTRS project (http://otrs.org/).\n"
"\n"
"This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"the enclosed file COPYING for license information (AGPL). If you\n"
"did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"\n"
"=head1 VERSION\n"
"\n"
"$Revision: 1.4 $ $Date: 2012-05-02 07:40:03 $\n"
"\n"
"=cut\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1083
msgid ""
"There is no configuration needed. Right after installation, the module is "
"available to create a statistic for this module."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1095
msgid "Caveats and Warnings for static stats."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1101
msgid "Static stat modules are available since OTRS 1.3."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/stats.xml:1105
msgid "Using old static stats"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1107
msgid ""
"Standard OTRS versions 1.3 and 2.0 already facilitated the generation of "
"stats.  Various stats for OTRS versions 1.3 and 2.0 which have been "
"specially developed to meet customers' requirements can be used in more "
"recent versions too."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1112
msgid ""
"The files must merely be moved from the "
"<filename>Kernel/System/Stats/</filename> path to "
"<filename>Kernel/System/Stats/Static/</filename>. Additionally the package "
"name of the respective script must be amended by \"::Static\"."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/stats.xml:1119
msgid "The following example shows how the first path is amended."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:1122
#, no-wrap
msgid ""
"    package Kernel::System::Stats::AccountedTime;\n"
"                ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/stats.xml:1127
#, no-wrap
msgid ""
"    package Kernel::System::Stats::Static::AccountedTime;\n"
"                ]]"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/virtualfs.xml:6
msgid "Virtual Filesystem"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/virtualfs.xml:8
msgid ""
"The virtual filesystem is a layer to save files in a transparent way. This "
"layer hides the logic how and where to save a file. In the subsequent "
"paragraphs it is described how to write a new backend for the virtual "
"filesystem. Currently two backends exist: DB and FS. The DB backend saves "
"all files in the database and the FS backend saves the files in the "
"\"normal\" filesystem."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/virtualfs.xml:11
msgid "The backend developed in this chapter uses a PDF file as a filesystem."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/virtualfs.xml:16 en/content/hacking-otrs/module-format/virtualfs.xml:24
#, no-wrap
msgid ""
"\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/virtualfs.xml:32
msgid "List of technical and subject-specific use cases."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/virtualfs.xml:38
msgid ""
"A warning for the use of the DB backend. If you save all files in the "
"database, the database can become quite big. This can impact database "
"backups and recovery time."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/virtualfs.xml:44
msgid "List of known releases."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:4
msgid "Ticket Number Generator Modules"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:6
msgid ""
"Ticket number generators are used to create distinct identifiers aka "
"TicketNumber for new tickets.  Any method of creating a string of numbers is "
"possible, you should use common sense about the length of the resulting "
"string (guideline: 5-10).  When creating a ticket number, make sure the "
"result is prefixed by the SysConfig-Variable SystemID in order to enable the "
"detection of ticket numbers on inbound email responses.  A ticket number "
"generator module needs the two functions TicketCreateNumber() and "
"GetTNByString().  The method TicketCreateNumber() is called without "
"parameters and returns the new ticket number.  The method GetTNByString() is "
"called with the param String which contains the string to be parsed for a "
"ticket number and returns the ticket number if found."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:22
msgid "See Kernel/System/Ticket/Number/UserRandom.pm in the package TemplateModule."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:28
msgid ""
"See Kernel/Config/Files/TicketNumberGenerator.xml in the package "
"TemplateModule."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:34
msgid "Ticket numbers should follow a specific scheme."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:36
msgid ""
"You will need to create a new ticket number generator if the default modules "
"don't provide the ticket number scheme you'd like to use."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:44
msgid ""
"You should stick to the code of GetTNByString() as used in existing ticket "
"number generators to prevent problems with ticket number parsing.  Also the "
"routine to detect a loop in TicketCreateNumber() should be kept intact to "
"prevent duplicate ticket numbers."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketnumber-generator.xml:53
msgid "Ticket number generators have been available in OTRS since OTRS 1.1."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/dashboard.xml:6
msgid "Dashboard Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/dashboard.xml:8
msgid "Dashboard module to display statistics in the form of a line graph."
msgstr ""

#. type: Content of: <section><para><screenshot>
#: en/content/hacking-otrs/module-format/dashboard.xml:12
msgid ""
"<graphic srccredit=\"\" scale=\"100\" "
"fileref=\"screenshots/dashboard.png\"></graphic>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/dashboard.xml:11 en/content/hacking-otrs/object-basics.xml:495
msgid "<placeholder type=\"screenshot\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/dashboard.xml:16
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/DashboardTicketStatsGeneric.pm - message of the day\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Output::HTML::DashboardTicketStatsGeneric;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {%Param};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # get needed objects\n"
"    for (\n"
"        qw(Config Name ConfigObject LogObject DBObject LayoutObject "
"ParamObject TicketObject UserID)\n"
"        )\n"
"    {\n"
"        die \"Got no $_!\" if !$Self->{$_};\n"
"    }\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Preferences {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    return;\n"
"}\n"
"\n"
"sub Config {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my $Key = $Self->{LayoutObject}->{UserLanguage} . '-' . $Self->{Name};\n"
"    return (\n"
"        %{ $Self->{Config} },\n"
"        CacheKey => 'TicketStats' . '-' . $Self->{UserID} . '-' . $Key,\n"
"    );\n"
"\n"
"}\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    my %Axis = (\n"
"        '7Day' => {\n"
"            0 => { Day => 'Sun', Created => 0, Closed => 0, },\n"
"            1 => { Day => 'Mon', Created => 0, Closed => 0, },\n"
"            2 => { Day => 'Tue', Created => 0, Closed => 0, },\n"
"            3 => { Day => 'Wed', Created => 0, Closed => 0, },\n"
"            4 => { Day => 'Thu', Created => 0, Closed => 0, },\n"
"            5 => { Day => 'Fri', Created => 0, Closed => 0, },\n"
"            6 => { Day => 'Sat', Created => 0, Closed => 0, },\n"
"        },\n"
"    );\n"
"\n"
"    my @Data;\n"
"    my $Max = 1;\n"
"    for my $Key ( 0 .. 6 ) {\n"
"\n"
"        my $TimeNow = $Self->{TimeObject}->SystemTime();\n"
"        if ($Key) {\n"
"            $TimeNow = $TimeNow - ( 60 * 60 * 24 * $Key );\n"
"        }\n"
"        my ( $Sec, $Min, $Hour, $Day, $Month, $Year, $WeekDay )\n"
"            = $Self->{TimeObject}->SystemTime2Date(\n"
"            SystemTime => $TimeNow,\n"
"            );\n"
"\n"
"        $Data[$Key]->{Day} = $Self->{LayoutObject}->{LanguageObject}->Get(\n"
"            $Axis{'7Day'}->{$WeekDay}->{Day}\n"
"        );\n"
"\n"
"        my $CountCreated = $Self->{TicketObject}->TicketSearch(\n"
"\n"
"            # cache search result 20 min\n"
"            CacheTTL => 60 * 20,\n"
"\n"
"            # tickets with create time after ... (ticket newer than this "
"date) (optional)\n"
"            TicketCreateTimeNewerDate => \"$Year-$Month-$Day 00:00:00\",\n"
"\n"
"            # tickets with created time before ... (ticket older than this "
"date) (optional)\n"
"            TicketCreateTimeOlderDate => \"$Year-$Month-$Day 23:59:59\",\n"
"\n"
"            CustomerID => $Param{Data}->{UserCustomerID},\n"
"            Result     => 'COUNT',\n"
"\n"
"            # search with user permissions\n"
"            Permission => $Self->{Config}->{Permission} || 'ro',\n"
"            UserID => $Self->{UserID},\n"
"        );\n"
"        $Data[$Key]->{Created} = $CountCreated;\n"
"        if ( $CountCreated > $Max ) {\n"
"            $Max = $CountCreated;\n"
"        }\n"
"\n"
"        my $CountClosed = $Self->{TicketObject}->TicketSearch(\n"
"\n"
"            # cache search result 20 min\n"
"            CacheTTL => 60 * 20,\n"
"\n"
"            # tickets with create time after ... (ticket newer than this "
"date) (optional)\n"
"            TicketCloseTimeNewerDate => \"$Year-$Month-$Day 00:00:00\",\n"
"\n"
"            # tickets with created time before ... (ticket older than this "
"date) (optional)\n"
"            TicketCloseTimeOlderDate => \"$Year-$Month-$Day 23:59:59\",\n"
"\n"
"            CustomerID => $Param{Data}->{UserCustomerID},\n"
"            Result     => 'COUNT',\n"
"\n"
"            # search with user permissions\n"
"            Permission => $Self->{Config}->{Permission} || 'ro',\n"
"            UserID => $Self->{UserID},\n"
"        );\n"
"        $Data[$Key]->{Closed} = $CountClosed;\n"
"        if ( $CountClosed > $Max ) {\n"
"            $Max = $CountClosed;\n"
"        }\n"
"    }\n"
"\n"
"    @Data = reverse @Data;\n"
"    my $Source = $Self->{LayoutObject}->JSON(\n"
"        Data => \\@Data,\n"
"    );\n"
"\n"
"    my $Content = $Self->{LayoutObject}->Output(\n"
"        TemplateFile => 'AgentDashboardTicketStats',\n"
"        Data         => {\n"
"            %{ $Self->{Config} },\n"
"            Key    => int rand 99999,\n"
"            Max    => $Max,\n"
"            Source => $Source,\n"
"        },\n"
"    );\n"
"\n"
"    return $Content;\n"
"}\n"
"\n"
"1;\n"
"        ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/dashboard.xml:174
#, no-wrap
msgid ""
"<ConfigItem Name=\"DashboardBackend###0250-TicketStats\" Required=\"0\" "
"Valid=\"1\">\n"
"    <Description Lang=\"en\">Parameters for the dashboard backend. \"Group\" "
"are used to restriced access to the plugin (e. g. Group: "
"admin;group1;group2;). \"Default\" means if the plugin is enabled per "
"default or if the user needs to enable it manually. \"CacheTTL\" means the "
"cache time in minutes for the plugin.</Description>\n"
"    <Description Lang=\"de\">Parameter f�r das Dashboard Backend. \"Group\" "
"ist verwendet um den Zugriff auf das Plugin einzuschr�nken (z. B. Group: "
"admin;group1;group2;). \"\"Default\" bedeutet ob das Plugin per default "
"aktiviert ist oder ob dies der Anwender manuell machen muss. \"CacheTTL\" "
"ist die Cache-Zeit in Minuten nach der das Plugin erneut aufgerufen "
"wird.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Agent::Dashboard</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item "
"Key=\"Module\">Kernel::Output::HTML::DashboardTicketStatsGeneric</Item>\n"
"            <Item Key=\"Title\">7 Day Stats</Item>\n"
"            <Item Key=\"Created\">1</Item>\n"
"            <Item Key=\"Closed\">1</Item>\n"
"            <Item Key=\"Permission\">rw</Item>\n"
"            <Item Key=\"Block\">ContentSmall</Item>\n"
"            <Item Key=\"Group\"></Item>\n"
"            <Item Key=\"Default\">1</Item>\n"
"            <Item Key=\"CacheTTL\">45</Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/dashboard.xml:172
msgid ""
"To use this module add the following to the "
"<filename>Kernel/Config.pm</filename> and restart your webserver (if you use "
"mod_perl).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/dashboard.xml:199
msgid ""
"An excessive number of days or individual lines may lead to performance "
"degradation."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/dashboard.xml:205
msgid "from 2.4.0"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/notify.xml:7
msgid "Notification Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/notify.xml:9
msgid ""
"Notification modules are used to display a notification below the main "
"navigation. You can write and register your own notification module.  There "
"are currently 5 ticket menues in the OTRS framework."
msgstr ""

#. type: Content of: <section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/notify.xml:17
msgid "AgentOnline"
msgstr ""

#. type: Content of: <section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/notify.xml:20
msgid "AgentTicketEscalation"
msgstr ""

#. type: Content of: <section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/notify.xml:23
msgid "CharsetCheck"
msgstr ""

#. type: Content of: <section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/notify.xml:26
msgid "CustomerOnline"
msgstr ""

#. type: Content of: <section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/module-format/notify.xml:29
msgid "UIDCheck"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/notify.xml:36
msgid ""
"The notification modules are located under "
"Kernel/Output/HTML/TicketNotification*.pm.  There is an example of a notify "
"module below.  Save it under "
"Kernel/Output/HTML/TicketNotificationCustom.pm.  You just need 2 functions: "
"new() and Run()."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/notify.xml:43
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/NotificationCustom.pm\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Output::HTML::NotificationCustom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Kernel::System::Custom;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # get needed objects\n"
"    for my $Object (qw(ConfigObject LogObject DBObject LayoutObject "
"TimeObject UserID)) {\n"
"        $Self->{$Object} = $Param{$Object} || die \"Got no $Object!\";\n"
"    }\n"
"    $Self->{CustomObject} = Kernel::System::Custom->new(%Param);\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # get session info\n"
"    my %CustomParam      = ();\n"
"    my @Customs    = $Self->{CustomObject}->GetAllCustomIDs();\n"
"    my $IdleMinutes = $Param{Config}->{IdleMinutes} || 60 * 2;\n"
"    for (@Customs) {\n"
"        my %Data = $Self->{CustomObject}->GetCustomIDData( CustomID => $_, "
");\n"
"        if (\n"
"            $Self->{UserID} ne $Data{UserID}\n"
"            && $Data{UserType} eq 'User'\n"
"            && $Data{UserLastRequest}\n"
"            && $Data{UserLastRequest} + ( $IdleMinutes * 60 ) > "
"$Self->{TimeObject}->SystemTime()\n"
"            && $Data{UserFirstname}\n"
"            && $Data{UserLastname}\n"
"            )\n"
"        {\n"
"            $CustomParam{ $Data{UserID} } = \"$Data{UserFirstname} "
"$Data{UserLastname}\";\n"
"            if ( $Param{Config}->{ShowEmail} ) {\n"
"                $CustomParam{ $Data{UserID} } .= \" ($Data{UserEmail})\";\n"
"            }\n"
"        }\n"
"    }\n"
"    for ( sort { $CustomParam{$a} cmp $CustomParam{$b} } keys %CustomParam ) "
"{\n"
"        if ( $Param{Message} ) {\n"
"            $Param{Message} .= ', ';\n"
"        }\n"
"        $Param{Message} .= \"$CustomParam{$_}\";\n"
"    }\n"
"    if ( $Param{Message} ) {\n"
"        return $Self->{LayoutObject}->Notify( Info => 'Custom Message: %s\", "
"\"' . $Param{Message} );\n"
"    }\n"
"    else {\n"
"        return '';\n"
"    }\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/notify.xml:126
msgid ""
"There is the need to activate your custom notification module.  This can be "
"done using the xml configuration below. There may be additional parameters "
"in the config hash for your notification module."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/notify.xml:132
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::NotifyModule###3-Custom\" Required=\"0\" "
"Valid=\"0\">\n"
"    <Description Lang=\"en\">Module to show custom message in the agent "
"interface.</Description>\n"
"    <Description Lang=\"de\">Mit diesem Modul können eigene Meldungenen "
"innerhalb des Agent-Interfaces angezeigt werden.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::Agent::ModuleNotify</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item "
"Key=\"Module\">Kernel::Output::HTML::NotificationCustom</Item>\n"
"            <Item Key=\"Key1\">1</Item>\n"
"            <Item Key=\"Key2\">2</Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/notify.xml:152 en/content/hacking-otrs/module-format/ticket-menu.xml:164
msgid ""
"Useful ticket menu implementation could be a link to a external tool if "
"parameters (e.g. FreeTextField) have been set."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:169
msgid "NotificationAgentOnline"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:170 en/content/hacking-otrs/module-format/notify.xml:174 en/content/hacking-otrs/module-format/notify.xml:182 en/content/hacking-otrs/module-format/ticket-menu.xml:190 en/content/hacking-otrs/module-format/ticket-menu.xml:194
msgid "2.0"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:173
msgid "NotificationAgentTicketEscalation"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:177
msgid "NotificationCharsetCheck"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:181
msgid "NotificationCustomerOnline"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/notify.xml:185
msgid "NotificationUIDCheck"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:9
msgid ""
"Ticket menu modules are used to display an addtional link in the menu above "
"a ticket. You can write and register your own ticket menu module.  There are "
"4 ticket menues (Generic, Lock, Responsible and TicketWatcher) which come "
"with the OTRS framework. For more information please have a look at the OTRS "
"admin manual."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:19
msgid ""
"The ticket menu modules are located under "
"Kernel/Output/HTML/TicketMenu*.pm.  There is an example of a ticket-menu "
"module below.  Save it under Kernel/Output/HTML/TicketMenuCustom.pm.  You "
"just need 2 functions: new() and Run()."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/ticket-menu.xml:26
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/TicketMenuCustom.pm\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# Id: TicketMenuCustom.pm,v 1.17 2010/04/12 21:34:06 martin Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Output::HTML::TicketMenuCustom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw($VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless( $Self, $Type );\n"
"\n"
"    # get needed objects\n"
"    for my $Object (qw(ConfigObject LogObject DBObject LayoutObject UserID "
"TicketObject)) {\n"
"        $Self->{$Object} = $Param{$Object} || die \"Got no $Object!\";\n"
"    }\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    # check needed stuff\n"
"    if ( !$Param{Ticket} ) {\n"
"        $Self->{LogObject}->Log(\n"
"            Priority => 'error',\n"
"            Message  => 'Need Ticket!'\n"
"        );\n"
"        return;\n"
"    }\n"
"\n"
"    # check if frontend module registered, if not, do not show action\n"
"    if ( $Param{Config}->{Action} ) {\n"
"        my $Module = $Self->{ConfigObject}->Get('Frontend::Module')->{ "
"$Param{Config}->{Action} };\n"
"        return if !$Module;\n"
"    }\n"
"\n"
"    # check permission\n"
"    my $AccessOk = $Self->{TicketObject}->Permission(\n"
"        Type     => 'rw',\n"
"        TicketID => $Param{Ticket}->{TicketID},\n"
"        UserID   => $Self->{UserID},\n"
"        LogNo    => 1,\n"
"    );\n"
"    return if !$AccessOk;\n"
"\n"
"    # check permission\n"
"    if ( $Self->{TicketObject}->CustomIsTicketCustom( TicketID => "
"$Param{Ticket}->{TicketID} ) ) {\n"
"        my $AccessOk = $Self->{TicketObject}->OwnerCheck(\n"
"            TicketID => $Param{Ticket}->{TicketID},\n"
"            OwnerID  => $Self->{UserID},\n"
"        );\n"
"        return if !$AccessOk;\n"
"    }\n"
"\n"
"    # check acl\n"
"    return\n"
"        if defined $Param{ACL}->{ $Param{Config}->{Action} }\n"
"            && !$Param{ACL}->{ $Param{Config}->{Action} };\n"
"\n"
"    # if ticket is customized\n"
"    if ( $Param{Ticket}->{Custom} eq 'lock' ) {\n"
"\n"
"        # if it is locked for somebody else\n"
"        return if $Param{Ticket}->{OwnerID} ne $Self->{UserID};\n"
"\n"
"        # show custom action\n"
"        return {\n"
"            %{ $Param{Config} },\n"
"            %{ $Param{Ticket} },\n"
"            %Param,\n"
"            Name        => 'Custom',\n"
"            Description => 'Custom to give it back to the queue!',\n"
"            Link        => "
"'Action=AgentTicketCustom;Subaction=Custom;TicketID=$QData{\"TicketID\"}',\n"
"        };\n"
"    }\n"
"\n"
"    # if ticket is customized\n"
"    return {\n"
"        %{ $Param{Config} },\n"
"        %{ $Param{Ticket} },\n"
"        %Param,\n"
"        Name        => 'Custom',\n"
"        Description => 'Custom it to work on it!',\n"
"        Link        => "
"'Action=AgentTicketCustom;Subaction=Custom;TicketID=$QData{\"TicketID\"}',\n"
"    };\n"
"}\n"
"\n"
"1;\n"
"\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:138
msgid ""
"There is the need to activate your custom ticket menu module.  This can be "
"done using the xml configuration below. There may be additional parameters "
"in the config hash for your ticket menu module."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/module-format/ticket-menu.xml:144
#, no-wrap
msgid ""
"<ConfigItem Name=\"Ticket::Frontend::MenuModule###110-Custom\" "
"Required=\"0\" Valid=\"1\">\n"
"    <Description Lang=\"en\">Module to show custom link in "
"menu.</Description>\n"
"    <Description Lang=\"de\">Mit diesem Modul wird der Custom-Link in der "
"Linkleiste der Ticketansicht angezeigt.</Description>\n"
"    <Group>Ticket</Group>\n"
"    <SubGroup>Frontend::Agent::Ticket::MenuModule</SubGroup>\n"
"    <Setting>\n"
"        <Hash>\n"
"            <Item "
"Key=\"Module\">Kernel::Output::HTML::TicketMenuCustom</Item>\n"
"            <Item Key=\"Name\">Custom</Item>\n"
"            <Item Key=\"Action\">AgentTicketCustom</Item>\n"
"        </Hash>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:171
msgid ""
"The ticket menu directs to an URL that can be handled.  If you want to "
"handle that request via the OTRS framework, you have to write your own "
"frontend module."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:189
msgid "TicketMenuGeneric"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:193
msgid "TicketMenuLock"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:197
msgid "TicketMenuResponsible"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:198
msgid "2.1"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/module-format/ticket-menu.xml:201
msgid "TicketMenuTicketWatcher"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/module-format/ticketevent.xml:4
msgid "Ticket Event Module"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:6
msgid ""
"Ticket event modules are running right after a ticket action takes place.  "
"Per convention these modules are located in the directory "
"\"Kernel/System/Ticket/Event\".  An ticket event module needs only the two "
"functions new() and Run().  The method Run() receives at least the "
"parameters Event, UserID, and TicketID.  For the events TicketFreeTextUpdate "
"and TicketFreeTimeUpdate, the parameter Counter is also passed to the Run() "
"method, in order to identify which free field was updated.  The article "
"related handler functions also receives the ArticleID as parameter."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:17
msgid ""
"See Kernel/System/Ticket/Event/EventModulePostTemplate.pm in the package "
"TemplateModule."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:23
msgid ""
"See Kernel/Config/Files/EventModulePostTemplate.xml in the package "
"TemplateModule."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/ticketevent.xml:29
msgid "A ticket should be unlocked after a move action."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:31
msgid ""
"This standard feature has been implemented with the ticket event module "
"Kernel::System::Ticket::Event::ForceUnlock.  When this feature is not "
"wanted, then it can be turned off by unsetting the SysConfig entry "
"Ticket::EventModulePost###910-ForceUnlockOnMove."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/ticketevent.xml:38
msgid "Perform extra cleanup action when a ticket is deleted."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:40
msgid ""
"A customized OTRS might hold non-standard data in additional database "
"tables.  When a ticket is deleteted then this additional data needs to be "
"deleted.  This functionality can be achieved with a ticket event module "
"listening to 'TicketDelete' events."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/module-format/ticketevent.xml:46
msgid "New tickets should be twittered."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:48
msgid "A ticket event module listening to 'TicketCreate' can send out tweets."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:55
msgid "No caveats are known."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:61
msgid "Ticket events have been available in OTRS since OTRS 2.0."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:64
msgid ""
"Ticket Events for OTRS 2.0: TicketCreate, TicketDelete, TicketTitleUpdate, "
"TicketUnlockTimeoutUpdate, TicketEscalationStartUpdate, MoveTicket, "
"SetCustomerData, TicketFreeTextSet, TicketFreeTimeSet, TicketPendingTimeSet, "
"LockSet, StateSet, OwnerSet, TicketResponsibleUpdate, PrioritySet, "
"HistoryAdd, HistoryDelete, TicketAccountTime, TicketMerge, ArticleCreate, "
"ArticleFreeTextSet, ArticleUpdate, ArticleSend, ArticleBounce, "
"SendAgentNotification, SendCustomerNotification, SendAutoResponse, "
"ArticleFlagSet;"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:77
msgid ""
"Ticket Events for OTRS 2.1 and higher: TicketCreate, TicketDelete, "
"TicketTitleUpdate, TicketUnlockTimeoutUpdate, TicketEscalationStartUpdate, "
"TicketQueueUpdate (MoveTicket), TicketCustomerUpdate (SetCustomerData), "
"TicketFreeTextUpdate (TicketFreeTextSet), TicketFreeTimeUpdate "
"(TicketFreeTimeSet), TicketPendingTimeUpdate (TicketPendingTimeSet), "
"TicketLockUpdate (LockSet), TicketStateUpdate (StateSet), TicketOwnerUpdate "
"(OwnerSet), TicketResponsibleUpdate, TicketPriorityUpdate (PrioritySet), "
"TicketSubscribe, TicketUnsubscribe, HistoryAdd, HistoryDelete, "
"TicketAccountTime, TicketMerge, ArticleCreate, ArticleFreeTextUpdate "
"(ArticleFreeTextSet), ArticleUpdate, ArticleSend, ArticleBounce, "
"ArticleAgentNotification (SendAgentNotification), "
"ArticleCustomerNotification (SendCustomerNotification), ArticleAutoResponse "
"(SendAutoResponse), ArticleFlagSet, ArticleFlagDelete;"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/module-format/ticketevent.xml:93
msgid ""
"Ticket Events for OTRS 2.4: TicketCreate, TicketDelete, TicketTitleUpdate, "
"TicketUnlockTimeoutUpdate, TicketQueueUpdate(MoveTicket), TicketTypeUpdate, "
"TicketServiceUpdate, TicketSLAUpdate, TicketCustomerUpdate "
"(SetCustomerData), TicketFreeTextUpdate, TicketFreeTimeUpdate, "
"TicketPendingTimeUpdate (TicketPendingTimeSet), TicketLockUpdate (LockSet), "
"TicketStateUpdate (StateSet), TicketOwnerUpdate (OwnerSet), "
"TicketResponsibleUpdate, TicketPriorityUpdate (PrioritySet), HistoryAdd, "
"HistoryDelete, TicketAccountTime, TicketMerge, ArticleCreate, "
"ArticleFreeTextUpdate (ArticleFreeTextSet), ArticleUpdate, ArticleSend, "
"ArticleBounce, ArticleAgentNotification (SendAgentNotification), "
"ArticleCustomerNotification (SendCustomerNotification), "
"ArticleAutoResponse(SendAutoResponse), ArticleFlagSet, ArticleFlagDelete;"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/object-basics.xml:6
msgid "Object Basics"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/object-basics.xml:8
msgid ""
"This chapter describes the basics of a new object (e. g. a ticket, faq, "
"calendar, ...)  and how the environment should look like."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:12
msgid "Object Options"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:14
msgid ""
"An object (e.g. a ticket, faq, calendar, ...) should at least have the "
"following options (named after their function) in the application and in the "
"database."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/object-basics.xml:22
msgid "Application"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/object-basics.xml:23
msgid "database naming"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:28
msgid "ObjectID"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:29
msgid "object_id"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:32
msgid "Number"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:33
msgid "number"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:36
msgid "Title"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:37
msgid "title"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:40 en/content/hacking-otrs/object-basics.xml:41 en/content/hacking-otrs/object-basics.xml:52 en/content/hacking-otrs/object-basics.xml:53
msgid "..."
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:44
msgid "StateID"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:45
msgid "state_id"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:48
msgid "WordAndWord"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:49
msgid "word_and_word"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:56
msgid "Created"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:57
msgid "created"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:60
msgid "CreatedBy"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:61
msgid "created_by"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:64
msgid "Changed"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:65
msgid "changed"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:68
msgid "ChangedBy"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:69
msgid "changed_by"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:77
msgid "Search Options"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:79
msgid "A search over free text fields should support:"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/object-basics.xml:84
msgid "a normal search \"thomas\" (always)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/object-basics.xml:87
msgid "an and condition like \"thomas+raith\" (if possible)"
msgstr ""

#. type: Content of: <section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/object-basics.xml:90
msgid "an or condition like \"thomas||raith\" (if possible)"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:96
msgid "Config Naming"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:98
msgid "Config naming should be with a leading prefix, the object name like this:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/object-basics.xml:101
#, no-wrap
msgid ""
"$Self->{\"Object::Option\"} = 1234;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:106
msgid ""
"Config-Hashes should be named with the same name as in the .dtl. For "
"example:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/object-basics.xml:109
#, no-wrap
msgid ""
"$Self->{\"Object::CategoryList\"} -> $Data{\"CategoryList\"}\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:114
msgid "The config order should be global setting followed by detail settings."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:118
msgid "Config File"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:120
msgid ""
"An object should have a unique config file which should be located under "
"$OTRS_HOME/Kernel/Config/Files/*.pm. For example:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/object-basics.xml:124
#, no-wrap
msgid ""
"# module reg and nav bar\n"
"$Self->{'Frontend::Module'}->{'AgentFileManager'} = {\n"
"    Description => 'Web File Manager',\n"
"    NavBarName => 'FileManager',\n"
"    NavBar => [\n"
"    {\n"
"        Description => 'A web file manager',\n"
"        Name => 'File-Manager',\n"
"        Image => 'filemanager.png',\n"
"        Link => 'Action=AgentFileManager',\n"
"        NavBar => 'FileManager',\n"
"        Prio => 5000,\n"
"        AccessKey => 'f',\n"
"    },\n"
"    ],\n"
"};\n"
"\n"
"# browse/download root directory\n"
"$Self->{\"FileManager::Root\"} = '/home/';\n"
"\n"
"# trash directory\n"
"$Self->{\"FileManager::Trash\"} = \"/home/Trash/\";\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:150
msgid "Description of the Config Preferences:"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/object-basics.xml:158
msgid "description"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:164
msgid "module name"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:167
msgid "Group/GroupRo"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:168
msgid "group access authorization"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:172
msgid "name of the link button"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:176
msgid "image for the link button"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:180
msgid "URI"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:184
msgid "module name (correlation)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:188
msgid "prio in the button list"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/object-basics.xml:191 en/content/hacking-otrs/object-basics.xml:211 en/content/hacking-otrs/object-basics.xml:266 en/content/hacking-otrs/object-basics.xml:309
msgid "AccessKey"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:192
msgid "short key (key + ALT) for quick access over the keyboard."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:200
msgid "NavBar Settings"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:202
msgid "A NavBar item should look like the following example:"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><thead><row><entry>
#: en/content/hacking-otrs/object-basics.xml:209 en/content/hacking-otrs/object-basics.xml:264 en/content/hacking-otrs/object-basics.xml:307
msgid "NavBarPoint"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:217
msgid "Overview"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:218
msgid "100"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:219
msgid "o"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:220
msgid "overview.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:223
msgid "New"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:224 en/content/hacking-otrs/object-basics.xml:316
msgid "200"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:225
msgid "n"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:226
msgid "new.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:229
msgid "Search"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:230
msgid "300"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:231
msgid "s"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:232
msgid "search.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:235
msgid "Delete"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:236
msgid "400"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:237 en/content/hacking-otrs/object-basics.xml:329
msgid "d"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:238
msgid "delete.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:241
msgid "Import"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:242
msgid "500"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:243 en/content/hacking-otrs/object-basics.xml:249 en/content/hacking-otrs/object-basics.xml:371 en/content/hacking-otrs/object-basics.xml:377 en/content/hacking-otrs/object-basics.xml:383 en/content/hacking-otrs/object-basics.xml:389 en/content/hacking-otrs/object-basics.xml:395 en/content/hacking-otrs/object-basics.xml:401 en/content/hacking-otrs/object-basics.xml:407 en/content/hacking-otrs/object-basics.xml:413 en/content/hacking-otrs/object-basics.xml:419 en/content/hacking-otrs/object-basics.xml:449 en/content/hacking-otrs/object-basics.xml:454 en/content/hacking-otrs/object-basics.xml:460 en/content/hacking-otrs/object-basics.xml:465
msgid "-"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:244
msgid "import.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:247
msgid "Setting"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:248
msgid "900"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:250
msgid "module_setting.png"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:257
msgid "Menu functions - generic, used by any application module"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:272
msgid "Logout"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:273
msgid "10"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:274
msgid "l"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:275
msgid "logout.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:278
msgid "Preferences"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:279
msgid "0"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:280
msgid "p"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:281
msgid "preferences.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:284
msgid "New Messages"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:285
msgid "999989"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:286
msgid "m"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:287
msgid "new-messages.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:290
msgid "Locked Tickets"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:291
msgid "9999999"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:292
msgid "k"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:293
msgid "personal.png"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:300
msgid "Menu functions - global, always used"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:315
msgid "Ticket"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:317
msgid "t"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:318
msgid "ticket.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:321
msgid "Incident (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:322
msgid "2000"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:323
msgid "i"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:324
msgid "incident.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:327
msgid "Advisory (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:328
msgid "2100"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:330
msgid "advisory.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:333
msgid "ShortAdvisory (SIRIOS-BSI-specific)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:334
msgid "2150"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:335 en/content/hacking-otrs/object-basics.xml:365
msgid "z"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:336
msgid "advisory_short.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:339
msgid "VirusWarning (SIRIOS-BSI-specific)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:340
msgid "2300"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:341
msgid "x"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:342
msgid "viruswarning.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:345
msgid "FreeTextMessage (SIRIOS-BSI-specific)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:346
msgid "2400"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:347
msgid "y"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:348
msgid "freetextmessage.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:351
msgid "Vulnerability (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:352
msgid "2500"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:353
msgid "v"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:354
msgid "vulnerability.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:357
msgid "Artefact (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:358
msgid "2600"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:359
msgid "r"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:360
msgid "artefactdb.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:363
msgid "WebWatcher (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:364
msgid "2700"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:366
msgid "webwatcher.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:369
msgid "IDMEFConsole (SIRIOS-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:370
msgid "2800"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:372
msgid "idmef_console.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:375
msgid "WID-Authoring (WID-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:376
msgid "2900"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:378
msgid "wid_authoring.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:381
msgid "WID-Portal-Admin-User (WID-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:382
msgid "2910"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:384
msgid "wid_portal_admin_user.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:387
msgid "WID-Portal-Admin-Group (WID-Project)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:388
msgid "2920"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:390
msgid "wid_portal_admin_group.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:393
msgid "ITSMService (OTRS::ITSM)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:394
msgid "3100"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:396
msgid "itsm_service.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:399
msgid "ITSMConfigItem (OTRS::ITSM)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:400
msgid "3200"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:402
msgid "itsm_configitem.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:405
msgid "ITSMLocation (OTRS::ITSM)"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:406
msgid "3300"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:408
msgid "itsm_location.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:411
msgid "TimeAccounting"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:412
msgid "6000"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:414
msgid "time_accounting.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:417
msgid "ContentManager"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:418
msgid "7050"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:420
msgid "contentmanager.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:423
msgid "Calendar"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:424
msgid "8000"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:425
msgid "c"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:426
msgid "calendar.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:429
msgid "FileManager"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:430
msgid "8100"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:431
msgid "f"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:432
msgid "filemanager.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:435
msgid "WebMail"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:436
msgid "8200"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:437
msgid "w"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:438
msgid "webmail.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:441
msgid "FAQ"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:442
msgid "8300"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:443
msgid "q"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:444
msgid "help.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:447
msgid "Call"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:448
msgid "8400"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:450
msgid "call.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:452
msgid "Stats"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:453
msgid "8500"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:455
msgid "stats.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:458
msgid "CustomerDB"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:459
msgid "9000"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:461 en/content/hacking-otrs/object-basics.xml:466
msgid "folder_yellow.png"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:463
msgid "CustomerCompanyDB"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:464
msgid "9100"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:469
msgid "Admin"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:470
msgid "10000"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:471
msgid "a"
msgstr ""

#. type: Content of: <section><section><para><informaltable><tgroup><tbody><row><entry>
#: en/content/hacking-otrs/object-basics.xml:472
msgid "admin.png"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:479
msgid "Table 3: Menu Applications -default application modules"
msgstr ""

#. type: Content of: <section><section><para><note>
#: en/content/hacking-otrs/object-basics.xml:482
msgid "<note>"
msgstr ""

#. type: Content of: <section><section><para><note><para>
#: en/content/hacking-otrs/object-basics.xml:484
msgid "AccessKey \"g\" is also reserved for the submission of forms."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:486
msgid "</note>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/object-basics.xml:490
msgid "Screen flow"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/object-basics.xml:492
msgid "An object module should have the following process flow:"
msgstr ""

#. type: Content of: <section><section><para><screenshot>
#: en/content/hacking-otrs/object-basics.xml:496
msgid "<graphic srccredit=\"\" fileref=\"screenshots/screen-flow.png\"></graphic>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:6
msgid "Writing an OTRS module for a new object"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:8
msgid ""
"In this chapter, the writing of a new OTRS module is illustrated on the "
"basis of a simple small programme.  Necessary prerequisite is an OTRS "
"development environment as specified in the chapter of the same name."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:12
msgid "What we want to write"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:14
msgid ""
"We want to write a little OTRS module that displays the text 'Hello World' "
"when called up.  First of all we must build the directory /Hello World for "
"the module in the developer directory.  In this directory, all directories "
"existent in OTRS can be created.  Each module should at least contain the "
"following directories:"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:19
msgid "Kernel/"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:22
msgid "Kernel/Output/HTML/Standard/"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:24
msgid "Kernel/Config/Files/"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:25
msgid "Kernel/Language/"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:28
msgid "Default Config File"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:30
msgid ""
"The creation of a module registration facilitates the display of the new "
"module in OTRS.  Therefore we create a file "
"'/Kernel/Config/Files/HelloWorld.xml'.  In this file, we create a new "
"config element.  The impact of the various settings is described in the "
"chapter 'Config Mechanism'."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/writing-otrs-application.xml:36
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<otrs_config version=\"1.0\" init=\"Application\">\n"
"        <ConfigItem Name=\"Frontend::Module###AgentHelloWorld\" "
"Required=\"1\" Valid=\"1\">\n"
"        <Description Lang=\"en\">FrontendModuleRegistration for HelloWorld "
"modul.</Description>\n"
"        <Description Lang=\"de\">FrontendModulRegistration für das "
"HelloWorld Modul.</Description>\n"
"        <Group>HelloWorld</Group>\n"
"        <SubGroup>AgentFrontendModuleRegistration</SubGroup>\n"
"        <Setting>\n"
"            <FrontendModuleReg>\n"
"                <Title>HelloWorld</Title>\n"
"                <Group>users</Group>\n"
"                <Description>HelloWorld</Description>\n"
"                <NavBarName>HelloWorld</NavBarName>\n"
"                <NavBar>\n"
"                    <Description>HelloWorld</Description>\n"
"                    <Name>HelloWorld</Name>\n"
"                    <Image>overview.png</Image>\n"
"                    <Link>Action=AgentHelloWorld</Link>\n"
"                    <NavBar>HelloWorld</NavBar>\n"
"                    <Type>Menu</Type>\n"
"                    <Prio>8400</Prio>\n"
"                    <Block>ItemArea</Block>\n"
"                </NavBar>\n"
"            </FrontendModuleReg>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"</otrs_config>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:68
msgid "Frontend Module"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:70
msgid ""
"After creating the links and executing the Sysconfig, a new module with the "
"name 'HelloWorld' is displayed.  When calling it up, an error message is "
"displayed as OTRS cannot find the matching frontend module yet.  This is the "
"next thing to be created. To do so, we create the following file:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/writing-otrs-application.xml:75
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Modules/AgentHelloWorld.pm - frontend modul\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Modules::AgentHelloWorld;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use Kernel::System::HelloWorld;\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {%Param};\n"
"    bless ($Self, $Type);\n"
"\n"
"    # check needed objects\n"
"    for (qw(ParamObject DBObject TicketObject LayoutObject LogObject "
"QueueObject ConfigObject EncodeObject MainObject)) {\n"
"        if ( !$Self->{$_} ) {\n"
"            $Self->{LayoutObject}->FatalError( Message => \"Got no $_!\" "
");\n"
"        }\n"
"    }\n"
"\n"
"    # create needed objects\n"
"    $Self->{HelloWorldObject} = Kernel::System::HelloWorld->new(%Param);\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub Run {\n"
"    my ( $Self, %Param ) = @_;\n"
"    my %Data = ();\n"
"\n"
"    $Data{HelloWorldText} = "
"$Self->{HelloWorldObject}->GetHelloWorldText();\n"
"\n"
"    # build output\n"
"    my $Output = $Self->{LayoutObject}->Header(Title => \"HelloWorld\");\n"
"    $Output   .= $Self->{LayoutObject}->NavigationBar();\n"
"    $Output   .= $Self->{LayoutObject}->Output(\n"
"        Data => \\%Data,\n"
"        TemplateFile => 'AgentHelloWorld',\n"
"    );\n"
"    $Output   .= $Self->{LayoutObject}->Footer();\n"
"    return $Output;\n"
"}\n"
"\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:136
msgid "Core Module"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:138
msgid ""
"Next, we create the file for the core module "
"\"/HelloWorld/Kernel/System/HelloWorld.pm\" with the following content:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/writing-otrs-application.xml:141
#, no-wrap
msgid ""
"# --\n"
"# Kernel/System/HelloWorld.pm - core modul\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::System::HelloWorld;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"sub new {\n"
"    my ( $Type, %Param ) = @_;\n"
"\n"
"    # allocate new hash for object\n"
"    my $Self = {};\n"
"    bless ($Self, $Type);\n"
"\n"
"    return $Self;\n"
"}\n"
"\n"
"sub GetHelloWorldText {\n"
"    my ( $Self, %Param ) = @_;\n"
"\n"
"    return 'Hello World';\n"
"}\n"
"\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:179
msgid "dtl Template File"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:181
msgid ""
"The last thing missing before the new module can run is the relevant "
"template.  Thus, we create the following file:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/writing-otrs-application.xml:185
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Output/HTML/Standard/AgentHelloWorld.dtl - overview\n"
"# Copyright (C) (year) (name of author) (email of author)\n"
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"<!-- start form -->\n"
"<table border=\"0\" width=\"100%\" cellspacing=\"0\" cellpadding=\"3\">\n"
"    <tr>\n"
"        <td class=\"mainhead\">\n"
"            $Env{\"Box0\"}$Text{\"Overview\"}: "
"$Text{\"HelloWorld\"}$Env{\"Box1\"}\n"
"        </td>\n"
"    </tr>\n"
"    <tr>\n"
"        <td class=\"mainbody\">\n"
"            <br>\n"
"            $Text{\"$QData{\"HelloWorldText\"}\"}!<br>\n"
"            <br>\n"
"            <br>\n"
"        </td>\n"
"    </tr>\n"
"</table>\n"
"<!-- end form -->\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:216
msgid ""
"The module is working now and displays the text 'Hello World' when called "
"up."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:220
msgid "Language File"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:222
msgid ""
"If the text 'Hello World' is to be translated into German, a language file "
"for this language must be created: "
"'/HelloWorld/Kernel/Language/de_AgentHelloWorld.pm'.  Example:"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/writing-otrs-application.xml:227
#, no-wrap
msgid ""
"package Kernel::Language::de_AgentHelloWorld;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"sub Data {\n"
"    my $Self = shift;\n"
"\n"
"    $Self->{Translation}->{'Hello World'} = 'Hallo Welt';\n"
"\n"
"    return 1;\n"
"}\n"
"1;\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/writing-otrs-application.xml:245
msgid "Summary"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/writing-otrs-application.xml:247
msgid ""
"The example given above shows that it is not too difficult to write a new "
"module for OTRS.  It is important, though, to make sure that the module and "
"file name are unique and thus do not interfere with the framework or other "
"expansion modules.  When a module is finished, an OPM package must be "
"generated from it (see chapter 'Package Building')."
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/package-management.xml:6
msgid "Package Management"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/package-management.xml:8
msgid ""
"The OPM (OTRS Package Manager) is a mechanism to distribute software "
"packages for the OTRS framework via http, ftp or file upload."
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/package-management.xml:12
msgid ""
"For example, the OTRS project offers OTRS modules like a calendar, a file "
"manager or web mail in OTRS packages via online repositories on our ftp "
"servers.  The packages can be managed (install/upgrade/uninstall) via the "
"admin interface."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-management.xml:17
msgid "Package Distribution"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-management.xml:21
#, no-wrap
msgid ""
"[Kernel/Config.pm]\n"
"\n"
"# Package::RepositoryList\n"
"# (repository list)\n"
"$Self->{'Package::RepositoryList'} = {\n"
"    'ftp://ftp.example.com/packages/' => '[Example-Repository]',\n"
"};\n"
"\n"
"[...]\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-management.xml:19
msgid ""
"If you want to create an OPM online repositiory, just tell the OTRS "
"framework where the location is. Then you will have a new select option in "
"the admin interface.  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-management.xml:34
msgid "Package Repository Index"
msgstr ""

#. type: Content of: <section><section><section><para><screen>
#: en/content/hacking-otrs/package-management.xml:39
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a index -d /path/to/repository/ > "
"/path/to/repository/otrs.xml\n"
"shell>\n"
"            "
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-management.xml:36
msgid ""
"In your repository, create an index file for your OPM packages.  OTRS just "
"reads this index file and knows what packages are available.  <placeholder "
"type=\"screen\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-management.xml:46
msgid "Package Commands"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-management.xml:48
msgid ""
"You can use the following OPM commands over the admin interface or over "
"bin/otrs.PackageManager.pl to manage admin jobs for OPM packages."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-management.xml:52
msgid "Install"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-management.xml:54
msgid "Install OPM packages."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/package-management.xml:57 en/content/hacking-otrs/package-management.xml:77 en/content/hacking-otrs/package-management.xml:97 en/content/hacking-otrs/package-management.xml:117
msgid ""
"Web: <ulink "
"url=\"http://localhost/otrs/index.pl?Action=AdminPackageManager\">http://localhost/otrs/index.pl?Action=AdminPackageManager</ulink>"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para><screen>
#: en/content/hacking-otrs/package-management.xml:64
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a install -p /path/to/package.opm\n"
"                    "
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/hacking-otrs/package-management.xml:62 en/content/hacking-otrs/package-management.xml:82 en/content/hacking-otrs/package-management.xml:102 en/content/hacking-otrs/package-management.xml:122
msgid "CMD: <placeholder type=\"screen\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-management.xml:72
msgid "Uninstall"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-management.xml:74
msgid "Uninstall OPM packages."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para><screen>
#: en/content/hacking-otrs/package-management.xml:84
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a uninstall -p /path/to/package.opm\n"
"                    "
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-management.xml:92
msgid "Upgrade"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-management.xml:94
msgid "Upgrade OPM packages."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para><screen>
#: en/content/hacking-otrs/package-management.xml:104
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a upgrade -p /path/to/package.opm\n"
"                    "
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-management.xml:112
msgid "List"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-management.xml:114
msgid "List all OPM packages."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para><screen>
#: en/content/hacking-otrs/package-management.xml:124
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a list\n"
"                    "
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/package-building.xml:6
msgid "Package Building"
msgstr ""

#. type: Content of: <section><para>
#: en/content/hacking-otrs/package-building.xml:8
msgid ""
"If you want to create an OPM package (.opm) you need to create a spec file "
"(.sopm)  which includes the properties of the package."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-building.xml:12
msgid "Package Spec File"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-building.xml:14
msgid ""
"The OPM package is XML based. You can create/edit the .sopm via a text or "
"xml editor. It contains meta data, a file list and database options."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:21
#, no-wrap
msgid ""
"<Name>Calendar</Name>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:20
msgid ""
"The package name (required).  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:27
msgid "Version"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:30
#, no-wrap
msgid ""
"<Version>1.2.3</Version>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:29
msgid ""
"The package version (required).  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:36
msgid "Framework"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:39
#, no-wrap
msgid ""
"<Framework>2.4.x</Framework>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:38
msgid ""
"The required framework version (2.4.x means e.g. 2.4.1 or 2.4.9) "
"(required).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:45
#, no-wrap
msgid ""
"<Framework>2.4.x</Framework>\n"
"<Framework>2.3.x</Framework>\n"
"<Framework>2.2.x</Framework>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:44
msgid ""
"Can also be used several times.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:53
msgid "Vendor"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:56
#, no-wrap
msgid ""
"<Vendor>OTRS AG</Vendor>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:55
msgid ""
"The package vendor (required).  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:62
msgid "URL"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:65
#, no-wrap
msgid ""
"<URL>http://otrs.org/</URL>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:64
msgid "The vendor URL (required).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:71
msgid "License"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:74
#, no-wrap
msgid ""
"<License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November "
"2007</License>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:73
msgid ""
"The license of the package (required).  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:80
msgid "ChangeLog"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:83
#, no-wrap
msgid ""
"<ChangeLog Version=\"1.1.2\" Date=\"2007-02-15 18:45:21\">Added some "
"feature.</ChangeLog>\n"
"<ChangeLog Version=\"1.1.1\" Date=\"2007-02-15 16:17:51\">New "
"package.</ChangeLog>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:82
msgid ""
"The package change log (optional).  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:93
#, no-wrap
msgid ""
"<Description Lang=\"en\">A web calendar.</Description>\n"
"<Description Lang=\"de\">Ein Web Kalender.</Description>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:92
msgid ""
"The package description in different languages (required).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:100
msgid "BuildHost"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:103
#, no-wrap
msgid ""
"<BuildHost>?</BuildHost>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:102 en/content/hacking-otrs/package-building.xml:111
msgid ""
"This will be filled in automatically by OPM (auto).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:109
msgid "BuildDate"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:112
#, no-wrap
msgid ""
"<BuildDate>?</BuildDate>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:118
msgid "PackageRequired"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:122
#, no-wrap
msgid ""
"<PackageRequired Version=\"1.0.3\">SomeOtherPackage</PackageRequired>\n"
"<PackageRequired Version=\"5.3.2\">SomeotherPackage2</PackageRequired>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:120
msgid ""
"Packages that must be installed beforehand (optional).  If PackageRequired "
"is used, a version of the required package must be specified.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:129
msgid "ModuleRequired"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:132
#, no-wrap
msgid ""
"<ModuleRequired Version=\"1.03\">Encode</ModuleRequired>\n"
"<ModuleRequired Version=\"5.32\">MIME::Tools</ModuleRequired>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:131
msgid ""
"Perl modules that must be installed beforehand (optional).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:139
msgid "OS (^M)"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:142
#, no-wrap
msgid ""
"<OS>linux</OS>\n"
"<OS>darwin</OS>\n"
"<OS>mswin32</OS>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:141
msgid "Required OS (optional).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:150
msgid "Filelist"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:153
#, no-wrap
msgid ""
"<Filelist>\n"
"    <File Permission=\"644\" "
"Location=\"Kernel/Config/Files/Calendar.pm\"/>\n"
"    <File Permission=\"644\" Location=\"Kernel/System/CalendarEvent.pm\"/>\n"
"    <File Permission=\"644\" "
"Location=\"Kernel/Modules/AgentCalendar.pm\"/>\n"
"    <File Permission=\"644\" "
"Location=\"Kernel/Language/de_AgentCalendar.pm\"/>\n"
"</Filelist>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:152
msgid ""
"This is a list of files included in the package (optional).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:164
msgid "DatabaseInstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:167
#, no-wrap
msgid ""
"<DatabaseInstall>\n"
"    <TableCreate Name=\"calendar_event\">\n"
"    <Column Name=\"id\" Required=\"true\" PrimaryKey=\"true\" "
"AutoIncrement=\"true\" Type=\"BIGINT\"/>\n"
"    <Column Name=\"title\" Required=\"true\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"    <Column Name=\"content\" Required=\"false\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"    <Column Name=\"start_time\" Required=\"true\" Type=\"DATE\"/>\n"
"    <Column Name=\"end_time\" Required=\"true\" Type=\"DATE\"/>\n"
"    <Column Name=\"owner_id\" Required=\"true\" Type=\"INTEGER\"/>\n"
"    <Column Name=\"event_status\" Required=\"true\" Size=\"50\" "
"Type=\"VARCHAR\"/>\n"
"    </TableCreate>\n"
"</DatabaseInstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:166
msgid ""
"Database entries that have to be created when a package is installed "
"(optional).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:182
msgid ""
"You also can choose &lt;DatabaseInstall Type=\"post\"&gt; or "
"&lt;DatabaseInstall Type=\"pre\"&gt; to define the time of execution "
"separately (post is default).  For more info see chapter \"Package Life "
"Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:187
msgid "DatabaseUpgrade"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:191
#, no-wrap
msgid ""
"<DatabaseUpgrade>\n"
"    <TableCreate Name=\"calendar_event_involved\" Version=\"1.3.4\">\n"
"        <Column Name=\"event_id\" Required=\"true\" Type=\"BIGINT\"/>\n"
"        <Column Name=\"user_id\" Required=\"true\" Type=\"INTEGER\"/>\n"
"    </TableCreate>\n"
"</DatabaseUpgrade>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:189
msgid ""
"Information on which actions have to be performed in case of an upgrade "
"(subject to version tag), (optional).  Example (if already installed package "
"version is below 1.3.4 (e. g. 1.2.6), defined action will be performed): "
"<placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:201
msgid ""
"You also can choose &lt;DatabaseUpgrade Type=\"post\"&gt; or "
"&lt;DatabaseUpgrade Type=\"pre\"&gt; to define the time of execution "
"separately (post is default).  For more info see chapter \"Package Life "
"Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:206
msgid "DatabaseReinstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:209
#, no-wrap
msgid ""
"<DatabaseReinstall></DatabaseReinstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:208
msgid ""
"Information on what actions have to be performed if the package is "
"reinstalled, (optional).  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:214
msgid ""
"You also can choose &lt;DatabaseReinstall Type=\"post\"&gt; or "
"&lt;DatabaseReinstall Type=\"pre\"&gt; to define the time of execution "
"separately (post is default).  For more info see chapter \"Package Life "
"Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:219
msgid "DatabaseUninstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:222
#, no-wrap
msgid ""
"<DatabaseUninstall>\n"
"    <TableDrop Name=\"calendar_event\" />\n"
"</DatabaseUninstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:221
msgid ""
"Uninstall (if a package gets uninstalled), (optional).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:229
msgid ""
"You also can choose &lt;DatabaseUninstall Type=\"post\"&gt; or "
"&lt;DatabaseUninstall Type=\"pre\"&gt; to define the time of execution "
"separately (post is default).  For more info see chapter \"Package Life "
"Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:234
msgid "IntroInstall"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:236
msgid "To show a \"pre\" or \"post\" install introdution in installation dialog."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:239
#, no-wrap
msgid ""
"<IntroInstall Type=\"post\" Lang=\"en\" Title=\"Some Title\">\n"
"Some Info formated in dtl/html....\n"
"</IntroInstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:246 en/content/hacking-otrs/package-building.xml:262 en/content/hacking-otrs/package-building.xml:278 en/content/hacking-otrs/package-building.xml:294
msgid ""
"You can also use the \"Format\" attribute to define if you want to use "
"\"html\" (which is default) or \"plain\" to use automatically a "
"\"&lt;pre&gt;&lt;/pre&gt;\" tag wenn intro is shown (to use the new lines "
"and spaces of the content)."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:250
msgid "IntroUninstall"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:252
msgid ""
"To show a \"pre\" or \"post\" uninstall introdution in uninstallation "
"dialog."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:255
#, no-wrap
msgid ""
"<IntroUninstall Type=\"post\" Lang=\"en\" Title=\"Some Title\">\n"
"Some Info formated in dtl/html....\n"
"</IntroUninstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:266
msgid "IntroReinstall"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:268
msgid ""
"To show a \"pre\" or \"post\" reinstall introdution in reinstallation "
"dialog."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:271
#, no-wrap
msgid ""
"<IntroReinstall Type=\"post\" Lang=\"en\" Title=\"Some Title\">\n"
"Some Info formated in dtl/html....\n"
"</IntroReinstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:282
msgid "IntroUpgrade"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:284
msgid "To show a \"pre\" or \"post\" upgrade introdution in upgrading dialog."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:287
#, no-wrap
msgid ""
"<IntroUpgrade Type=\"post\" Lang=\"en\" Title=\"Some Title\">\n"
"Some Info formated in dtl/html....\n"
"</IntroUpgrade>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:298
msgid "CodeInstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:301
#, no-wrap
msgid ""
"<CodeInstall>\n"
"    # example\n"
"    if (1) {\n"
"        print STDERR \"Some info to STDERR\\n\";\n"
"    }\n"
"    # log example\n"
"    $Self->{LogObject}->Log(\n"
"        Priority => 'notice',\n"
"        Message => \"Some Message!\",\n"
"    )\n"
"    # database example\n"
"    $Self->{DBObject}->Do(SQL => \"SOME SQL\");\n"
"</CodeInstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:300
msgid ""
"To execute perl code if the package is installed (optional).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:318
msgid ""
"You also can choose &lt;CodeInstall Type=\"post\"&gt; or &lt;CodeInstall "
"Type=\"pre\"&gt; to define the time of execution separately (post is "
"default).  For more info see chapter \"Package Life Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:323
msgid "CodeUninstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:327
#, no-wrap
msgid ""
"<CodeUninstall>\n"
"    # example\n"
"    if (1) {\n"
"        print STDERR \"Some info to STDERR\\n\";\n"
"    }\n"
"</CodeUninstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:325
msgid ""
"To execute perl code if the package is uninstalled (optional).  On \"pre\" "
"or \"post\" time of package uninstallation.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:337
msgid ""
"You also can choose &lt;CodeUninstall Type=\"post\"&gt; or &lt;CodeUninstall "
"Type=\"pre\"&gt; to define the time of execution separately (post is "
"default).  For more info see chapter \"Package Life Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:342
msgid "CodeReinstall"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:345
#, no-wrap
msgid ""
"<CodeReinstall>\n"
"    # example\n"
"    if (1) {\n"
"        print STDERR \"Some info to STDERR\\n\";\n"
"    }\n"
"</CodeReinstall>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:344
msgid ""
"To execute perl code if the package is reinstalled (optional).  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:355
msgid ""
"You also can choose &lt;CodeReinstall Type=\"post\"&gt; or &lt;CodeReinstall "
"Type=\"pre\"&gt; to define the time of execution separately (post is "
"default).  For more info see chapter \"Package Life Cycle\"."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/hacking-otrs/package-building.xml:360
msgid "CodeUpgrade"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:364
#, no-wrap
msgid ""
"<CodeUpgrade Version=\"1.3.4\">\n"
"    # example\n"
"    if (1) {\n"
"        print STDERR \"Some info to STDERR\\n\";\n"
"    }\n"
"</CodeUpgrade>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:362
msgid ""
"To execute perl code if the package is upgraded (subject to version tag), "
"(optional).  Example (if already installed package version is below 1.3.4 "
"(e. g. 1.2.6), defined action will be performed): <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/hacking-otrs/package-building.xml:374
msgid ""
"You also can choose &lt;CodeUpgrade Type=\"post\"&gt; or &lt;CodeUpgrade "
"Type=\"pre\"gt; to define the time of execution separately (post is "
"default)."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-building.xml:379
msgid "Example .sopm"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/package-building.xml:382
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
"<otrs_package version=\"1.0\">\n"
"    <Name>Calendar</Name>\n"
"    <Version>0.0.1</Version>\n"
"    <Framework>2.4.x</Framework>\n"
"    <Vendor>OTRS AG</Vendor>\n"
"    <URL>http://otrs.org/</URL>\n"
"    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>\n"
"    <ChangeLog Version=\"1.1.2\" Date=\"2007-02-15 18:45:21\">Added some "
"feature.</ChangeLog>\n"
"    <ChangeLog Version=\"1.1.1\" Date=\"2007-02-15 16:17:51\">New "
"package.</ChangeLog>\n"
"    <Description Lang=\"en\">A web calendar.</Description>\n"
"    <Description Lang=\"de\">Ein Web Kalender.</Description>\n"
"    <IntroInstall Type=\"post\" Lang=\"en\" Title=\"Thank you!\">Thank you "
"for choosing the Calendar module.</IntroInstall>\n"
"    <IntroInstall Type=\"post\" Lang=\"de\" Title=\"Vielen Dank!\">Vielen "
"Dank fuer die Auswahl des Kalender Modules.</IntroInstall>\n"
"    <BuildDate>?</BuildDate>\n"
"    <BuildHost>?</BuildHost>\n"
"    <Filelist>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/Config/Files/Calendar.pm\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/System/CalendarEvent.pm\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/Modules/AgentCalendar.pm\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/Language/de_AgentCalendar.pm\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/Output/HTML/Standard/AgentCalendar.dtl\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"Kernel/Output/HTML/NotificationCalendar.pm\"></File>\n"
"        <File Permission=\"644\" "
"Location=\"var/httpd/htdocs/images/Standard/calendar.png\"></File>\n"
"    </Filelist>\n"
"    <DatabaseInstall>\n"
"        <TableCreate Name=\"calendar_event\">\n"
"            <Column Name=\"id\" Required=\"true\" PrimaryKey=\"true\" "
"AutoIncrement=\"true\" Type=\"BIGINT\"/>\n"
"            <Column Name=\"title\" Required=\"true\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"            <Column Name=\"content\" Required=\"false\" Size=\"250\" "
"Type=\"VARCHAR\"/>\n"
"            <Column Name=\"start_time\" Required=\"true\" Type=\"DATE\"/>\n"
"            <Column Name=\"end_time\" Required=\"true\" Type=\"DATE\"/>\n"
"            <Column Name=\"owner_id\" Required=\"true\" Type=\"INTEGER\"/>\n"
"            <Column Name=\"event_status\" Required=\"true\" Size=\"50\" "
"Type=\"VARCHAR\"/>\n"
"        </TableCreate>\n"
"    </DatabaseInstall>\n"
"    <DatabaseUninstall>\n"
"        <TableDrop Name=\"calendar_event\"/>\n"
"    </DatabaseUninstall>\n"
"</otrs_package>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-building.xml:381
msgid ""
"This is a whole example spec file.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-building.xml:427
msgid "Package Build"
msgstr ""

#. type: Content of: <section><section><para><screen>
#: en/content/hacking-otrs/package-building.xml:431
#, no-wrap
msgid ""
"shell> bin/otrs.PackageManager.pl -a build -p /path/to/example.sopm\n"
"writing /tmp/example-0.0.1.opm\n"
"shell>\n"
"        "
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-building.xml:429
msgid ""
"To build an .opm package from the spec opm.  <placeholder type=\"screen\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/package-building.xml:438
msgid "Package Life Cycle - Install/Upgrade/Uninstall"
msgstr ""

#. type: Content of: <section><section><para><screenshot>
#: en/content/hacking-otrs/package-building.xml:442
msgid ""
"<graphic srccredit=\"\" scale=\"60\" "
"fileref=\"screenshots/package-life-cycle.png\"></graphic>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/package-building.xml:440
msgid ""
"The following image shows you how the life cycle of a package "
"instalation/upgrade/uninstallation works in the backend step by step.  "
"<placeholder type=\"screenshot\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:6
msgid "Upgrading OTRS Extensions from 2.4 to 3.0"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:10
msgid "Translation of configuration file descriptions."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:14
msgid ""
"Previously, OTRS had translations for items in the sysconfig in multiple "
"language in the XML files.  Starting OTRS 3.0.x, the translations are "
"removed from the configuration file. The configuration file only stores the "
"English descriptions. If needed, you can localize the descriptions in your "
"translation file in the way 'regular' strings in the web interface are "
"translated. This has the added benefit that if a translator wants to "
"localize a module's configuration, this can be fully done from the "
"translation file. The <filename>otrs.CreateTranslationFile.pl</filename> "
"script has been adjusted to also grab strings from the SysConfig."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:27
#, no-wrap
msgid ""
"    <ConfigItem Name=\"ProductName\" Required=\"1\" Valid=\"1\">\n"
"        <Description Lang=\"en\">This setting controls the name of the "
"application as is shown in the web interface as well as the tabs and title "
"bar of your web browser.</Description>\n"
"        <Description Lang=\"de\">Im WebFrontend angezeigter Name der "
"Software.</Description>\n"
"        <Group>Framework</Group>\n"
"        <SubGroup>Core</SubGroup>\n"
"        <Setting>\n"
"            <String Regex=\"\">OTRS</String>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:23
msgid ""
"Additionaly, if you have tags that are configured in SysConfig but displayed "
"in the GUI, you can indicate with the option "
"<emphasis>Translatable=&quot;1&quot;</emphasis> that this is a field that "
"should be added to the translation file.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:42
#, no-wrap
msgid ""
"    <ConfigItem Name=\"ProductName\" Required=\"1\" Valid=\"1\" "
"ConfigLevel=\"200\">\n"
"        <Description Translatable=\"1\">Defines the name of the application, "
"shown in the web interface, tabs and title bar of the web "
"browser.</Description>\n"
"        <Group>Framework</Group>\n"
"        <SubGroup>Core</SubGroup>\n"
"        <Setting>\n"
"            <String Regex=\"\">OTRS</String>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:40 en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:90 en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:157
msgid "New Style: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:54 en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:116
msgid ""
"Please note that the <literal>Block</literal> names changed (Agent, "
"Customer, Email, Queue, Ticket and System are available).  An additional "
"<literal>Description</literal> tag has been added."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:60
msgid "Configuration of NavBarModule was Changed"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:66
#, no-wrap
msgid ""
"<ConfigItem Name=\"Frontend::Module###AdminUser\" Required=\"0\" "
"Valid=\"1\">\n"
"    <Description Lang=\"en\">Frontend module registration for the AdminUser "
"object in the admin area.</Description>\n"
"    <Description Lang=\"de\">Frontendmodul-Registrierung des "
"AdminUser-Objekts im Admin-Bereich.</Description>\n"
"    <Group>Framework</Group>\n"
"    <SubGroup>Frontend::Admin::ModuleRegistration</SubGroup>\n"
"    <Setting>\n"
"        <FrontendModuleReg>\n"
"            <Group>admin</Group>\n"
"            <Description>Admin</Description>\n"
"            <Title>User</Title>\n"
"            <NavBarName>Admin</NavBarName>\n"
"            <NavBarModule>\n"
"                <Module>Kernel::Output::HTML::NavBarModuleAdmin</Module>\n"
"                <Name>Users</Name>\n"
"                <Block>Block1</Block>\n"
"                <Prio>100</Prio>\n"
"            </NavBarModule>\n"
"        </FrontendModuleReg>\n"
"    </Setting>\n"
"</ConfigItem>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:64 en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:127
msgid "Old Style: <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:92
#, no-wrap
msgid ""
"    <ConfigItem Name=\"Frontend::Module###AdminUser\" Required=\"0\" "
"Valid=\"1\">\n"
"        <Description Translatable=\"1\">Frontend module registration for the "
"agent interface.</Description>\n"
"        <Group>Framework</Group>\n"
"        <SubGroup>Frontend::Admin::ModuleRegistration</SubGroup>\n"
"        <Setting>\n"
"            <FrontendModuleReg>\n"
"                <Group>admin</Group>\n"
"                <Description>Create and manage agents.</Description>\n"
"                <Title>Agents</Title>\n"
"                <NavBarName>Admin</NavBarName>\n"
"                <NavBarModule>\n"
"                    "
"<Module>Kernel::Output::HTML::NavBarModuleAdmin</Module>\n"
"                    <Name Translatable=\"1\">Agents</Name>\n"
"                    <Description Translatable=\"1\">Create and manage "
"agents.</Description>\n"
"                    <Block>Agent</Block>\n"
"                    <Prio>100</Prio>\n"
"                </NavBarModule>\n"
"            </FrontendModuleReg>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:123
msgid "Configuration of NavBar was Changed"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:129
#, no-wrap
msgid ""
"    <ConfigItem Name=\"Frontend::Module###AgentTicketSearch\" Required=\"0\" "
"Valid=\"1\">\n"
"        <Description Lang=\"en\">Frontend module registration for the "
"AgentTicketSearch object in the agent interface.</Description>\n"
"        <Description Lang=\"de\">Frontendmodul-Registration des "
"AgentTicketSearch-Objekts im Agent-Interface.</Description>\n"
"        <Group>Ticket</Group>\n"
"        <SubGroup>Frontend::Agent::ModuleRegistration</SubGroup>\n"
"        <Setting>\n"
"            <FrontendModuleReg>\n"
"                <Description>Search Tickets</Description>\n"
"                <Title>Search</Title>\n"
"                <NavBarName>Ticket</NavBarName>\n"
"                <NavBar>\n"
"                    <Description>Search Tickets</Description>\n"
"                    <Name>Search</Name>\n"
"                    <Image>search.png</Image>\n"
"                    <Link>Action=AgentTicketSearch</Link>\n"
"                    <NavBar>Ticket</NavBar>\n"
"                    <Type></Type>\n"
"                    <Block></Block>\n"
"                    <AccessKey>s</AccessKey>\n"
"                    <Prio>300</Prio>\n"
"                </NavBar>\n"
"            </FrontendModuleReg>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"            ]]"
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:159
#, no-wrap
msgid ""
"    <ConfigItem Name=\"Frontend::Module###AgentTicketSearch\" Required=\"0\" "
"Valid=\"1\">\n"
"        <Description Translatable=\"1\">Frontend module registration for the "
"agent interface.</Description>\n"
"        <Group>Ticket</Group>\n"
"        <SubGroup>Frontend::Agent::ModuleRegistration</SubGroup>\n"
"        <Setting>\n"
"            <FrontendModuleReg>\n"
"                <Description>Search Ticket</Description>\n"
"                <Title>Search</Title>\n"
"                <NavBarName>Ticket</NavBarName>\n"
"                <NavBar>\n"
"                    <Description Translatable=\"1\">Search "
"Ticket</Description>\n"
"                    <Name Translatable=\"1\">Search</Name>\n"
"                    <Link>Action=AgentTicketSearch</Link>\n"
"                    <LinkOption></LinkOption>\n"
"                    <NavBar>Ticket</NavBar>\n"
"                    <Type></Type>\n"
"                    <Block></Block>\n"
"                    <AccessKey>s</AccessKey>\n"
"                    <Prio>300</Prio>\n"
"                </NavBar>\n"
"            </FrontendModuleReg>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:186
msgid ""
"Please note that the <literal>NavBar</literal> names changed (Description "
"Name Link LinkOption NavBar Type Block AccessKey Prio are available).  An "
"additional <literal>LinkOption</literal> tag has been added and "
"<literal>Image</literal> tag has been removed."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:193
msgid "Configuration Setting Frontend::NavBarModule was Renamed"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:196
msgid ""
"Frontend::NavBarModule was renamed to Frontend::ToolBarModule.  Block option "
"need to get replaced, ToolBarItem is now used."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:203
msgid "PreferencesGroups configuration"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:206
msgid ""
"Up to this point, the PreferencesGroups (which can be used to create a "
"section in the Agent or Customer configuration dialog) had either a "
"description (<literal>Desc</literal>), or a field label "
"(<literal>Key</literal>), or both. With the new GUI, the interface was "
"slightly changed so that now the <literal>Key</literal> always must be "
"provided."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:212
msgid ""
"The existing entries were changed so that either the <literal>Desc</literal> "
"was shortened and turned into a <literal>Key</literal> instead, or a concise "
"<literal>Key</literal> was added to describe the setting in Question."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:217
msgid ""
"This is also what should be done (either of the two options)  when porting a "
"custom PreferencesGroups module to OTRS 3.0."
msgstr ""

#. type: CDATA
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:223
#, no-wrap
msgid ""
"    <ConfigItem Name=\"PreferencesGroups###RefreshTime\" Required=\"0\" "
"Valid=\"1\">\n"
"        <Description Translatable=\"1\">Parameters for the RefreshTime "
"object in the preference view of the agent interface.</Description>\n"
"        <Group>Ticket</Group>\n"
"        <SubGroup>Frontend::Agent::Preferences</SubGroup>\n"
"        <Setting>\n"
"            <Hash>\n"
"                <Item "
"Key=\"Module\">Kernel::Output::HTML::PreferencesGeneric</Item>\n"
"                <Item Key=\"Column\">Other Settings</Item>\n"
"                <Item Key=\"Label\" Translatable=\"1\">QueueView Refresh "
"Time</Item>\n"
"                <Item Key=\"Desc\" Translatable=\"1\">If enabled, the "
"QueueView will automatically refresh after the specified time.</Item>\n"
"                <Item Key=\"Key\" Translatable=\"1\">Refresh QueueView "
"after</Item>\n"
"                <Item Key=\"Data\">\n"
"                    <Hash>\n"
"                        <Item Key=\"0\">off</Item>\n"
"                        <Item Key=\"2\"> 2 minutes</Item>\n"
"                        <Item Key=\"5\"> 5 minutes</Item>\n"
"                        <Item Key=\"7\"> 7 minutes</Item>\n"
"                        <Item Key=\"10\">10 minutes</Item>\n"
"                        <Item Key=\"15\">15 minutes</Item>\n"
"                    </Hash>\n"
"                </Item>\n"
"                <Item Key=\"DataSelected\">0</Item>\n"
"                <Item Key=\"PrefKey\">UserRefreshTime</Item>\n"
"                <Item Key=\"Prio\">2000</Item>\n"
"                <Item Key=\"Active\">1</Item>\n"
"            </Hash>\n"
"        </Setting>\n"
"    </ConfigItem>\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/hacking-otrs/upgrading-modules-2.4-3.0.xml:221
msgid ""
"Example: <placeholder type=\"programlisting\" id=\"0\"/> "
"<literal>Key</literal> is mandatory, <literal>Desc</literal> is optional."
msgstr ""

#. type: Content of: <chapter><title>
#: en/content/contributing.xml:6
msgid "Contributing to OTRS"
msgstr ""

#. type: Content of: <chapter><abstract><para>
#: en/content/contributing.xml:9
msgid ""
"This chapter will show how you can contribute to the OTRS framework, so that "
"other users will be able to benefit from your work."
msgstr ""

#. type: Content of: <section><title>
#: en/content/contributing/translate.xml:6
msgid "Translate OTRS"
msgstr ""

#. type: Content of: <section><para>
#: en/content/contributing/translate.xml:8
msgid ""
"The OTRS framework allows for different languages to be used in the "
"frontend."
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/translate.xml:13
msgid ""
"There are three different translation file types which are used in the "
"following order. If a word/sentence is redefined in a translation file, the "
"latest definition will be used."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/translate.xml:20 en/content/contributing/translate.xml:44
msgid "Default Framework Translation File"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:23
msgid "<filename>Kernel/Language/$Language.pm</filename>"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:28
msgid "Frontend Module Translation File"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:31
msgid "<filename>Kernel/Language/$Language_$FrontendModule.pm</filename>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/translate.xml:36 en/content/contributing/translate.xml:148
msgid "Custom Translation File"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:39
msgid "<filename>Kernel/Language/$Language_Custom.pm</filename>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/translate.xml:46
msgid ""
"The Default Framework Translation File includes the basic translations. The "
"following is an example of a Default Framework Translation File."
msgstr ""

#. type: CDATA
#: en/content/contributing/translate.xml:51
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Language/de.pm - provides de language translation\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"package Kernel::Language::de;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"# --\n"
"sub Data {\n"
"    my $Self = shift;\n"
"\n"
"    # $$START$$\n"
"\n"
"    # possible charsets\n"
"    $Self->{Charset} = ['iso-8859-1', 'iso-8859-15', ];\n"
"    # date formats "
"(%A=WeekDay;%B=LongMonth;%T=Time;%D=Day;%M=Month;%Y=Jear;)\n"
"    $Self->{DateFormat} = '%D.%M.%Y %T';\n"
"    $Self->{DateFormatLong} = '%A %D %B %T %Y';\n"
"    $Self->{DateFormatShort} = '%D.%M.%Y';\n"
"    $Self->{DateInputFormat} = '%D.%M.%Y';\n"
"    $Self->{DateInputFormatLong} = '%D.%M.%Y - %T';\n"
"\n"
"    $Self->{Translation} = {\n"
"    # Template: AAABase\n"
"    'Yes' => 'Ja',\n"
"    'No' => 'Nein',\n"
"    'yes' => 'ja',\n"
"    'no' => 'kein',\n"
"    'Off' => 'Aus',\n"
"    'off' => 'aus',Kernel/Language/$Language_Custome.pm\n"
"    };\n"
"    # $$STOP$$\n"
"    return 1;\n"
"}\n"
"# --\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/translate.xml:103
msgid "Frontend Translation File"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/translate.xml:105
msgid ""
"The Frontend Translation File is used for a specific frontend module.  If, "
"for example, the frontend module \"Kernel/Modules/AgentCalendar.pm\", also "
"<ulink "
"url=\"http://otrs.example.com/otrs/index.pl?Action=AgentCalendar\">http://otrs.example.com/otrs/index.pl?Action=AgentCalendar</ulink>, "
"is used, the Frontend Translation File "
"\"Kernel/Language/de_Agentcalendar.pm\" is used, too."
msgstr ""

#. type: CDATA
#: en/content/contributing/translate.xml:112
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Language/de_AgentCalendar.pm - provides de language translation\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"package Kernel::Language::de_AgentCalendar;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"sub Data {\n"
"    my $Self = shift;\n"
"\n"
"    $Self->{Translation}->{'CW'} = 'KW';\n"
"    $Self->{Translation}->{'Today'} = 'heute';\n"
"    $Self->{Translation}->{'Tomorrow'} = 'Morgen';\n"
"    $Self->{Translation}->{'1 St. May'} = 'Erster Mai';\n"
"    $Self->{Translation}->{'Christmas'} = 'Weihnachten';\n"
"    $Self->{Translation}->{'Silvester'} = 'Silvester';\n"
"    $Self->{Translation}->{'New Year\\'s Eve!'} = 'Neu Jahr!';\n"
"    $Self->{Translation}->{'January'} = 'Januar';\n"
"    $Self->{Translation}->{'February'} = 'Februar';\n"
"    return 1;\n"
"}\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/translate.xml:150
msgid ""
"The Custom Translation File is read out last and so its translation which "
"will be used. If you want to add your own wording to your installation, "
"create this file for your language."
msgstr ""

#. type: CDATA
#: en/content/contributing/translate.xml:156
#, no-wrap
msgid ""
"# --\n"
"# Kernel/Language/xx_Custom.pm - provides xx custom language translation\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"package Kernel::Language::xx_Custom;\n"
"\n"
"use strict;\n"
"use warnings;\n"
"\n"
"use vars qw(@ISA $VERSION);\n"
"$VERSION = qw($Revision: 1.4 $) [1];\n"
"\n"
"# --\n"
"sub Data {\n"
"    my $Self = shift;\n"
"\n"
"    # $$START$$\n"
"\n"
"    # own translations\n"
"    $Self->{Translation}->{'Lock'} = 'Lala';\n"
"    $Self->{Translation}->{'Unlock'} = 'Lulu';\n"
"\n"
"    # $$STOP$$\n"
"    return 1;\n"
"}\n"
"# --\n"
"1;\n"
"            ]]"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/translate.xml:195
msgid "Add a new default framework translation"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/translate.xml:197
msgid ""
"If you want to translate the OTRS framework into a new language, you have to "
"follow these five steps:"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:203
msgid ""
"Take the current German translation (Kernel/Language/de.pm) from CVS (<ulink "
"url=\"http://source.otrs.org/\">http://source.otrs.org</ulink>).  Use the German "
"version because this is always up to date."
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:210
msgid ""
"Change the package name (e.g. \"package Kernel::Language::de;\" to \"package "
"Kernel::Language::fr;\") and translate each word/sentence."
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:216
msgid ""
"Add the new language translation to the framework by adding it to your "
"<filename>Kernel/Config.pm</filename>."
msgstr ""

#. type: CDATA
#: en/content/contributing/translate.xml:219
#, no-wrap
msgid ""
"$Self->{DefaultUsedLanguages}->{fr} = 'French';\n"
"                ]]"
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:225
msgid ""
"If you use mod_perl, restart your webserver and the new language will be "
"shown in your preferences selection."
msgstr ""

#. type: Content of: <section><section><orderedlist><listitem><para>
#: en/content/contributing/translate.xml:231
msgid "Send the new translation file to mailing list \"i18n at otrs.org\" - Thanks!"
msgstr ""

#. type: Content of: <section><title>
#: en/content/contributing/code-style.xml:6
msgid "Code Style Guide"
msgstr ""

#. type: Content of: <section><para>
#: en/content/contributing/code-style.xml:8
msgid ""
"In order to preserve the consistent development of the OTRS project, we have "
"set up guidelines regarding style for the different programming languages."
msgstr ""

#. type: Content of: <section><title>
#: en/content/contributing/accessibility.xml:6
msgid "Accessibility Guide"
msgstr ""

#. type: Content of: <section><para>
#: en/content/contributing/accessibility.xml:9
msgid ""
"This document is supposed to explain basics about accessibility issues and "
"give guidelines for contributions to OTRS."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/accessibility.xml:14
msgid "Accessibility Basics"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:18
msgid "What is Accessibility?"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:21
msgid ""
"Accessibility is a general term used to describe the degree to which a "
"product, device, service, or environment is accessible by as many people as "
"possible.  Accessibility can be viewed as the \"ability to access\" and "
"possible benefit of some system or entity. Accessibility is often used to "
"focus on people with disabilities and their right of access to entities, "
"often through use of assistive technology."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:28
msgid ""
"In the context of web development, accessibility has a focus on enabling "
"people with impariments full access to web interfaces. For example, this "
"group of people can include partially visually impaired or completely blind "
"people. While the former can still partially use the GUI, the latter have to "
"completely rely on assistive technologies such as software which reads the "
"screen to them (screen readers)."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:37
msgid "Why is it important for OTRS?"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:40
msgid ""
"To enable impaired users access to OTRS systems is a valid goal in "
"itself. It shows respect."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:43
msgid ""
"Furthermore, fulfilling accessibility standards is becoming increasingly "
"important in the public sector (government institutions) and large "
"companies, which both belong to the target markets of OTRS."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:49
msgid ""
"How can I successfully work on accessibility issues even if I am not "
"disabled?"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:52
msgid "This is very simple. Pretend to be blind."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:55
msgid "Don't"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:59
msgid "use the Mouse and"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:64
msgid "look at the screen."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:70
msgid ""
"Then try to use OTRS with the help of a screen reader and your keyboard "
"only.  This should give you an idea of how it will feel for a blind person."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:76
msgid "Ok, but I don't have a screen reader!"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:79
msgid ""
"While commercial screen readers such as JAWS (perhaps the best known one) "
"can be extremely expensive, there are OpenSource screen readers which you "
"can install and use:"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:84
msgid ""
"<ulink url=\"http://www.nvda-project.org/\">NVDA</ulink>, a screen reader "
"for Windows.  (Use the 2010.beta1 or any later version as this has better "
"support for the web accessibility standards)."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:91
msgid ""
"<ulink url=\"http://live.gnome.org/Orca\">ORCA</ulink>, a screen reader for "
"Gnome/Linux."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:97
msgid "Now you don't have an excuse any more. ;)"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/accessibility.xml:102
msgid "Accessibility Standards"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/accessibility.xml:104
msgid ""
"This section is included for reference only, you do not have to study the "
"standards themselves to be able to work on accessibility issues in OTRS.  "
"We'll try to extract the relevant guidelines in this document."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:110
msgid "Web Content Accessibility Guidelines (WCAG)"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:113
msgid ""
"This W3C standard gives general guidelines for how to create accessible web "
"pages."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:118
msgid "<ulink url=\"http://www.w3.org/TR/WCAG20/\">WCAG 2.0</ulink>"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:123
msgid ""
"<ulink url=\"http://www.w3.org/WAI/WCAG20/quickref/\">How to Meet WCAG "
"2.0</ulink>"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:128
msgid ""
"<ulink url=\"http://www.w3.org/TR/UNDERSTANDING-WCAG20/\">Understanding WCAG "
"2.0</ulink>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:134
msgid ""
"WCAG has different levels of accessibility support.  We currently plan to "
"support level A, as AA and AAA deal with matters that seem not relevant for "
"OTRS."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:140
msgid "Accessible Rich Internet Applications (WAI-ARIA) 1.0"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:142
msgid ""
"This standard (ist is still in draft status, in fact) deals with the special "
"issues arising from the shift away from static content to dynamic web "
"applications. It deals with questions like how a user can be notified of "
"changes in the user interface resulting from AJAX requests, for example."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:151
msgid "<ulink url=\"http://www.w3.org/TR/wai-aria/\">WAI-ARIA 1.0</ulink>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/accessibility.xml:160
msgid "Implementation guidelines"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:162
msgid "Provide alternatives for non-text content"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:164
msgid ""
"Goal: <emphasis>All non-text content that is presented to the user has a "
"text alternative that serves the equivalent purpose</emphasis> (WCAG 1.1.1)"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:169
msgid ""
"It is very important to understand that screen readers can only present "
"textual information and available metadata to the user.  To give you an "
"example, whenever a screen reader sees <literal>&lt;a href=\"#\" "
"class=\"CloseLink\"&gt;&lt;/a&gt;</literal>, it can only read \"link\" to "
"the user, but not the purpose of this link.  With a slight improvement, it "
"would be accessible: <literal>&lt;a href=\"#\" class=\"CloseLink\" "
"title=\"Close this widget\"&gt;&lt;/a&gt;</literal>.  In this case the user "
"would hear \"link close this widget\", voila!"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:179
msgid ""
"It is important to always formulate the text in a most \"speaking\" way.  "
"Just imagine it is the only information that you have. Will it help you? Can "
"you understand its purpose just by hearing it?"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:184
msgid "Please follow these rules when working on OTRS:"
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:189
msgid ""
"<emphasis>Rul:</emphasis>: Wherever possible, use speaking texts and "
"formulate in real, understandable and precise sentences. \"Close this "
"widget\" is much better than \"Close\", because the latter is redundant."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:196
msgid ""
"<emphasis>Rule</emphasis>: Links always must have either text content that "
"is spoken by the screen reader (<literal>&lt;a href=\"#\" &gt;Delete this "
"entry&lt;/a&gt;</literal>), or a title attribute (<literal>&lt;a href=\"#\" "
"title=\"Close this widget\"&gt;&lt;/a&gt;</literal>)."
msgstr ""

#. type: Content of: <section><section><section><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:203
msgid ""
"<emphasis>Rule</emphasis>: Images must always have an alternative text that "
"can be read to the user (<literal>&lt;img src=\"house.png\" alt=\"Image of a "
"house\" /&gt;</literal>)."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:212
msgid "Make navigation easy"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:215
msgid ""
"Goal: <emphasis>allow the user to easily navigate the current page and the "
"entire application.</emphasis>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:218
msgid ""
"The <literal>title</literal> tag is the first thing a user hears from the "
"screen reader when opening a web page.  For OTRS, there is also always just "
"one <literal>h1</literal> element on the page, indicating the current page "
"(it contains part of the information from <literal>title</literal>).  This "
"navigational information helps the user to understand where they are, and "
"what the purpose of the current page is."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:226
msgid ""
"<emphasis>Rule</emphasis>: Always give a precise title to the page that "
"allows the user to understand where they currently are."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:231
msgid ""
"Screen readers can use the built-in document structure of HTML (headings "
"<literal>h1</literal> to <literal>h6</literal>) to determine the structure "
"of a document and to allow the user to jump around from section to section.  "
"However, this is not enough to reflect the structure of a dynamic web "
"application.  That's why ARIA defines several \"landmark\" roles that can be "
"given to elements to indicate their navigational significance.  To keep the "
"validity of the HTML documents, the role attributes (ARIA landmark roles)  "
"are not inserted into the source code directly, but instead by classes which "
"will later be used by the JavaScript functions in OTRS.UI.Accessibility to "
"set the corresponding role attributes on the node."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:245
msgid ""
"<emphasis>Rule</emphasis>: Use WAI ARIA Landmark Roles to structure the "
"content for screenreaders"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:249
msgid ""
"Banner: <literal>&lt;div class=\"ARIARoleBanner\"&gt;&lt;/div&gt;</literal> "
"will become <literal>&lt;div class=\"ARIARoleBanner\" "
"role=\"banner\"&gt;&lt;/div&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:255
msgid ""
"Navigation: <literal>&lt;div "
"class=\"ARIARoleNavigation\"&gt;&lt;/div&gt;</literal> will become "
"<literal>&lt;div class=\"AriaRoleNavigation\" "
"role=\"navigation\"&gt;&lt;/div&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:261
msgid ""
"Search function: <literal>&lt;div "
"class=\"ARIARoleSearch\"&gt;&lt;/div&gt;</literal> will become "
"<literal>&lt;div class=\"ARIARoleSearch\" "
"role=\"search\"&gt;&lt;/div&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:267
msgid ""
"Main application area: <literal>&lt;div "
"class=\"ARIARoleMain\"&gt;&lt;/div&gt;</literal> will become "
"<literal>&lt;div class=\"ARIARoleMain\" "
"role=\"main\"&gt;&lt;/div&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:273
msgid ""
"Footer: <literal>&lt;div "
"class=\"ARIARoleContentinfo\"&gt;&lt;/div&gt;</literal> will become "
"<literal>&lt;div class=\"ARIARoleContentinfo\" "
"role=\"contentinfo\"&gt;&lt;/div&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:282
msgid ""
"For navigation inside of <literal>&lt;form&lt;</literal> elements, it is "
"neccessary for the impaired user to know what each input elements purpose "
"is. This can be achieved by using standard HTML "
"<literal>&lt;label&gt;</literal> elements which create a link between the "
"label and the form element.  When an input element gets focus, the screen "
"reader will usually read the connected label, so that the agent can hear its "
"exact purpose.  An additional benefit for seeing users is that they can "
"click on the label, and the input element will get focus (escpecially "
"helpful for checkboxes, for example)."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:295
msgid ""
"<emphasis>Rule</emphasis>: Provide <literal>&lt;label&gt;</literal> elements "
"for *all* form element (input, select, textarea) fields."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:299
msgid ""
"Example: <literal>&lt;label for=\"date\"&gt;Date:&lt;/label&gt;&lt;input "
"type=\"text\" name=\"date\" id=\"date\"/&gt;</literal>"
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:305
msgid "Make interaction possible"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:307
msgid ""
"Goal: <emphasis>Allow the user to perform all interactions just by using the "
"keyboard.</emphasis>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:310
msgid ""
"While it is technically possible to create interactions with JavaScript on "
"arbitrary HTML elements, this must be limited to elements that a user can "
"interact with by using the keyboard.  Specifically, they need to be able to "
"give focus to the element and to interact with it.  For example, a push "
"button to toggle a widget should not be realized by using a "
"<literal>span</literal> element with an attached JavaScript "
"<literal>onclick</literal> event listener, but it should be (or contain) an "
"<literal>a</literal> tag to make it clear to the screen reader that this "
"element can cause interaction."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:322
msgid ""
"<emphasis>Rule</emphasis>: For interactions, always use elements that can "
"receive focus, such as <literal>a</literal>, <literal>input</literal>, "
"<literal>select</literal> and <literal>button</literal>."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:328
msgid ""
"<emphasis>Rule</emphasis>: Make sure that the user can always identify the "
"nature of the interaction (see rules about non-textual content and labelling "
"of form elements)."
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:335
msgid "Goal: <emphasis>Make dynamic changes known to the user.</emphasis>"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:338
msgid ""
"A special area of accessibility problems are dynamic changes in the user "
"interface, either by JavaScript or also by AJAX calls.  The screen reader "
"will not tell the user about changes without special precautions.  This is a "
"difficult topic and cannot yet be completely explained here."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:346
msgid ""
"<emphasis>Rule</emphasis>: Always use the validation framework "
"<literal>OTRS.Validate</literal> for form validation."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:349
msgid ""
"This will make sure that the error tooltips are being read by the screen "
"reader.  That way the blind agent a) knows the item which has an error and "
"b) get a text describing the error."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:355
msgid ""
"<emphasis>Rule</emphasis>: Use the function "
"<literal>OTRS.UI.Accessibility.AudibleAlert()</literal> to notify the user "
"about other important UI changes."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:361
msgid ""
"<emphasis>Rule</emphasis>: Use the <literal>OTRS.UI.Dialog</literal> "
"framework to create modal dialogs. These are already optimized for "
"accessibility."
msgstr ""

#. type: Content of: <section><section><section><title>
#: en/content/contributing/accessibility.xml:368
msgid "General screen reader optimizations"
msgstr ""

#. type: Content of: <section><section><section><para>
#: en/content/contributing/accessibility.xml:370
msgid "Goal: <emphasis>Help screen readers with their work.</emphasis>"
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:375
msgid ""
"<emphasis>Rule</emphasis>: Each page must identify its own main language so "
"that the screenreader can choose the right speech synthesis engine."
msgstr ""

#. type: Content of: <section><section><section><itemizedlist><listitem><para>
#: en/content/contributing/accessibility.xml:379
msgid "Example: <literal>&lt;html lang=\"fr\"&gt;...&lt;/html&gt;</literal>"
msgstr ""

#. type: Content of: <section><title>
#: en/content/contributing/unit-tests.xml:6
msgid "Unit Tests"
msgstr ""

#. type: Content of: <section><para>
#: en/content/contributing/unit-tests.xml:8
msgid "OTRS provides unit tests for core modules."
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/unit-tests.xml:11
msgid "Creating a test file"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:13
msgid ""
"The test files are stored in .t files under /scripts/test/*.t.  For example "
"the file /scripts/test/Calendar.t for the Calendar Module."
msgstr ""

#. type: CDATA
#: en/content/contributing/unit-tests.xml:19
#, no-wrap
msgid ""
"# --\n"
"# Calendar.t - Calendar\n"
"# Copyright (C) 2001-2012 OTRS AG, http://otrs.org/\n";
"# --\n"
"# $Id: doc-developer.pot,v 1.4 2012-05-02 07:40:03 mh Exp $\n"
"# --\n"
"# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n"
"# the enclosed file COPYING for license information (AGPL). If you\n"
"# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.\n"
"# --\n"
"\n"
"use strict;\n"
"use warnings;\n"
"use utf8;\n"
"\n"
"use vars qw($Self);\n"
"\n"
"use Kernel::System::User;\n"
"use Kernel::System::CalendarEvent;\n"
"\n"
"$Self->{UserObject} = Kernel::System::User->new(%{$Self});\n"
"$Self->{EventObject} = Kernel::System::CalendarEvent->new(%{$Self}, UserID "
"=> 1);\n"
"\n"
"\n"
"my $EventID = $Self->{EventObject}->EventAdd(\n"
"    Title => 'Some Test',\n"
"    StartTime => '1977-10-27 20:15',\n"
"    EndTime => '1977-10-27 21:00',\n"
"    State => 'public',\n"
"    UserIDs => [1],\n"
");\n"
"\n"
"$Self->True(\n"
"    $EventID,\n"
"    'EventAdd()',\n"
");\n"
"\n"
"[..]\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:17
msgid ""
"A test file consists of the function call of the function to be tested and "
"the analysis of the return value.  Example (/scripts/test/Calendar.t): "
"<placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/unit-tests.xml:62
msgid "Testing"
msgstr ""

#. type: CDATA
#: en/content/contributing/unit-tests.xml:65
#, no-wrap
msgid ""
"shell:/opt/otrs> bin/otrs.UnitTest.pl -n Calendar\n"
"+-------------------------------------------------------------------+\n"
"/opt/otrs/scripts/test/Calendar.t:\n"
"+-------------------------------------------------------------------+\n"
"ok 1 - EventAdd()\n"
"=====================================================================\n"
"Product:   OTRS 3.0.x CVS\n"
"Test Time: 0 s\n"
"Time:      2010-04-02 12:58:37\n"
"Host:      yourhost.example.com\n"
"Perl:      5.8.9\n"
"OS:        linux\n"
"TestOk:    1\n"
"TestNotOk: 0\n"
"=====================================================================\n"
"shell:/opt/otrs>\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:64
msgid ""
"To check your tests, just use \"bin/otrs.UnitTest.pl -n Calendar\" to use "
"/scripts/test/Calendar.t.  <placeholder type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/unit-tests.xml:86
msgid "True()"
msgstr ""

#. type: CDATA
#: en/content/contributing/unit-tests.xml:89
#, no-wrap
msgid ""
"$Self->True(\n"
"    $EventID,\n"
"    'EventAdd()',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:88
msgid ""
"This function tests whether the return value of the function 'EventAdd()' in "
"the variable $EventID is valid.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/unit-tests.xml:98
msgid "False()"
msgstr ""

#. type: CDATA
#: en/content/contributing/unit-tests.xml:101
#, no-wrap
msgid ""
"$Self->False(\n"
"    $EventID,\n"
"    'EventAdd()',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:100
msgid ""
"This function tests whether the return value of the function 'EventAdd()' in "
"the variable $EventID is invalid.  <placeholder type=\"programlisting\" "
"id=\"0\"/>"
msgstr ""

#. type: Content of: <section><section><title>
#: en/content/contributing/unit-tests.xml:110
msgid "Is()"
msgstr ""

#. type: CDATA
#: en/content/contributing/unit-tests.xml:113
#, no-wrap
msgid ""
"$Self->Is(\n"
"    $A,\n"
"    $B,\n"
"    'Test Name',\n"
");\n"
"        ]]"
msgstr ""

#. type: Content of: <section><section><para>
#: en/content/contributing/unit-tests.xml:112
msgid ""
"This function tests whether the variables $A and $B are equal.  <placeholder "
"type=\"programlisting\" id=\"0\"/>"
msgstr ""

#. type: Content of: <appendix><title>
#: en/content/additional-resources.xml:6
msgid "Additional Resources"
msgstr ""

#. type: Content of: <appendix><section><title>
#: en/content/additional-resources.xml:8
msgid "OTRS.org"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:10
msgid ""
"The OTRS project website with source code, documentation and news is "
"available at:"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:13
msgid "<ulink url=\"http://otrs.org/\">http://otrs.org/</ulink>"
msgstr ""

#. type: Content of: <appendix><section><title>
#: en/content/additional-resources.xml:17
msgid "Online API Library"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:19
msgid "The OTRS developer API documentation is available at:"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:22
msgid "<ulink url=\"http://dev.otrs.org/\">http://dev.otrs.org/</ulink>"
msgstr ""

#. type: Content of: <appendix><section><title>
#: en/content/additional-resources.xml:26
msgid "Developer Mailing List"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:28
msgid "The OTRS developer mailing list is available at:"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:31
msgid "<ulink url=\"http://lists.otrs.org/\">http://lists.otrs.org/</ulink>"
msgstr ""

#. type: Content of: <appendix><section><title>
#: en/content/additional-resources.xml:35
msgid "Commercial Support"
msgstr ""

#. type: Content of: <appendix><section><para>
#: en/content/additional-resources.xml:37
msgid ""
"For business assistance (support, consulting and training) please contact "
"the commercial part of OTRS, the OTRS AG."
msgstr ""

#. type: Content of: <appendix><section><para><screen>
#: en/content/additional-resources.xml:41
#, no-wrap
msgid ""
"OTRS AG\n"
"Europaring 4\n"
"94315 Straubing (Germany)\n"
"Phone: +49 (0)9421 1862 760\n"
"Fax:   +49 (0)9421 1862 769\n"
"Web: <ulink url=\"http://otrs.com/\">http://otrs.com/</ulink>\n"
"        "
msgstr ""
