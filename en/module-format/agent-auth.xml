<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: agent-auth.xml,v 1.2 2010-05-10 15:37:49 fk Exp $ -->


<section id="agent-auth-module">
    <title>Agent Authentication Module</title>
    <para>
        There is a agent authentication interface that allows you to create various agent authentication backends.
    </para>
    <section id="agent-auth-module-code">
        <title>Interface</title>
        <para>
            The interface class is called Kernel::System::Auth. The example agent authentication
            may be called Kernel::System::Auth::CustomAuth. You can find an example below.
        </para>
        <para>
        <programlisting language="perl" linenumbering="numbered"><![CDATA[
# --
# Kernel/System/Auth/CustomAuth.pm - provides the CustomAuth authentication
# based on Martin Edenhofer's Kernel::System::Auth::DB
# Copyright (C) 2001-2010 OTRS AG, http://otrs.org/
# --
# ID: CustomAuth.pm,v 1.1 2010/05/10 15:30:34 fk Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::System::Auth::CustomAuth;

use strict;
use warnings;

use Authen::CustomAuth;

use vars qw($VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for (qw(LogObject ConfigObject DBObject)) {
        $Self->{$_} = $Param{$_} || die "No $_!";
    }

    # Debug 0=off 1=on
    $Self->{Debug} = 0;

    # get config
    $Self->{Die} = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Die' . $Param{Count} );

    # get user table
    $Self->{CustomAuthHost} = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Host' . $Param{Count} )
        || die "Need AuthModule::CustomAuth::Host$Param{Count}.";
    $Self->{CustomAuthSecret}
        = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Password' . $Param{Count} )
        || die "Need AuthModule::CustomAuth::Password$Param{Count}.";

    return $Self;
}

sub GetOption {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    if ( !$Param{What} ) {
        $Self->{LogObject}->Log( Priority => 'error', Message => "Need What!" );
        return;
    }

    # module options
    my %Option = ( PreAuth => 0, );

    # return option
    return $Option{ $Param{What} };
}

sub Auth {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    if ( !$Param{User} ) {
        $Self->{LogObject}->Log( Priority => 'error', Message => "Need User!" );
        return;
    }

    # get params
    my $User       = $Param{User}      || '';
    my $Pw         = $Param{Pw}        || '';
    my $RemoteAddr = $ENV{REMOTE_ADDR} || 'Got no REMOTE_ADDR env!';
    my $UserID     = '';
    my $GetPw      = '';

    # just in case for debug!
    if ( $Self->{Debug} > 0 ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: '$User' tried to authenticate with Pw: '$Pw' ($RemoteAddr)",
        );
    }

    # just a note
    if ( !$User ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "No User given!!! (REMOTE_ADDR: $RemoteAddr)",
        );
        return;
    }

    # just a note
    if ( !$Pw ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication without Pw!!! (REMOTE_ADDR: $RemoteAddr)",
        );
        return;
    }

    # Create a radius object
    my $CustomAuth = Authen::CustomAuth->new(
        Host   => $Self->{CustomAuthHost},
        Secret => $Self->{CustomAuthecret},
    );
    if ( !$CustomAuth ) {
        if ( $Self->{Die} ) {
            die "Can't connect to $Self->{CustomAuthHost}: $@";
        }
        else {
            $Self->{LogObject}->Log(
                Priority => 'error',
                Message  => "Can't connect to $Self->{CustomAuthHost}: $@",
            );
            return;
        }
    }
    my $AuthResult = $CustomAuth->check_pwd( $User, $Pw );

    # login note
    if ( defined($AuthResult) && $AuthResult == 1 ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication ok (REMOTE_ADDR: $RemoteAddr).",
        );
        return $User;
    }

    # just a note
    else {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication with wrong Pw!!! (REMOTE_ADDR: $RemoteAddr)"
        );
        return;
    }
}

1;

        ]]></programlisting>
        </para>
    </section>
    <section id="agent-auth-module-configuration">
        <title>Configuration example</title>
        <para>
            There is the need to activate your custom agent authenticate module. Furthermore
            a host and a password has to be provided. Zudem kann eine Option nutzlich sein, die
            besagt, ob beim Nichterreichen des Servers die Ausführung der Applikation abgebrochen werden soll.
        </para>
        <para>
        <programlisting language="xml" linenumbering="numbered"><![CDATA[
<ConfigItem Name="AuthModule" Required="1" Valid="1">
    <Description Lang="en">Module to authenticate agents.</Description>
    <Description Lang="de">Modul zum authentifizieren der Agents.</Description>
    <Group>Framework</Group>
    <SubGroup>Frontend::Auth</SubGroup>
    <Setting>
        <Option Location="Kernel/System/Auth/*.pm" SelectedID="Kernel::System::Auth::CustomAuth"></Option>
    </Setting>
</ConfigItem>
<ConfigItem Name="AuthModule::CustomAuth::Host" Required="0" Valid="0">
    <Description Lang="en">If "CustomAuth" was selected for AuthModule, specify your radius host.</Description>
    <Description Lang="de">Wenn "CustomAuth" als AuthModule ausgewählt wurde, kann hier der CustomAuth-Server angegeben werden.</Description>
    <Group>Framework</Group>
    <SubGroup>Frontend::Auth</SubGroup>
    <Setting>
        <String Regex="">host</String>
    </Setting>
</ConfigItem>
<ConfigItem Name="AuthModule::CustomAuth::Password" Required="0" Valid="0">
    <Description Lang="en">If "CustomAuth" was selected for AuthModule, specfiy the password to authenticate to your radius host.</Description>
    <Description Lang="de">Wenn "CustomAuth" als AuthModule ausgewählt wurde, kann hier das Kennwort für die Anmeldung am CustomAuth-Server angegeben werden.</Description>
    <Group>Framework</Group>
    <SubGroup>Frontend::Auth</SubGroup>
    <Setting>
        <String Regex="">secret</String>
    </Setting>
</ConfigItem>
<ConfigItem Name="AuthModule::CustomAuth::Die" Required="0" Valid="1">
    <Description Lang="en">If "CustomAuth" was selected for AuthModule, you can specify if the applications will stop if e. g. a server can't connected (e. g. network problems).</Description>
    <Description Lang="de">Wenn "CustomAuth" als AuthModule ausgewählt wurde, kann hier definiert werden ob die Anwendung abbricht wenn z. B. ein Server nicht erreichbar ist (z. B. Netzwerk-Probleme).</Description>
    <Group>Framework</Group>
    <SubGroup>Frontend::Auth</SubGroup>
    <Setting>
        <Option SelectedID="1">
            <Item Key="1">Yes</Item>
            <Item Key="0">No</Item>
        </Option>
    </Setting>
</ConfigItem>
        ]]></programlisting>
        </para>
    </section>
    <section id="agent-auth-module-use_cases">
        <title>Use case examples</title>
        <para>
            Useful authentification implmentation could be a soap backend.
        </para>
    </section>
    <section id="agent-auth-module-releases">
        <title>Release Availability</title>
        <para>
        <table frame='all'><title>Release Availability</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='1'>
            <colspec colname='Name'/>
            <colspec colname='Release'/>
            <thead>
            <row>
                <entry>DB</entry>
                <entry>1.0</entry>
            </row>
            </thead>
            <tfoot>
            <row>
                <entry>HTTPBasicAuth</entry>
                <entry>1.2</entry>
            </row>
            </tfoot>
            <tbody>
            <row>
                <entry>LDAP</entry>
                <entry>1.0</entry>
            </row>
            <row>
                <entry>Radius</entry>
                <entry>2.1</entry>
            </row>
            </tbody>
            </tgroup>
        </table>
        </para>
    </section>
</section>
