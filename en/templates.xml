<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: templates.xml,v 1.2 2005-08-10 14:17:04 rk Exp $ -->

<chapter>
    <title>Templates</title>
    <para>
        The .dtl files are to 70% plain html and just used from Frontend Modules
        (Kernel/Modules/*.pm). The .dtl files are located under:.......
    </para>
    <para>
        <filename>$OTRS_HOME/Kernel/Output/HTML/Standard/*.dtl</filename>
    </para>
    <para>
        The following descripes the usable dtl tags and syntax.
    </para>
    <sect1 id="formatting">
        <title>Formatting</title>
        <para>
            TAB: We use 2 spaces for every new open tag. Examples:
        </para>
        <programlisting format="linespecific" language="html">
            <table>
              <tr>
                <td>Key</td>
                <td>Value</td>
              </tr>
              <tr>
                <td>aaa</td>
                <td>bbb</td>
              </tr>
            </table>
        </programlisting>
        <programlisting format="linespecific" language="html">
            <form action ="index.pl">
              <input type="text" value="">
              <input type="text" value="">
              <table>
                <tr>
                  <td>Key1</td>
                  <td>Value1</td>
                </tr>
                <tr>
                  <td>Key2</td>
                  <td>Value2</td>
                </tr>
              </table>
              <input type="submit">
            </form>
        </programlisting>
        <sect2 id="Comment">
            <title>Comment</title>
            <para>
                The dtl comment starts with a # at the begining of a line and will not be
                shown in the html output.
            </para>
            <programlisting format="linespecific" language="html">
                # this can be a comment in the dtl file
            </programlisting>
        </sect2>
        <sect2 id="data">
            <title>$Data{""}</title>
            <para>
                If data params are given to the templates, the this params can be printed to
                the template.
            </para>
            <programlisting format="linespecific" language="html">
                There name of the author is $Data{"Name"}.
            </programlisting>
            <warning>
                <para>
                    It the value of the param Name includes html tags, the this tags are also shown.
                </para>
            </warning>
        </sect2>
        <sect2 id="qdata">
            <title>$QData{""}</title>
            <para>
                The same $Data{""} but the value if the param Name is html quoted (safe).
            </para>
            <programlisting format="linespecific" language="html">
                There name of the author is $QData{"Name"}.
            </programlisting>
            <para>
                It's also possible to cut the value. For example you just want to show 20
                characters of a variable (result will be "SomeNam[..]"J), use the following.
            </para>
            <programlisting format="linespecific" language="html">
                There first 20 characters of the authors name: $QData{"Name", "20"}.
            </programlisting>
        </sect2>
        <sect2 id="env">
            <title>$Env{""}</title>
            <para>
                Env is a environment variable which is usable over more templates. $Data{""}
                is just availabe for one template.
            </para>
            <programlisting format="linespecific" language="html">
                There curent user name is: $Env{"Userfirstname"}

                Some other common variables are:
                $Env{"SessionID"} --> the current session id
                $Env{"Time"} --> the current time e. g.  Thu Dec 27 16:00:55 2001
                $Env{"CGIHandle"} --> the current CGI handle e. g.  index.pl
                $Env{"UserCharset"} --> the current site charset e. g.  iso-8859-1
                $Env{"Baselink"} --> the baselink --> index.pl?SessionID=...
                $Env{"UserFirstname"} --> e. g. Dirk $Env{"UserFirstname"}
                $Env{"UserLogin"} --> e. g. mgg@x11.org
                $Env{"UserIsGroup[users]"} = Yes --> user groups (useful for own links)
                $Env{"UserIsGroup[admin]"} = Yes $Env{"Action"} --> the current action
            </programlisting>
        </sect2>
        <sect2 id="quote">
            <title>$Quote{""}</title>
            <para>
                A tag to quote html strings.
            </para>
            <programlisting format="linespecific" language="html">
                Show no html tags, quote this: $Quote{"<hr><b>some text</b></hr>"}
            </programlisting>
            <para>
                It's also possible to cut the value. For example you just want to show 20
                characters of a variable (result will be "SomeMess[..]"), use the following.
            </para>
            <programlisting format="linespecific" language="html">
                Show no html tags, quote this and show just 20 characters:
                  $Quote{"<hr><b>some text</b></hr>","20"}
            </programlisting>
        </sect2>
        <sect2 id="text">
            <title>$Text{""}</title>
            <para>
                This tag translates the string in there (based on the user selected language).
            </para>
            <programlisting format="linespecific" language="html">
                Translate this text: $Text{"Help"}
            </programlisting>
        </sect2>
        <sect2 id="config">
            <title>$Config{""}</title>
            <para>
                With this tag you can use config variables in the template. For example the
                Kernel/config.pm:
            </para>
            <programlisting format="linespecific" language="html">
                [Kernel/Config.pm]
                    # FQDN
                    # (Full qualified domain name of your system.)
                    $Self->{FQDN} = 'otrs.example.com';
                    # AdminEmail
                    # (Email of the system admin.)
                    $Self->{AdminEmail} = 'admin@example.com';
                [...]
            </programlisting>
            <para>
                And the use in the dtl template:
            </para>
            <programlisting format="linespecific" language="html">
                The hostname is '$Config{"FQDN"}'
                The admin email address is '$Config{"AdminEmail"}'
            </programlisting>
        </sect2>
        <sect2 id="include">
            <title>$Include{""}</title>
            <para>
                If you want to include other dtl templates into a template, use the include tag.
            </para>
            <programlisting format="linespecific" language="html">
                # include Copyright.dtl
                $Include{"Copyright"}
            </programlisting>
            <para>
                Or a other examlpe.
            </para>
            <programlisting format="linespecific" language="html">
                <html>
                <head>
                  <tilte>Some Title</tilte>
                # include css.dtl file
                $Include{"css"}
                </head>
            </programlisting>
        </sect2>
        <sect2 id="block">
            <title>block</title>
            <para>
                The block tag can be used to define block. This blocks can be used from the
                Frontend Module several times with different data params.
            </para>
            <programlisting format="linespecific" language="html">
                <table>
                <!-- dtl:block:Row -->
                    <tr>
                      <td valign="top" width="15%">
                      <b>
                        $Text{"$Data{"Key"}"}:
                      </b>
                      </td>
                      <td width="85%">
                      <div title="$QData{"Value"}">
                        $QData{"Value","160"}
                      </div>
                      </td>
                    </tr>
                <!-- dtl:block:Row -->
                </table>
            </programlisting>
            <para>
                For example you want to use this block to show email message html formated via
                a table the Frontend Module code could look like this:
            </para>
            <programlisting format="linespecific" language="html">
                # get article
                my %Article = $Self->{TicketObject}->ArticleGet(
                    ArticleID => $ArticleID,
                );

                # file blocks
                foreach (qw(From To Cc Subject)) {
                    if ($Article{$_}) {
                        $Self->{LayoutObject}->Block(
                            Name => 'Row',
                            Data => {
                                Key => $_,
                                Value => $Article{$_},
                            },
                    );
                    }
                }

                # process template
                my $HTMLOutput = $Self->{LayoutObject}->Output(
                    TemplateFile => 'AgentZoomBody',
                    Data => {
                        %Article
                    },
                );
            </programlisting>
        </sect2>
        <sect2 id="set">
            <title>set</title>
            <para>
                With the tag set you can set a variable in the dtl template.
            </para>
            <programlisting format="linespecific" language="html">
                <dtl set $Data{"Test"} = "Some Text">
            </programlisting>
        </sect2>
        <sect2 id="if">
            <title>if</title>
            <para>
                It's also possible to use a really "simple" (ne|eq|=~|!~) if condition.
            </para>
            <programlisting format="linespecific" language="html">
                <dtl if ($Text{"Lock"} eq "Lock") { $Data{"Language"} = "en"; }>
            </programlisting>
            <para>
                Or with a regexp.
            </para>
            <programlisting format="linespecific" language="html">
                <dtl if ($Text{"Lock"} =~ "/text/i") { $Data{"Lala"} = "Matched"; }>
            </programlisting>
        </sect2>
        <sect2 id="system-call">
            <title>system-call</title>
            <para>
                If you want the output of a system call back to a dtl variable.
            </para>
            <programlisting format="linespecific" language="html">
                # execute system call
                <dtl system-call $Data{"uptime"} = "uptime">
                # print
                The output of 'uptime' is: $Data{"uptime"}
            </programlisting>
            <para>
                Or a other example.
            </para>
            <programlisting format="linespecific" language="html">
                # execute system call
                <dtl system-call $Data{"procinfo"} = "procinfo | head -n1 ">
                # print
                The output of 'procinfo' is: $Data{"procinfo"}
            </programlisting>
            <para>
                Usable to set: $Data{""}, $Env{""} and $Config{""}.
            </para>
        </sect2>
    </sect1>
    <sect1 id="dtl-example">
        <title>Example</title>
        <programlisting format="linespecific" language="html">
            # set variable
            <dtl set $Data{"Test1"} = "English">

            # print variable
            Echo: $Data{"Test1"}
        </programlisting>
        <programlisting format="linespecific" language="html">
            # condition
            <dtl if ($Text{"Lock"} ne "Lock") { $Data{"Test2"} = "Not English!"; }>

            # print result
            Result: $Data{"Test1"}
        </programlisting>
    </sect1>
</chapter>
