<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: codesyntax.xml,v 1.15 2009-03-05 14:16:22 tr Exp $ -->

<chapter>
    <title>Coding Style Guide</title>
    <para>
        In order to preserve the consistent development of the OTRS project, we have set
        up a few guidelines regarding style.
    </para>
    <sect1 id="formatting">
        <title>Formatting</title>
        <para>
            TAB: We use 4 spaces. Examples for braces:
        </para>
        <para>
        <programlisting format="linespecific">
if ($Condition) {
    Foo();
}
else {
    Bar();
}

while ($Condition == 1) {
    Foo();
}
        </programlisting>
        </para>
    </sect1>
    <sect1 id="naming">
        <title>Naming</title>
        <para>
            Names and comments are written in English. Variables, Objects and Methods
            must be descriptive nouns or noun phrases with the first letter set upper case.
        </para>
        <para>
        <programlisting format="linespecific">
e. g. @TicktIDs or $Output or BuildQueueView()
        </programlisting>
        </para>
    </sect1>
    <sect1 id="source-code-header">
        <title>Source Code Header and Charset</title>
        <para>
            Attach the following header to each and every source file.
            Source files are saved in Charset ISO-8859-1.
        </para>
        <para>
        <programlisting format="linespecific">
# --
# (file name) - a short description what it does
# Copyright (C) 2001-2009 OTRS AG, http://otrs.org/
# --
# $Id: codesyntax.xml,v 1.15 2009-03-05 14:16:22 tr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
        </programlisting>
        </para>
        <para>
            The following line is updated by the CVS:
        </para>
        <para>
        <programlisting format="linespecific">
# $Id: codesyntax.xml,v 1.15 2009-03-05 14:16:22 tr Exp $
        </programlisting>
        </para>
    </sect1>
    <sect1 id="version-comments">
        <title>Version Comments</title>
        <para>
            Some functions may not be available in the current framework version. Thus, sometimes
            settings have to be changed when a new module and framework version will be released.
            If you use version comments, you can search for information (e.g. using grep) on what must be changed when
            a new version is published. The keyword for version comments is 'FRAMEWORK'
            For perl use '#' and for xml use the xml comments.
        </para>
        <para>
        <programlisting format="linespecific">
e.g. for perl-code
# FRAMEWORK-2.1: the function ID2UserName is first available in OTRS 2.1
        </programlisting>
        </para>
    </sect1>
    <sect1 id="objects-allocation">
        <title>Objects and their allocation</title>
        <para>
    In OTRS many objects are available. But it is not allowed to use every object in each script.
    Please note the following definitions
        </para>
        <para>
        <itemizedlist mark="round">
            <listitem>
                <para>don't use the LayoutObject in core modules</para>
            </listitem>
            <listitem>
                <para>don't use the ParamObject in core modules</para>
            </listitem>
            <listitem>
                <para>don't use the DBObject in frontend modules</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect1>
    <sect1 id="special-comments">
        <title>Special comments</title>
        <para>
    The only ways to create special comments are the following ways.

    Example 1 - especially for subactions of frontend modules

        </para>
        <para>
            <programlisting format="linespecific">
    # -----------------------------#
    # here starts a special area
    # -----------------------------#
            </programlisting>
        </para>
        <para>
    Example 2 - especially for customizing standard OTRS files
        </para>
        <para>
            <programlisting format="linespecific">
    # --- customizing for bsi
            </programlisting>
        </para>
    </sect1>
    <sect1 id="function-restrictions">
        <title>Restrictions for some functions</title>
        <para>
    Some functions are not useful in every script. Please pay attention
    to the following restrictions.
        </para>
        <para>
        <itemizedlist mark="round">
            <listitem>
                <para>don't use "die" and "exit" in .pm-files</para>
            </listitem>
            <listitem>
                <para>don't use the "Dumper" function in released files</para>
            </listitem>
            <listitem>
                <para>don't use "print" in .pm files</para>
            </listitem>
            <listitem>
                <para>use OTRS specific function "SystemTime2Date" instead of "localtime"</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect1>
    <sect1 id="mainobject-using">
        <title>Using of the MainObject</title>
        <para>
    Information about the MainObject
        </para>
        <para>
        <itemizedlist mark="round">
            <listitem>
                <para>initialize the MainObject in the basic .pl-file</para>
            </listitem>
            <listitem>
                <para>in .pm files only pass it to the next Object you initialize</para>
            </listitem>
            <listitem>
                <para>don't use the Perl "require" function any more</para>
            </listitem>
        </itemizedlist>
        </para>
    </sect1>
    <sect1 id="perldoc">
        <title>Perldoc</title>
        <para>
    Every function which could be used outside of its package must have a
    perldoc. It should look like the following example.
        </para>
        <para>
            <programlisting format="linespecific">
    =item SystemTime2TimeStamp()

    returns a time stamp in "yyyy-mm-dd 23:59:59" format.

        my $TimeStamp = $TimeObject->SystemTime2TimeStamp(
            SystemTime => $SystemTime,
        );

    If you need the short format "23:59:59" if the date is today (if needed).

        my $TimeStamp = $TimeObject->SystemTime2TimeStamp(
            SystemTime => $SystemTime,
            Type => 'Short',
        );
    =cut
            </programlisting>
        </para>
    </sect1>
    <sect1 id="line-length">
        <title>Length of lines</title>
        <para>
    Please see that a line of code is not langer then 80 charactars.
        </para>
    </sect1>
</chapter>
