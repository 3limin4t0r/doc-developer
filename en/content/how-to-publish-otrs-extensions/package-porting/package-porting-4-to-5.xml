<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="package-porting-4-to-5">
    <title>From OTRS 4 to 5</title>
    <para>
        This section lists changes that you need to examine when porting your package from OTRS 4 to 5.
    </para>

    <section>
        <title><filename>Kernel/Output/HTML</filename> restructured</title>
        <para>
            In OTRS 5, <filename>Kernel/Output/HTML</filename> was restructured. All Perl modules (except
            <filename>Layout.pm</filename>) were moved to subdirectories (one for every module layer). Template (theme)
            files were also moved from <filename>Kernel/Output/HTML/Standard</filename> to
            <filename>Kernel/Output/HTML/Templates/Standard</filename>. Please perform this migration also in your code.
        </para>
    </section>

    <section>
        <title>Pre-Output-Filters</title>
        <para>
            With OTRS 5 there is no support for <literal>pre</literal> output filters any more. These filters changed
            the template content before it was parsed, and that could potentially lead to bad performance issues because
            the templates could not be cached any more and had to be parsed and compiled every time.
        </para>
        <para>
            Just switch from <literal>pre</literal> to <literal>post</literal> output filters. To translate content, you
            can run <code>$LayoutObject->Translate()</code> directly. If you need other template features, just define a
            small template file for your output filter and use it to render your content before injecting it into the
            main data. It can also be helpful to use jQuery DOM operations to reorder/replace content on the screen in
            some cases instead of using regular expressions. In this case you would inject the new code somewhere in the
            page as invisible content (e. g. with the class <literal>Hidden</literal>), and then move it with jQuery to
            the correct location in the DOM and show it.
        </para>
        <para>
            To make using post output filters easier, there is also a new mechanism to request HTML comment hooks for
            certain templates/blocks. You can add in your module config XML like:
        </para>
        <para>
            <programlisting><![CDATA[
<ConfigItem
Name="Frontend::Template::GenerateBlockHooks###100-OTRSBusiness-ContactWithData"
Required="1" Valid="1">
    <Description Translatable="1">Generate HTML comment hooks for
the specified blocks so that filters can use them.</Description>
    <Group>OTRSBusiness</Group>
    <SubGroup>Core</SubGroup>
    <Setting>
        <Hash>
            <Item Key="AgentTicketZoom">
                <Array>
                    <Item>CustomerTable</Item>
                </Array>
            </Item>
        </Hash>
    </Setting>
</ConfigItem>
            ]]></programlisting>
        </para>
        <para>
            This will cause the block <literal>CustomerTable</literal> in <filename>AgentTicketZoom.tt</filename> to be
            wrapped in HTML comments each time it is rendered:
        </para>
        <para>
            <programlisting><![CDATA[
<!--HookStartCustomerTable-->
... block output ...
<!--HookEndCustomerTable-->
            ]]></programlisting>
        </para>
        <para>
            With this mechanism every package can request just the block hooks it needs, and they are consistently
            rendered. These HTML comments can then be used in your output filter for easy regular expression matching.
        </para>
    </section>

    <section>
        <title>IE 8 and IE 9</title>
        <para>
            Support for IE 8 and 9
            <ulink url="https://github.com/OTRS/otrs/commit/3b1aff21984d7b32f626df95e072337245615b36">was
            dropped</ulink>. You can remove any workarounds in your code for these platforms, as well as any old
            <literal>&lt;CSS_IE7&gt;</literal> or <literal>&lt;CSS_IE8&gt;</literal> loader tags that might still lurk
            in your XML config files.
        </para>
    </section>

    <section>
        <title>GenericInterface API change in "Ticket" connector</title>
        <para>
            The operation <code>TicketGet()</code> returns dynamic field data from ticket and articles differently than
            in OTRS 4. Now they are cleanly  separated from the rest of the static ticket and article fields - they are
            now grouped in a list called <literal>DynamicField</literal>. Please adapt any applications using this
            operation accordingly.
        </para>
        <para>
            <programlisting><![CDATA[
# changed from:

Ticket => [
{
    TicketNumber       => '20101027000001',
    Title              => 'some title',
    ...
    DynamicField_X     => 'value_x',
},
]

# to:

Ticket => [
{
    TicketNumber       => '20101027000001',
    Title              => 'some title',
    ...
    DynamicField => [
        {
            Name  => 'some name',
            Value => 'some value',
        },
    ],
},
]
            ]]></programlisting>
        </para>
    </section>
    <section>
        <title>Preview functions in dynamic statistics</title>
        <para>
            The new statistics GUI provides a preview for the current configuration. This must be implemented in the
            statistic modules and usually returns fake / random data for speed reasons. So for any dynamic (matrix)
            statistic that provides the method <code>GetStatElement()</code> you should also add a method
            <code>GetStatElementPreview()</code>, and for every dynamic (table) statistic that provides
            <code>GetStatTable()</code> you should accordingly add <code>GetStatTablePreview()</code>. Otherwise the
            preview in the new statistics GUI will not work for your statistics. You can find example implementations in
            the default OTRS statistics.
        </para>
    </section>
    <section>
        <title>HTML print discarded</title>
        <para>
            Until OTRS 5, the Perl module <literal>PDF::API2</literal> was not present on all systems. Therefore a
            fallback HTML print mode existed. With OTRS 5, the module is now bundled and HTML print was dropped.
            <code>$LayoutObject->PrintHeader()</code> and <code>PrintFooter()</code> are not available any more. Please
            remove the HTML print fallback from your code and change it to generate PDF if necessary.
        </para>
    </section>
    <section>
        <title>Translation string extraction improved</title>
        <para>
            Until OTRS 5, translatable strings could not be extracted from Perl code and Database XML definitions. This
            is now possible and makes dummy templates like <filename>AAA*.tt</filename> obsolete. Please see <link
            linkend="localization-translation-mechanism">this section</link> for details.
        </para>
    </section>

</section>
