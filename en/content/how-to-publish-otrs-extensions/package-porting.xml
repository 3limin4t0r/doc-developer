<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Package Porting</title>
    <para>
With every new minor or major version of OTRS, you need to port your package(s) and make sure they
still work with the OTRS API.
    </para>
    <section>
        <title>From OTRS 3.3 to 3.4</title>
        <para>
            This section lists changes that you need to examine when porting your package from
            OTRS 3.3 to 3.4.
        </para>

        <section>
            <title>New Object Handling</title>
            <para>
                Up to OTRS 3.4, objects used to be created both centrally and also locally and
                then handed down to all objects by passing them to the contructors.
                With OTRS 3.4 and later versions, there is now an ObjectManager that centralizes
                singleton object creation and access.
            </para>
            <para>
                This will require you first of all to change all toplevel Perl scripts (.pl files only!)
                to load and provide the ObjectManager to all OTRS objects. Let's look at otrs.CheckDB.pl from
                OTRS 3.3 as an example:

                <screen>
use strict;
use warnings;

use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);
use lib dirname($RealBin) . '/Kernel/cpan-lib';
use lib dirname($RealBin) . '/Custom';

use Kernel::Config;
use Kernel::System::Encode;
use Kernel::System::Log;
use Kernel::System::Main;
use Kernel::System::DB;

# create common objects
my %CommonObject = ();
$CommonObject{ConfigObject} = Kernel::Config->new();
$CommonObject{EncodeObject} = Kernel::System::Encode->new(%CommonObject);
$CommonObject{LogObject}    = Kernel::System::Log->new(
    LogPrefix    => 'OTRS-otrs.CheckDB.pl',
    ConfigObject => $CommonObject{ConfigObject},
);
$CommonObject{MainObject} = Kernel::System::Main->new(%CommonObject);
$CommonObject{DBObject}   = Kernel::System::DB->new(%CommonObject);
                </screen>

                We can see that a lot of code is used to load the packages and create the common
                objects that must be passed to OTRS objects to be used in the script. With OTRS 3.4,
                this looks quite different:

                <screen>
use strict;
use warnings;

use File::Basename;
use FindBin qw($RealBin);
use lib dirname($RealBin);
use lib dirname($RealBin) . '/Kernel/cpan-lib';
use lib dirname($RealBin) . '/Custom';

use Kernel::System::ObjectManager;

# create common objects
local $Kernel::OM = Kernel::System::ObjectManager->new(
    'Kernel::System::Log' => {
        LogPrefix => 'OTRS-otrs.CheckDB.pl',
    },
);

# get database object
my $DBObject = $Kernel::OM->Get('Kernel::System::DB');
                </screen>

                The new code is a bit shorter than the old. It is no longer necessary to load all the
                packages, just the ObjectManager. Subsequently <literal>$Kernel::OM->Get('My::Perl::Package')</literal>
                can be used to get instances of Objects which only have to be created once. The <literal>LogPrefix</literal> setting
                controls the log messages that Kernel::System::Log writes, it could also be omitted.
            </para>
            <para>
                From this example you can also deduce the general porting guide when it comes to accessing
                objects: don't store them in $Self any more (unless needed for specific reasons). Just fetch and use
                the objects on demand like <literal>$Kernel::OM->Get('Kernel::System::Log')->Log(...)</literal>. This also has
                the benefit that the Log object will only be created if something must be logged.
                Sometimes it could also be useful to create local variables if an object is used many times in a function,
                like <literal>$DBObject</literal> in the example above.
            </para>
            <para>
                There's not much more to know when porting packages that should be loadable by the ObjectManager.
                They should declare the modules they use (via <literal>$Kernel::OM->Get()</literal>) like this:

                <screen>
our @ObjectDependencies = (
    'Kernel::Config',
    'Kernel::System::Log',
    'Kernel::System::Main',
);
our $ObjectManagerAware = 1;
                </screen>

                The @ObjectDependencies declaration is needed for the ObjectManager to know how to create
                the object (for objects that are not yet ObjectManagerAware, i. e. don't use $Kernel::OM
                to get their dependencies), and to keep the correct order when destroying the objects.
            </para>
            <para>
                You can also see the new flag $ObjectManagerAware. This is just a signal to the ObjectManager
                that it doesn't have to create and pass the dependencies to the constructor of your object,
                because your object uses <literal>$Kernel::OM->Get()</literal> to fetch the dependencies
                on demand only.
            </para>
            <para>
                Let's look at <filename>Valid.pm</filename> from OTRS 3.3 and 3.4 to see the difference. Old:

                <screen>
package Kernel::System::Valid;

use strict;
use warnings;

use Kernel::System::CacheInternal;

...

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for my $Object (qw(DBObject ConfigObject LogObject EncodeObject MainObject)) {
        $Self->{$Object} = $Param{$Object} || die "Got no $Object!";
    }

    $Self->{CacheInternalObject} = Kernel::System::CacheInternal->new(
        %{$Self},
        Type => 'Valid',
        TTL  => 60 * 60 * 24 * 20,
    );

    return $Self;
}

...

sub ValidList {
    my ( $Self, %Param ) = @_;

    # read cache
    my $CacheKey = 'ValidList';
    my $Cache = $Self->{CacheInternalObject}->Get( Key => $CacheKey );
    return %{$Cache} if $Cache;

    # get list from database
    return if !$Self->{DBObject}->Prepare( SQL => 'SELECT id, name FROM valid' );

    # fetch the result
    my %Data;
    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {
        $Data{ $Row[0] } = $Row[1];
    }

    # set cache
    $Self->{CacheInternalObject}->Set( Key => $CacheKey, Value => \%Data );

    return %Data;
}
                </screen>

                New:

                <screen>
package Kernel::System::Valid;

use strict;
use warnings;

our @ObjectDependencies = (
    'Kernel::System::Cache',
    'Kernel::System::DB',
    'Kernel::System::Log',
);
our $ObjectManagerAware = 1;

...

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    return $Self;
}

...

sub ValidList {
    my ( $Self, %Param ) = @_;

    # read cache
    my $CacheKey = 'ValidList';
    my $Cache = $Kernel::OM->Get('Kernel::System::Cache')->Get(
        Type => 'Valid',
        Key => $CacheKey
    );
    return %{$Cache} if $Cache;

    # get database object
    my $DBObject = $Kernel::OM->Get('Kernel::System::DB');

    # get list from database
    return if !$DBObject->Prepare( SQL => 'SELECT id, name FROM valid' );

    # fetch the result
    my %Data;
    while ( my @Row = $DBObject->FetchrowArray() ) {
        $Data{ $Row[0] } = $Row[1];
    }

    # set cache
    $Kernel::OM->Get('Kernel::System::Cache')->Set(
        Type => 'Valid',
        TTL  => 60 * 60 * 24 * 20,
        Key => $CacheKey,
        Value => \%Data
    );

    return %Data;
}
                </screen>

                You can see that the dependencies are declared, the ObjectManagerAware flag is set,
                and the objects are only fetched on demand. We'll talk about the CacheInternalObject
                in the next section.
            </para>
        </section>

        <section>
            <title>CacheInternalObject removed</title>
            <para>
                Since <literal>Kernel::System::Cache</literal> is now also able to cache in-memory,
                <literal>Kernel::System::CacheInternal</literal> was dropped. Please see the previous example
                for how to migrate your code: you need to use the global Cache object and pass the <literal>Type</literal>
                and <literal>TTL</literal> (<literal>TTL</literal>only for <literal>Set()</literal>) settings with every call.
            </para>
        </section>

        <section>
            <title>New Template Engine</title>
            <para>
                With OTRS 3.4, the DTL template engine was replaced by Template::Toolkit.
                Please refer to the <link linkend="TemplatingMechanism">Templating section</link>
                for details on how the new template syntax looks like.
            </para>
            <para>
                These are the changes that you need to apply when converting existing DTL templates
                to the new Template::Toolkit syntax:
            </para>

            <table>
                <caption>Template Changes from OTRS 3.3 to 3.4</caption>
                <thead>
                     <tr>
                         <td>DTL Tag</td>
                         <td>Template::Toolkit tag</td>
                     </tr>
                 </thead>
                 <tbody>
                    <tr>
                        <td><literal>$Data{"Name"}</literal></td>
                        <td><literal>[% Data.Name %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Data{"Complex-Name"}</literal></td>
                        <td><literal>[% Data.item("Complex-Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QData{"Name"}</literal></td>
                        <td><literal>[% Data.Name | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QData{"Name", "$Length"}</literal></td>
                        <td><literal>[% Data.Name | truncate($Length) | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$LQData{"Name"}</literal></td>
                        <td><literal>[% Data.Name | uri %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"Text", "$Length"}</literal></td>
                        <td>cannot be replaced directly, see examples below</td></tr>
                    <tr>
                        <td><literal>$Quote{"$Config{"Name"}"}</literal></td>
                        <td><literal>[% Config("Name") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Data{"Name"}", "$Length"}</literal></td>
                        <td><literal>[% Data.Name | truncate($Length) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Data{"Content"}","$QData{"MaxLength"}"}</literal></td>
                        <td><literal>[% Data.Name | truncate(Data.MaxLength) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Text{"$Data{"Content"}"}","$QData{"MaxLength"}"}</literal></td>
                        <td><literal>[% Data.Content  | Translate | truncate(Data.MaxLength) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Config{"Name"}</literal></td>
                        <td><literal>[% Config("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Env{"Name"}</literal></td>
                        <td><literal>[% Env("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QEnv{"Name"}</literal></td>
                        <td><literal>[% Env("Name") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Text{"Text with %s placeholders", "String"}</literal></td>
                        <td><literal>[% Translate("Text with %s placeholders", "String") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Text{"Text with dynamic %s placeholders", "$QData{Name}"}</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>'$JSText{"Text with dynamic %s placeholders", "$QData{Name}"}'</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | JSON %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>"$JSText{"Text with dynamic %s placeholders", "$QData{Name}"}"</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | JSON %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$TimeLong{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("TimeLong") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$TimeShort{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("TimeShort") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Date{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("Date") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:block:Name --&gt;...&lt;-- dtl:block:Name --&gt;</literal></td>
                        <td><literal>[% RenderBlockStart("Name") %]...[% RenderBlockEnd("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:js_on_document_complete --&gt;...&lt;-- dtl:js_on_document_complete --&gt;</literal></td>
                        <td><literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:js_on_document_complete_placeholder --&gt;</literal></td>
                        <td><literal>[% PROCESS JSOnDocumentCompleteInsert %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Include{"Copyright"}</literal></td>
                        <td><literal>[% InsertTemplate("Copyright") %]</literal></td>
                    </tr>
                </tbody>
            </table>

            <para>
                There are a few more things to note when porting your code to the new template engine:

                <itemizedlist>
                    <listitem>
                        <para>
                            All language files must now have the <literal>use utf8;</literal> pragma.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>Layout::Get()</literal> is now deprecated. Please use <literal>Layout::Translate()</literal> instead.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            All occurrences of <literal>$Text{""}</literal> in Perl code must now be replaced by calls to <literal>Layout::Translate()</literal>.
                        </para>
                        <para>This is becase in DTL there was no separation between template and data. If DTL-Tags were inserted as part of some data, the engine would still parse them. This is no longer the case in Template::Toolkit, there is a strict separation of template and data.
                        </para>
                        <para>
                            Hint: should you ever need to interpolate tags in data, you can use the <literal>Interpolate</literal> filter for this (<literal>[% Data.Name | Interpolate %]</literal>). This is not recommended for security and performance reasons!
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            For the same reason, dynamically injected JavaScript that was enclosed by <literal>dtl:js_on_document_complete</literal> will not work any more. Please use <literal>Layout::AddJSOnDocumentComplete()</literal> instead of injecting this as template data.
                        </para>
                        <para>
                            You can find an example for this in <filename>Kernel/System/DynamicField/Driver/BaseSelect.pm</filename>.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section>
            <title>New FontAwesome version</title>
            <para>
                With OTRS 3.4, we've also updated FontAwesome to a new version. As a consequence, the icons css classes have changed. While previously icons were defined by using a schema like <literal>icon-{iconname}</literal>, it is now <literal>fa fa-{iconname}</literal>.
            </para>
            <para>
                Due to this change, you need to make sure to update all custom frontend module registrations which make use of icons (e.g. for the top navigation bar) to use the new schema. This is also true for templates where you're using icon elements like <literal>&lt;i class="icon-{iconname}"&gt;&lt;/i&gt;</literal>.
            </para>
        </section>
    </section>
</section>
