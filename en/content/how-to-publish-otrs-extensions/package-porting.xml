<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Package Porting</title>
    <para>
With every new minor or major version of OTRS, you need to port your package(s) and make sure they
still work with the OTRS API.
    </para>
    <section>
        <title>From OTRS 3.3 to 3.4</title>
        <para>
            This section lists changes that you need to examine when porting your package from
            OTRS 3.3 to 3.4.
        </para>

        <section>
            <title>New Template Engine</title>
            <para>
                With OTRS 3.4, the DTL template engine was replaced by Template::Toolkit.
                Please refer to the <link linkend="TemplatingMechanism">Templating section</link>
                for details on how the new template syntax looks like.
            </para>
            <para>
                These are the changes that you need to apply when converting existing DTL templates
                to the new Template::Toolkit syntax:
            </para>

            <table>
                <caption>Template Changes from OTRS 3.3 to 3.4</caption>
                <thead>
                     <tr>
                         <td>DTL Tag</td>
                         <td>Template::Toolkit tag</td>
                     </tr>
                 </thead>
                 <tbody>
                    <tr>
                        <td><literal>$Data{"Name"}</literal></td>
                        <td><literal>[% Data.Name %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Data{"Complex-Name"}</literal></td>
                        <td><literal>[% Data.item("Complex-Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QData{"Name"}</literal></td>
                        <td><literal>[% Data.Name | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QData{"Name", "$Length"}</literal></td>
                        <td><literal>[% Data.Name | truncate($Length) | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$LQData{"Name"}</literal></td>
                        <td><literal>[% Data.Name | uri %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"Text", "$Length"}</literal></td>
                        <td>cannot be replaced directly, see examples below</td></tr>
                    <tr>
                        <td><literal>$Quote{"$Config{"Name"}"}</literal></td>
                        <td><literal>[% Config("Name") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Data{"Name"}", "$Length"}</literal></td>
                        <td><literal>[% Data.Name | truncate($Length) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Data{"Content"}","$QData{"MaxLength"}"}</literal></td>
                        <td><literal>[% Data.Name | truncate(Data.MaxLength) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Quote{"$Text{"$Data{"Content"}"}","$QData{"MaxLength"}"}</literal></td>
                        <td><literal>[% Data.Content  | Translate | truncate(Data.MaxLength) | html  %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Config{"Name"}</literal></td>
                        <td><literal>[% Config("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Env{"Name"}</literal></td>
                        <td><literal>[% Env("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$QEnv{"Name"}</literal></td>
                        <td><literal>[% Env("Name") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Text{"Text with %s placeholders", "String"}</literal></td>
                        <td><literal>[% Translate("Text with %s placeholders", "String") | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Text{"Text with dynamic %s placeholders", "$QData{Name}"}</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | html %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>'$JSText{"Text with dynamic %s placeholders", "$QData{Name}"}'</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | JSON %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>"$JSText{"Text with dynamic %s placeholders", "$QData{Name}"}"</literal></td>
                        <td><literal>[% Translate("Text with dynamic %s placeholders", Data.Name) | JSON %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$TimeLong{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("TimeLong") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$TimeShort{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("TimeShort") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Date{"$Data{"CreateTime"}"}</literal></td>
                        <td><literal>[% Data.CreateTime | Localize("Date") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:block:Name --&gt;...&lt;-- dtl:block:Name --&gt;</literal></td>
                        <td><literal>[% RenderBlockStart("Name") %]...[% RenderBlockEnd("Name") %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:js_on_document_complete --&gt;...&lt;-- dtl:js_on_document_complete --&gt;</literal></td>
                        <td><literal>[% WRAPPER JSOnDocumentComplete %]...[% END %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>&lt;-- dtl:js_on_document_complete_placeholder --&gt;</literal></td>
                        <td><literal>[% PROCESS JSOnDocumentCompleteInsert %]</literal></td>
                    </tr>
                    <tr>
                        <td><literal>$Include{"Copyright"}</literal></td>
                        <td><literal>[% InsertTemplate("Copyright") %]</literal></td>
                    </tr>
                </tbody>
            </table>

            <para>
                There are a few more things to note when porting your code to the new template engine:

                <itemizedlist>
                    <listitem>
                        <para>
                            All language files must now have the <literal>use utf8;</literal> pragma.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>Layout::Get()</literal> is now deprecated. Please use <literal>Layout::Translate()</literal> instead.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            All occurrences of <literal>$Text{""}</literal> in Perl code must now be replaced by calls to <literal>Layout::Translate()</literal>.
                        </para>
                        <para>This is becase in DTL there was no separation between template and data. If DTL-Tags were inserted as part of some data, the engine would still parse them. This is no longer the case in Template::Toolkit, there is a strict separation of template and data.
                        </para>
                        <para>
                            Hint: should you ever need to interpolate tags in data, you can use the <literal>Interpolate</literal> filter for this (<literal>[% Data.Name | Interpolate %]</literal>). This is not recommended for security and performance reasons!
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            For the same reason, dynamically injected JavaScript that was enclosed by <literal>dtl:js_on_document_complete</literal> will not work any more. Please use <literal>Layout::AddJSOnDocumentComplete()</literal> instead of injecting this as template data.
                        </para>
                        <para>
                            You can find an example for this in <filename>Kernel/System/DynamicField/Driver/BaseSelect.pm</filename>.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section>
            <title>New FontAwesome version</title>
            <para>
                With OTRS 3.4, we've also updated FontAwesome to a new version. As a consequence, the icons css classes have changed. While previously icons were defined by using a schema like <literal>icon-{iconname}</literal>, it is now <literal>fa fa-{iconname}</literal>.
            </para>
            <para>
                Due to this change, you need to make sure to update all custom frontend module registrations which make use of icons (e.g. for the top navigation bar) to use the new schema. This is also true for templates where you're using icon elements like <literal>&lt;i class="icon-{iconname}"&gt;&lt;/i&gt;</literal>.
            </para>
        </section>
    </section>
</section>
