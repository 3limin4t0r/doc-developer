<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Date and Time</title>
    <para>
OTRS comes with its own package to handle date and time which ensures correct calculation and storage of date and time.
    </para>

    <section id="date-time-intro">
        <title>Introduction</title>
        <para>
Date and time are represented by an object of <literal>Kernel::System::DateTime</literal>.
Every DateTime object holds its own date, time and time zone information.
In contrast to the now deprecated <literal>Kernel::System::Time</literal> package, this means that you can and should create a DateTime object for every date/time you want to use.
        </para>
    </section>

    <section id="date-time-creation">
        <title>Creation of a DateTime object</title>
        <para>
The object manager of OTRS has been extended by a <literal>Create</literal> method to support packages for which more than one instance can be created:
            <programlisting format="linespecific"><![CDATA[
my $DateTimeObject = $Kernel::OM->Create(
    'Kernel::System::DateTime',
    ObjectParams => {
        TimeZone => 'Europe/Berlin'
    },
);
            ]]></programlisting>
The example above will create a DateTime object for the current date and time in time zone Europe/Berlin. There are more options to create a DateTime object (time components, string, time stamp, cloning), see POD of <literal>Kernel::System::DateTime</literal>.
        </para>
        <note>
            <para>
You will get an error if you try to retrieve a DateTime object via <literal>$Kernel::OM->Get('Kernel::System::DateTime')</literal>.
            </para>
        </note>
    </section>

    <section id="date-time-time-zones">
        <title>Time zones</title>
        <para>
Time offsets in hours (+2, -10, etc.) have been replaced by time zones (Europe/Berlin, America/New_York, etc.).
The conversion between time zones is completely encapsulated within a DateTime object. If you want to convert to another time zone, simply use the following code:
            <programlisting format="linespecific"><![CDATA[
$DateTimeObject->ToTimeZone( TimeZone => 'Europe/Berlin' );
            ]]></programlisting>
        </para>
        <para>
There is a new SysConfig option <literal>OTRSTimeZone</literal>. This setting defines the time zone that OTRS uses internally to store date and time within the database.
        </para>
        <note>
            <para>
You have to ensure to convert a DateTime object to the OTRS time zone before it gets stored in the database (there's a convenient method for this: <literal>ToOTRSTimeZone()</literal>). An exception could be that you explicitly want a database column to hold a date/time in a specific time zone. But be aware that the database itself won't provide time zone information by itself when retrieving it.
            </para>
        </note>
        <note>
            <para>
<literal>TimeZoneList()</literal> of Kernel::System::DateTime provides a list of available time zones.
            </para>
        </note>
    </section>

    <section id="date-time-method-summary">
        <title>Method summary</title>
        <para>
The <literal>Kernel::System::DateTime</literal> package provides the following methods (this is only a selection, see source code for details).
        </para>
        <section id="date-time-methods-creation">
            <title>Object creation methods</title>
            <para>
A DateTime object can be created either via the object manager's <literal>Create()</literal> method or by cloning another DateTime object with its <literal>Clone()</literal> method.
            </para>
        </section>
        <section id="date-time-methods-get">
            <title>Get method</title>
            <para>
With <literal>Get()</literal> all data of a DateTime object will be returned as a hash (date and time components including day name, etc. as well as time zone).
            </para>
        </section>
        <section id="date-time-methods-set">
            <title>Set method</title>
            <para>
With <literal>Set()</literal> you can either change certain components of the DateTime object (year, month, day, hour, minute, second) or you can set a date and time based on a given string ('2016-05-24 23:04:12').
Note that you cannot change the time zone with this method.
            </para>
        </section>
        <section id="date-time-methods-time-zone">
            <title>Time zone methods</title>
            <para>
To change the time zone of a DateTime object use method <literal>ToTimeZone()</literal> or as a shortcut for converting to OTRS time zone <literal>ToOTRSTimeZone()</literal>.
            </para>
            <para>
To retrieve the configured OTRS time zone or user default time zone, always use method <literal>OTRSTimeZoneGet()</literal> or <literal>UserDefaultTimeZoneGet()</literal>. Never retrieve these manually via Kernel::Config.
            </para>
        </section>
        <section id="date-time-methods-comparison">
            <title>Comparison methods</title>
            <para>
<literal>IsNewerThan()</literal>, <literal>IsOlderThan()</literal> and <literal>Equals()</literal> can be used to compare two DateTime objects. <literal>Compare()</literal> is usable in Perl's sort context as it returns -1, 0 or 1.
            </para>
        </section>
    </section>

    <section id="date-time-deprecated-time-package">
        <title>Deprecated package Kernel::System::Time</title>
        <para>
The now deprecated package <literal>Kernel::System::Time</literal> has been extented to fully support time zones instead of time offsets. This has been done to ensure that existing code works without (bigger) changes.
However, there is a case in which you have to change existing code. If you have code that uses the old time offsets to calculate a new date/time or a difference, you have to migrate this code to use the new DateTime object.
Example (old code):
        <programlisting format="linespecific"><![CDATA[
my $TimeObject     = $Kernel::OM->Get('Kernel::System::Time'); # Assume a time offset of 0 for this time object
my $SystemTime     = $TimeObject->TimeStamp2SystemTime( String => '2004-08-14 22:45:00' );
my $UserTimeZone   = '+2'; # normally retrieved via config or param
my $UserSystemTime = $SystemTime + $UserTimeZone * 3600;
my $UserTimeStamp  = $TimeObject->SystemTime2TimeStamp( SystemTime => $UserSystemTime );
        ]]></programlisting>
Example (new code):
        <programlisting format="linespecific"><![CDATA[
my $DateTimeObject = $Kernel::OM->Create('Kernel::System::DateTime'); # This implicitly sets the OTRS time zone
my $UserTimeZone   = 'Europe/Berlin'; # normally retrieved via config or param
$DateTimeObject->ToTimeZone( TimeZone => $UserTimeZone );
my $UserSystemTime = $DateTimeObject->ToEpoch();
my $UserTimeStamp  = $DateTimeObject->ToString();
        ]]></programlisting>
        </para>
    </section>

</section>
