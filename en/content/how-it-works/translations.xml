<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="localization-translation-mechanism">
    <title>Localization / Translation Mechanism</title>

    <para>
        There are four steps needed to translate / localize software: marking localizable strings in the source files,
        generating the translation database/file, the translation process itself, and the usage of translated data
        within the code.
    </para>

    <section>
        <title>Marking translatable strings in the source files</title>
        <para>
            In Perl code, all literal strings to be translated are automatically marked for translation:
            <code>$LanguageObject->Translate('My string %s', $Data)</code> will mark 'My string %s' for translation.
            If you need to mark strings, but NOT translate them in the code yet, you can use the NOOP method
            <code>Kernel::Langauge::Translatable()</code>.
        </para>
        <para>
            <programlisting><![CDATA[
package MyPackage;

use strict;
use warnings;

use Kernel::Language (qw(Translatable));

...

my $UntranslatedString = Translatable('My string %s');
                ]]></programlisting>
        </para>
        <para>
            In Template files, all literal strings enclosed in
            <link linkend="translate-tag">the <code>Translate()</code>-Tag</link>
            are automatically marked for extraction: <code>[% Translate('My string %s', Data.Data )%]</code>.
        </para>
        <para>
            In SysConfig and Database XML files you can mark strings for extraction with the
            <literal>Translatable="1"</literal> attribute.
        </para>
        <para>
            <programlisting><![CDATA[
# Database XML
<Insert Table="groups">
    <Data Key="id" Type="AutoIncrement">1</Data>
    ...
    <Data Key="comments" Type="Quote" Translatable="1">Group for default access.</Data>
    ...
</Insert>

# SysConfig XML
<Setting>
    <Option SelectedID="0">
        <Item Key="0" Translatable="1">No</Item>
        <Item Key="1" Translatable="1">Yes</Item>
    </Option>
</Setting>
                ]]></programlisting>
        </para>
    </section>
    <section>
        <title>Collecting translatable strings into the translation database</title>
        <para>
            The console command <filename>otrs.Console.pl Dev::Tools::TranslationsUpdate</filename> is used to extract all translatable strings from the source files. These will be collected and written into the translation files.
        </para>
        <para>
            For the OTRS framework and all extension modules that also use Transifex for managing the translations, .pot and .po files are written. These files are used to push the translatable strings to Transifex and pull the translations from there.
        </para>
        <para>
            But OTRS requires the translations to be in Perl files for speed reasons. These files will also be generated by
            <filename>otrs.Console.pl Dev::Tools::TranslationsUpdate</filename>.
            There are two different translation cache file types which are used in the following
            order. If a word/sentence is redefined in a translation file, the last definition will
            be used.
        </para>
        <orderedlist numeration="arabic">
            <listitem>
                <para>
                    Default Framework Translation File
                </para>
                <para>
                    <filename>Kernel/Language/$Language.pm</filename>
                </para>
            </listitem>
            <listitem>
                <para>
                    Custom Translation File
                </para>
                <para>
                    <filename>Kernel/Language/$Language_Custom.pm</filename>
                </para>
            </listitem>
        </orderedlist>
        <section id="default-framework-translation-file2">
            <title>Default Framework Translation File</title>
            <para>
                The Default Framework Translation File includes the basic translations. The
                following is an example of a Default Framework Translation File.
            </para>
            <para>
                Format:
            </para>
            <para>
                <programlisting><![CDATA[
package Kernel::Language::de;

use strict;
use warnings;

use vars qw(@ISA $VERSION);

sub Data {
    my $Self = shift;

    # $$START$$

    # possible charsets
    $Self->{Charset} = ['iso-8859-1', 'iso-8859-15', ];
    # date formats (%A=WeekDay;%B=LongMonth;%T=Time;%D=Day;%M=Month;%Y=Jear;)
    $Self->{DateFormat} = '%D.%M.%Y %T';
    $Self->{DateFormatLong} = '%A %D %B %T %Y';
    $Self->{DateFormatShort} = '%D.%M.%Y';
    $Self->{DateInputFormat} = '%D.%M.%Y';
    $Self->{DateInputFormatLong} = '%D.%M.%Y - %T';

    $Self->{Translation} = {
    # Template: AAABase
    'Yes' => 'Ja',
    'No' => 'Nein',
    'yes' => 'ja',
    'no' => 'kein',
    'Off' => 'Aus',
    'off' => 'aus',
    };
    # $$STOP$$
    return 1;
}

1;
                ]]></programlisting>
            </para>
        </section>
        <section id="custom-translation-file">
            <title>Custom Translation File</title>
            <para>
                The Custom Translation File is read out last and so its translation
                which will be used. If you want to add your own wording to your installation,
                create this file for your language.
            </para>
            <para>
                Format:
            </para>
            <para>
                <programlisting><![CDATA[
package Kernel::Language::xx_Custom;

use strict;
use warnings;

use vars qw(@ISA $VERSION);

sub Data {
    my $Self = shift;

    # $$START$$

    # own translations
    $Self->{Translation}->{'Lock'} = 'Lala';
    $Self->{Translation}->{'Unlock'} = 'Lulu';

    # $$STOP$$
    return 1;
}

1;
                ]]></programlisting>
            </para>
        </section>
    </section>
    <section>
        <title>The translation process itself</title>
        <para>
            OTRS uses Transifex to manage the translation process.
            Please see <link linkend="translate">this section</link> for details.
        </para>
    </section>
    <section>
        <title>Using the translated data from the code</title>
        <para>
            You can use the method <code>$LanguageObject->Translate()</code> to translate strings at runtime from Perl
            code, and <link linkend="translate-tag">the <code>Translate()</code>-Tag</link> in templates.
        </para>
    </section>
</section>
