<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Database Mechanism</title>
    <para>
OTRS comes with a database layer that supports different databases.
    </para>
    <section id="database-how-it-works">
        <title>How it works</title>
        <para>
The database layer (<literal>Kernel::System::DB</literal>) has two input options: SQL and XML.
        </para>
        <section id="database-sql">
            <title>SQL</title>
            <para>
The SQL interface should be used for normal database actions (SELECT, INSERT,
UPDATE, ...). It can be used like a normal Perl DBI interface.
            </para>
            <section id="database-sql-do">
            <title>INSERT/UPDATE/DELETE</title>
            <programlisting format="linespecific"><![CDATA[
$Kernel::OM->Get('Kernel::System::DB')->Do(
    SQL=> "INSERT INTO table (name, id) VALUES ('SomeName', 123)",
);

$Kernel::OM->Get('Kernel::System::DB')->Do(
    SQL=> "UPDATE table SET name = 'SomeName', id = 123",
);

$Kernel::OM->Get('Kernel::System::DB')->Do(
    SQL=> "DELETE FROM table WHERE id = 123",
);
            ]]></programlisting>
            </section>
            <section id="database-sql-select">
            <title>SELECT</title>
            <programlisting format="linespecific"><![CDATA[
my $SQL = "SELECT id FROM table WHERE tn = '123'";

$Kernel::OM->Get('Kernel::System::DB')->Prepare(SQL => $SQL, Limit => 15);

while (my @Row = $Kernel::OM->Get('Kernel::System::DB')->FetchrowArray()) {
    $Id = $Row[0];
}
return $Id;
            ]]></programlisting>
            <note>
                <para>
Take care to use Limit as param and not in the SQL string because
not all databases support LIMIT in SQL strings.
                </para>
            </note>
            <programlisting format="linespecific"><![CDATA[
my $SQL = "SELECT id FROM table WHERE tn = ? AND group = ?";

$Kernel::OM->Get('Kernel::System::DB')->Prepare(
    SQL   => $SQL,
    Limit => 15,
    Bind  => [ $Tn, $Group ],
);

while (my @Row = $Kernel::OM->Get('Kernel::System::DB')->FetchrowArray()) {
    $Id = $Row[0];
}
return $Id;
            ]]></programlisting>
            <note>
                <para>
Use the Bind attribute where ever you can, especially for long statements. If
you use Bind you do not need the function <code>Quote()</code>.
                </para>
            </note>
            </section>
            <section id="database-sql-quote">
            <title>QUOTE</title>
                <para>
                    String:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $QuotedString = $Kernel::OM->Get('Kernel::System::DB')->Quote("It's a problem!");
                    ]]></programlisting>
                </para>
                <para>
                    Integer:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $QuotedInteger = $Kernel::OM->Get('Kernel::System::DB')->Quote('123', 'Integer');
                    ]]></programlisting>
                </para>
                <para>
                    Number:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $QuotedNumber = $Kernel::OM->Get('Kernel::System::DB')->Quote('21.35', 'Number');
                    ]]></programlisting>
                </para>
                <note>
                    <para>
Please use the Bind attribute instead of <code>Quote()</code> where ever you can.
                    </para>
                </note>
            </section>
        </section>
        <section id="database-xml">
            <title>XML</title>
            <para>
The XML interface should be used for INSERT, CREATE TABLE, DROP TABLE and ALTER TABLE.
As this syntax is different from database to database, using it makes sure that
you write applications that can be used in all of them.
            </para>
            <note>
                <para>
The &lt;Insert&gt; syntax has changed in >=2.2. Values are now used in the tag content (not longer in an attribute).
                </para>
            </note>
            <section id="database-xml-insert">
            <title>INSERT</title>
            <programlisting format="linespecific"><![CDATA[
<Insert Table="some_table">
    <Data Key="id">1</Data>
    <Data Key="description" Type="Quote">exploit</Data>
</Insert>
            ]]></programlisting>
            </section>
            <section id="database-xml-create">
            <title>CREATE TABLE</title>
            <para>
Possible data types are: BIGINT, SMALLINT, INTEGER, VARCHAR (Size=1-1000000), DATE (Format: yyyy-mm-dd hh:mm:ss) and LONGBLOB.
            </para>
            <programlisting format="linespecific"><![CDATA[
<TableCreate Name="calendar_event">
    <Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="BIGINT"/>
    <Column Name="title" Required="true" Size="250" Type="VARCHAR"/>
    <Column Name="content" Required="false" Size="250" Type="VARCHAR"/>
    <Column Name="start_time" Required="true" Type="DATE"/>
    <Column Name="end_time" Required="true" Type="DATE"/>
    <Column Name="owner_id" Required="true" Type="INTEGER"/>
    <Column Name="event_status" Required="true" Size="50" Type="VARCHAR"/>
    <Index Name="calendar_event_title">
        <IndexColumn Name="title"/>
    </Index>
    <Unique Name="calendar_event_title">
        <UniqueColumn Name="title"/>
    </Unique>
    <ForeignKey ForeignTable="users">
        <Reference Local="owner_id" Foreign="id"/>
    </ForeignKey>
</TableCreate>
            ]]></programlisting>
            </section>
            <section id="database-xml-drop">
            <title>DROP TABLE</title>
            <programlisting format="linespecific"><![CDATA[
<TableDrop Name="calendar_event"/>
            ]]></programlisting>
            </section>
            <section id="database-xml-alter">
            <title>ALTER TABLE</title>
            <para>
            The following shows an example of add, change and drop columns.
            </para>
            <programlisting format="linespecific"><![CDATA[
<TableAlter Name="calendar_event">
    <ColumnAdd Name="test_name" Type="varchar" Size="20" Required="true"/>

    <ColumnChange NameOld="test_name" NameNew="test_title" Type="varchar" Size="30" Required="true"/>

    <ColumnChange NameOld="test_title" NameNew="test_title" Type="varchar" Size="100" Required="false"/>

    <ColumnDrop Name="test_title"/>

    <IndexCreate Name="index_test3">
        <IndexColumn Name="test3"/>
    </IndexCreate>

    <IndexDrop Name="index_test3"/>

    <UniqueCreate Name="uniq_test3">
        <UniqueColumn Name="test3"/>
    </UniqueCreate>

    <UniqueDrop Name="uniq_test3"/>
</TableAlter>
            ]]></programlisting>
            <para>
            The next shows an example how to rename a table.
            </para>
            <programlisting format="linespecific"><![CDATA[
<TableAlter NameOld="calendar_event" NameNew="calendar_event_new"/>
            ]]></programlisting>
            </section>
            <section id="database-xml-code">
            <title>Code to process XML</title>
            <programlisting format="linespecific"><![CDATA[
my @XMLARRAY = @{$Self->ParseXML(String => $XML)};

my @SQL = $Kernel::OM->Get('Kernel::System::DB')->SQLProcessor(
    Database => \@XMLARRAY,
);
push(@SQL, $Kernel::OM->Get('Kernel::System::DB')->SQLProcessorPost());

for (@SQL) {
    $Kernel::OM->Get('Kernel::System::DB')->Do(SQL => $_);
}
            ]]></programlisting>
            </section>
        </section>
    </section>
    <section id="database-driver">
        <title>Database Drivers</title>
        <para>
            The database drivers are located under <filename>$OTRS_HOME/Kernel/System/DB/*.pm</filename>.
        </para>
    </section>
    <section id="database-supported">
        <title>Supported Databases</title>
        <para>
        <itemizedlist mark="round">
            <listitem>
                <para>MySQL</para>
            </listitem>
            <listitem>
                <para>PostgreSQL</para>
            </listitem>
            <listitem>
                <para>Oracle</para>
            </listitem>
            <listitem>
                <para>Microsoft SQL Server (MSSQL)</para>
            </listitem>
        </itemizedlist>
        </para>
    </section>
</section>
