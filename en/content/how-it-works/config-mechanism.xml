<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section>
    <title>Config Mechanism</title>
    <section id="default-config">
        <title>Default Config</title>
        <para>
            There are different default config files. The main one, which comes with the
            framework, is <filename>Kernel/Config/Defaults.pm</filename>
        </para>
        <para>
            This file should be left untouched as it is automatically updated on framework updates.
            There is also a sub directory where you can store the default config files
            for your own modules. These files are used automatically.
        </para>
        <para>
            The directory is located at <filename>$OTRS_HOME/Kernel/Config/Files/*.pm</filename>
            and could look as follows:
        </para>
        <para>
            <filename>Kernel/config/Files/Calendar.pm</filename>
        </para>
        <para>
        <programlisting><![CDATA[
# module reg and nav bar
$Self->{'Frontend::Module'}->{'AgentCalendar'} = {
    Description => 'Calendar',
    NavBarName => 'Ticket',
    NavBar => [
        {
            Description => 'Calendar',
            Name => 'Calendar',
            Image => 'calendar.png',
            Link => 'Action=AgentCalendar',
            NavBar => 'Ticket',
            Prio => 5000,
            AccessKey => 'c',
        },
    ],
};

# show online customers
$Self->{'Frontend::NotifyModule'}->{'80-ShowCalendarEvents'} = {
    Module => 'Kernel::Output::HTML::NotificationCalendar',
};
        ]]></programlisting>
        </para>
    </section>

    <section id="accessing-config-options">
        <title>Accessing Config Options at Runtime</title>
        <para>
            You can read and write (for one request) the config options via the core module "Kernel::Config".
        </para>
        <para>
            If you want to read a config option:
        <programlisting><![CDATA[
my $ConfigOption = Kernel::OM->Get('Kernel::Config')->Get('Prefix::Option');
        ]]></programlisting>
            If you want to change a config option at runtime and just for this one request/process:
        <programlisting><![CDATA[
Kernel::OM->Get('Kernel::Config')->Set(
    Key => 'Prefix::Option'
    Value => 'SomeNewValue',
);
        ]]></programlisting>
        </para>
    </section>

    <section id="xml-config">
        <title>XML Config Options</title>
        <para>
            XML config files are located at <filename>$OTRS_HOME/Kernel/Config/Files/*.xml</filename>.
            Each config file has the following layout:
        <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<otrs_config version="1.0" init="Changes">

    <!--  config items will be here -->

</otrs_config>
        ]]></programlisting>
        </para>
        <para>
            The "init" attribute describes where the config options should be loaded. There are different levels available and will be loaded/overloaded in the following order: "Framework" (for framework settings e. g. session option), "Application" (for application settings e. g. ticket options), "Config" (for extensions to existing applications e. g. ITSM options) and "Changes" (for custom development e. g. to overwrite framework or ticket options).
        </para>
        <para>
            If you want to add config options, here is an example:
        <programlisting><![CDATA[
<ConfigItem Name="Ticket::Hook" Required="1" Valid="1" ConfigLevel="300">
    <Description Lang="en">The identifyer for a ticket. The default is Ticket#.</Description>
    <Description Lang="de">Ticket-Identifikator. Als Standard wird Ticket# verwendet.</Description>
    <Group>Ticket</Group>
    <SubGroup>Core::Ticket</SubGroup>
    <Setting>
        <String Regex="">Ticket#</String>
    </Setting>
</ConfigItem>
        ]]></programlisting>
        </para>
        <para>
            If "required" is set to "1", the config variable is included and cannot be disabled.
        </para>
        <para>
            If "valid" is set to "1", the config variable is active. If it is set to "0", the config variable is inactive.
        </para>
        <para>
            If the optional attribute "ConfigLevel" is set, the config variable might not be edited by the administrator,
            depending on his own config level. The config variable "ConfigLevel" sets the level of technical experience
            of the administrator. It can be 100 (Expert), 200 (Advanced) or 300 (Beginner).
            As a guideline which config level should be given to an option, it is recommended that all options
            having to do with the configuration of externel interaction, like Sendmail, LDAP, SOAP,
            and others should get a config level of at least 200 (Advanced).
        </para>
        <para>
            The config variable is defined in the "setting" element.
        </para>

        <section id="xml-config-variable">
            <title>Types of XML Config Variables</title>
            <para>
                The XML config settings support various types of variables.
            </para>
            <section id="xml-config-string">
                <title>String</title>
                <para>
                    A config element for numbers and single-line strings.
                    Checking the validity with a regex is possible.
                    The check attribute checks elements on the file system.
                    This contains files and directories.
                <programlisting><![CDATA[
<Setting>
    <String Regex="" Check="File"></String>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-textarea">
                <title>Textarea</title>
                <para>
                    A config element for multiline text.
                <programlisting><![CDATA[
<Setting>
    <TextArea Regex=""></TextArea>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-option">
                <title>Options</title>
                <para>
                    This config element offers preset values as a pull-down menu.
                <programlisting><![CDATA[
<Setting>
    <Option SelectedID="Key">
        <Item Key=""></Item>
        <Item Key=""></Item>
    </Option>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-array">
                <title>Array</title>
                <para>
                    With this config element arrays can be displayed.
                <programlisting><![CDATA[
<Setting>
    <Array>
        <Item></Item>
        <Item></Item>
    </Array>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-hash">
                <title>Hash</title>
                <para>
                    With this config element hashes can be displayed.
                <programlisting><![CDATA[
<Setting>
    <Hash>
        <Item Key=""></Item>
        <Item Key=""></Item>
    </Hash>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-subhash">
                <title>Hash with SubArray, SubHash</title>
                <para>
                    A hash can contain content, arrays or hashes.
                <programlisting><![CDATA[
<Setting>
    <Hash>
        <Item Key=""></Item>
        <Item Key="">
            <Hash>
                <Item Key=""></Item>
                <Item Key=""></Item>
            </Hash>
        </Item>
        <Item Key="">
            <Array>
                <Item></Item>
                <Item></Item>
            </Array>
        </Item>
        <Item Key=""></Item>
    </Hash>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-navbar">
                <title>FrontendModuleReg (NavBar)</title>
                <para>
                    Module registration for Agent Interface.
                <programlisting><![CDATA[
<Setting>
    <FrontendModuleReg>
        <Group>group1</Group>
        <Group>group2</Group>
        <Description>Logout</Description>
        <Title></Title>
        <NavBarName></NavBarName>
        <NavBar>
            <Description>Logout</Description>
            <Name>Logout</Name>
            <Image>exit.png</Image>
            <Link>Action=Logout</Link>
            <NavBar></NavBar>
            <Type></Type>
            <Block>ItemPre</Block>
            <AccessKey>l</AccessKey>
            <Prio>100</Prio>
        </NavBar>
    </FrontendModuleReg>
</Setting>
                ]]></programlisting>
                </para>
            </section>
            <section id="xml-config-navbarmodule">
                <title>FrontendModuleReg (NavBarModule)</title>
                <para>
                    Module registration for Admin Interface
                <programlisting><![CDATA[
<Setting>
    <FrontendModuleReg>
        <Group>admin</Group>
        <Group>admin2</Group>
        <Description>Admin</Description>
        <Title>User</Title>
        <NavBarName>Admin</NavBarName>
        <NavBarModule>
            <Module>Kernel::Output::HTML::NavBarModuleAdmin</Module>
            <Name>Users</Name>
            <Block>Block1</Block>
            <Prio>100</Prio>
        </NavBarModule>
    </FrontendModuleReg>
</Setting>
                ]]></programlisting>
                </para>
            </section>
        </section>
    </section>
</section>
