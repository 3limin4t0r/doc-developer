<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: templates.xml,v 1.2 2010-08-20 09:05:03 mg Exp $ -->

<section>
    <title>Templating Mechanism</title>
    <para>
        The .dtl files are about 70% plain html and just used from frontend modules
        (Kernel/Modules/*.pm). The .dtl files are located under:
        <filename>$OTRS_HOME/Kernel/Output/HTML/Standard/*.dtl</filename>
    </para>
    <para>
        The usable dtl tags and syntax are described below.
    </para>

    <section id="template-formatting">
        <title>Formatting</title>
        <para>
            We use four spaces per indentation level. Example:

         <programlisting><![CDATA[
<div class="MainBox ARIARoleMain SpacingTopLarge">

    <div class="W33pc CenterBox SpacingBottomLarge">
        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Warning"}</h2>
            </div>
            <div class="Content">
                <h4>
                    $Text{"Message"}: <span class="Error">$Data{"Message"}</span>
                </h4>

                <p class="SpacingTop">
                    $Data{"Comment"}
                </p>

                <p class="SpacingTop">
                    <a href="#" id="GoBack">$Text{"Go back to the previous page"}</a>
                    ...
                </p>
            </div>
        </div>
    </div>

</div>
            ]]></programlisting>
        </para>
    </section>

    <section id="TemplateCommands">
        <title>Template Commands</title>
        <para>
            In the templates you can use various commands to inserte data from the
            running OTRS module, and for commenting. Below you find the list of
            available commands with a description.
        </para>

        <section id="Comment">
            <title>Comment</title>
            <para>
                The dtl comment starts with a # at the beginning of a line and will not be
                shown in the html output. This can be used both for commenting the DTL (=Template) code
                or for disabling parts of it.

                <programlisting><![CDATA[
# this section is temporarily disabled
# <div class="AsBlock">
#     <a href="...">link</a>
# </div>
                ]]></programlisting>
            </para>
        </section>

        <section id="data">
            <title>$Data{""}</title>
            <para>
                If data parameters are given to the templates by the application module,
                these data can be output to the template. <literal>$Data</literal> is
                the most simple, but also most dangerous one. It will insert the data
                parameter whose name is specified inside of the {""} into the template
                as it is, without any HTML quoting.
            </para>
            <warning>
                <para>
                    Because of the missing HTML quoting, this can result in security problems.
                    Never output data that was input by a user without quoting in HTML context.
                    The user could - for example - just insert a <literal><![CDATA[<script>]]></literal> tag,
                    and it would be output on the HTML page generated by OTRS.
                </para>
                <para>
                    Whenever possible, use <link linkend="qdata"><literal>$QData{""}</literal></link> (in HTML) or
                    <link linkend="lqdata"><literal>$LQData{""}</literal></link> (in Links) instead.
                </para>
            </warning>

            <para>
                Example: Whenever we generate HTML in the application, we need to output it to the
                template without HTML quoting, like <literal><![CDATA[<select>]]></literal> elements, which
                are generated by the function <literal>Layout::BuildSelection</literal> in OTRS.

                <programlisting><![CDATA[
<label for="Dropdown">Example Dropdown</label>
$Data{"DropdownString"}
                ]]></programlisting>
            </para>
        </section>

        <section id="qdata">
            <title>$QData{""}</title>
            <para>
                This command has the same function as <link linkend="data"><literal>$Data{""}</literal></link>,
                but it performs HTML quoting on the data as it is inserted to the template.

                <programlisting><![CDATA[
The name of the author is $QData{"Name"}.
                ]]></programlisting>

                It's also possible specify a maximum length for the value.
                If, for example, you just want to show 8 characters of a variable (result will be "SomeName[.,.]"),
                use the following:

                <programlisting><![CDATA[
The first 20 characters of the author's name: $QData{"Name","20"}.
                ]]></programlisting>
            </para>
        </section>

        <section id="lqdata">
            <title>$LQData{""}</title>
            <para>
                This command has the same function as <link linkend="data"><literal>$Data{""}</literal></link>,
                but it performs <ulink url="http://en.wikipedia.org/wiki/Percent-encoding">URL encoding</ulink>
                on the data as it is inserted to the template. This should be used
                to output single parameter names or values of URLs, to prevent security problems.
                It cannot be used for complete URLs because
                it will also mask <literal>=</literal>, for example.

                <programlisting><![CDATA[
<a href="$Env{"Baselink"};Location=$LQData{"File"}">$QData{"File","110"}</a>
                ]]></programlisting>
            </para>
        </section>

        <section id="env">
            <title>$Env{""}</title>
            <para>
                Inserts the environment variable with the name specified in {""}. Some examples:

                <programlisting><![CDATA[
The current user name is: $Env{"UserFirstname"}

Some other common predefined variables are:

$Env{"SessionID"} --> the current session id
$Env{"Time"} --> the current time e. g.  Thu Dec 27 16:00:55 2001
$Env{"CGIHandle"} --> the current CGI handle e. g.  index.pl
$Env{"UserCharset"} --> the current site charset e. g.  iso-8859-1
$Env{"Baselink"} --> the baselink --> index.pl?SessionID=...
$Env{"UserFirstname"} --> e. g. Dirk $Env{"UserFirstname"}
$Env{"UserLogin"} --> e. g. mgg@x11.org
$Env{"UserIsGroup[users]"} = Yes --> user groups (useful for own links)
$Env{"UserIsGroup[admin]"} = Yes $Env{"Action"} --> the current action
                ]]></programlisting>
            </para>
            <warning>
                <para>
                    Because of the missing HTML quoting, this can result in security problems.
                    Never output data that was input by a user without quoting in HTML context.
                    The user could - for example - just insert a <literal><![CDATA[<script>]]></literal> tag,
                    and it would be output on the HTML page generated by OTRS.
                </para>
                <para>
                    Whenever possible, use <link linkend="qenv"><literal>$QEnv{""}</literal></link> instead.
                </para>
            </warning>
        </section>

        <section id="qenv">
            <title>$QEnv{""}</title>
            <para>
                Works like <link linkend="data"><literal>$Env{""}</literal></link>, but
                performs HTML encoding when the data is inserted to the template.

                <programlisting><![CDATA[
The current user name is: $QEnv{"UserFirstname"}
                ]]></programlisting>
            </para>
        </section>

        <section id="quote">
            <title>$Quote{""}</title>
            <para>
A tag to quote html strings.
            <programlisting><![CDATA[
Show no html tags, quote this: $Quote{"<hr><b>some text</b></hr>"}
            ]]></programlisting>
            </para>
            <para>
It's also possible to cut the value. If, for example, you just want to show 20
characters of a variable (result will be "SomeMess[..]"), use the following:
            <programlisting><![CDATA[
Show no html tags, quote this and show just 20 characters:
$Quote{"<hr><b>some text</b></hr>","20"}
            ]]></programlisting>
            </para>
        </section>

        <section id="text">
            <title>$Text{""}</title>
            <para>
This tag translates the string (based on the user selected language).
            <programlisting><![CDATA[
Translate this text: $Text{"Help"}
Translate this text and insert the given data: $Text{"Change %s settings", "$Data{"Type"}"}
            ]]></programlisting>
            </para>
        </section>
        <section id="jstext">
            <title>$JSText{""}</title>
            <para>
The same as $Text{""} but with java scprit quoting. This function quote the ' in java script code with \. Otherwise
the code is broken.
            <programlisting><![CDATA[
Translate this text: $JSText{"Help"}
Translate this text and insert the given data: $JSText{"Change %s settings", "$Data{"Type"}"}
            ]]></programlisting>
            </para>
        </section>
        <section id="config">
            <title>$Config{""}</title>
            <para>
With this tag you can use config variables in the template. For example the
Kernel/config.pm:
            <programlisting><![CDATA[
[Kernel/Config.pm]
    # FQDN
    # (Full qualified domain name of your system.)
    $Self->{FQDN} = 'otrs.example.com';
    # AdminEmail
    # (Email of the system admin.)
    $Self->{AdminEmail} = 'admin@example.com';
[...]
            ]]></programlisting>
            </para>
            <para>
And the use in the dtl template:
            <programlisting><![CDATA[
The hostname is '$Config{"FQDN"}'
The admin email address is '$Config{"AdminEmail"}'
            ]]></programlisting>
            </para>
        </section>
        <section id="include">
            <title>$Include{""}</title>
            <para>
If you want to include other dtl templates into a template, use the include tag:
            <programlisting><![CDATA[
# include Copyright.dtl
$Include{"Copyright"}
            ]]></programlisting>
            </para>
        </section>
        <section id="block">
            <title>Block</title>
            <para>
The block tag can be used to define blocks. These blocks can be used several times by the
frontend module with different data params.
            <programlisting><![CDATA[
<table>
<!-- dtl:block:Row -->
    <tr>
        <td valign="top" width="15%">
        <b>
        $Text{"$Data{"Key"}"}:
        </b>
        </td>
        <td width="85%">
        <div title="$QData{"Value"}">
        $QData{"Value","160"}
        </div>
        </td>
    </tr>
<!-- dtl:block:Row -->
</table>
            ]]></programlisting>
            </para>
            <para>
The html code can be displayed in template blocks in the frontend:
            <programlisting><![CDATA[
# get article
my %Article = $Self->{TicketObject}->ArticleGet(
    ArticleID => $ArticleID,
);

# file blocks
for (qw(From To Cc Subject)) {
    if ($Article{$_}) {
        $Self->{LayoutObject}->Block(
            Name => 'Row',
            Data => {
                Key => $_,
                Value => $Article{$_},
            },
        );
    }
}

# process template
my $HTMLOutput = $Self->{LayoutObject}->Output(
    TemplateFile => 'AgentZoomBody',
    Data => {
        %Article
    },
);
            ]]></programlisting>
            </para>
        </section>
    </section>
</section>
