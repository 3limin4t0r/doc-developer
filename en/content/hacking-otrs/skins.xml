<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: skins.xml,v 1.6 2010-11-22 12:33:42 mg Exp $ -->

<section id="skins">
    <title>Skins</title>
    <para>
        Since OTRS 3.0, the visual appearance of OTRS is controlled by "skins".
    </para>
    <para>
        A skin is a set of CSS and image files, which together control how the GUI is
        presented to the user. Skins do not change the HTML content that is generated by OTRS
        (this is what "Themes" do), but they control how it is displayed. With the help
        of modern CSS standards it is possible to change the display thoroughly (e.g.
        repositioning parts of dialogs, hiding elements, ...).
    </para>

    <section>
        <title>Skin Basics</title>

        <para>
            All skins are in <filename>$OTRS_HOME/var/httpd/htdocs/skins/$SKIN_TYPE/$SKIN_NAME</filename>.
            There are two types of skins: agent and customer skins.
        </para>

        <para>
            Each of the agents can select individually, which of the installed agent skins they want to "wear".
        </para>

        <para>
            For the customer interface, a skin has to be selected globally with the config setting
            <literal>Loader::Customer::SelectedSkin</literal>. All customers will see this skin.
        </para>
    </section>

    <section>
        <title>How skins are loaded</title>

        <para>
            It is important to note that the "default" skin will <emphasis>always</emphasis> be loaded <emphasis>first</emphasis>.
            If the agent selected another skin than the "default" one, then the other one will be loaded only
            <emphasis>after</emphasis> the default skin. By "loading" here we mean that OTRS will put tags into the HTML content
            which cause the CSS files to be loaded by the browser. Let's see an example of this:

            <programlisting><![CDATA[
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css-cache/CommonCSS_179376764084443c181048401ae0e2ad.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/ivory/css-cache/CommonCSS_e0783e0c2445ad9cc59c35d6e4629684.css" />
            ]]></programlisting>

            Here it can clearly be seen that the default skin is loaded first, and then the custom skin specified
            by the agent. In this example, we see the result of the activated loader (<literal>Loader::Enabled</literal>
            set to 1), which gathers all CSS files, concatenates and minifies them and serves them as one chunk to the
            browser. This saves bandwith and also reduces the number of HTTP requests. Let's see the same example with the
            Loader turned off:

            <programlisting><![CDATA[
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Reset.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Default.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Header.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.OverviewControl.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.OverviewSmall.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.OverviewMedium.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.OverviewLarge.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Footer.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Grid.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Form.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Table.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Widget.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.WidgetMenu.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.TicketDetail.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Tooltip.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Dialog.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Print.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Agent.CustomerUser.GoogleMaps.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/default/css/Core.Agent.CustomerUser.OpenTicket.css" />
    <link rel="stylesheet" href="/otrs-web/skins/Agent/ivory/css/Core.Dialog.css" />
            ]]></programlisting>

            Here we can better see the individual files that come from the skins.
        </para>

        <para>
            There are different types of CSS files: common files which must always be loaded,
            and "module-specific" files which are only loaded for special modules within the OTRS
            framework.
        </para>

        <para>
            In addition, it is possible to specify CSS files which only must be loaded on IE7 or
            IE8 (in the case of the customer interface, also IE6). This is unfortunate, but it was
            not possible to develop a modern GUI on these browsers without having special CSS for them.
        </para>

        <para>
            For details regarding the CSS file types, please see the <link linkend="loader">section on the Loader</link>.
        </para>

        <para>
            For each HTML page generation, the loader will first take all configured CSS files from the
            default skin, and then for each file look if it is also available in a custom skin (if a custom
            skin is selected) and load them after the default files.
        </para>

        <para>
            That means a) that CSS files in custom skins need to have the same names as in the default skins,
            and b) that a custom skin does not need to have all files of the default skin. That is the big
            advantage of loading the default skin first: a custom skin has all default CSS rules present
            and only needs to change those which should result in a different display. That can often be
            done in a single file, like in the example above.
        </para>

        <para>
            Another effect of this is that you  need to be careful to overwrite all default CSS rules in your
            custom skins that you want to change. Let's see an example:

            <programlisting><![CDATA[
.Header h1 {
    font-weight: bold;
    color: #000;
}
            ]]></programlisting>

            This defines special headings inside of the .Header element as bold, black text. Now if you want to
            change that in your skin to another color and normal text, it is not enough to write

            <programlisting><![CDATA[
.Header h1 {
    color: #F00;
}
            ]]></programlisting>

            Because the original rule for <literal>font-weight</literal> still applies. You need to override it explicitly:

            <programlisting><![CDATA[
.Header h1 {
    font-weight: normal;
    color: #F00;
}
            ]]></programlisting>
        </para>

    </section>

    <section>
        <title>Creating a New Skin</title>
        <para>In this section, we will be creating a new agent skin which replaces the default OTRS logo with a custom company logo,
        and configure that skin to be the one which all agents will see by default.</para>

        <para>There are only two simple steps we need to take to achieve this goal:
            <itemizedlist>
                <listitem><para>create the skin files and</para></listitem>
                <listitem><para>make the skin known to the OTRS system.</para></listitem>
            </itemizedlist>
        </para>

        <para>
            Let's start by creating the files needed for our new skin. First of all, we need to create a new
            folder for this skin (we'll call it "custom"). This folder will be
            <filename>$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom</filename>.
        </para>
        <para>
            In there, we need to place the new logo file (e.g. <filename>custom-logo.png</filename> in a new directory
            <filename>img</filename>. In addition to that, a new CSS file must be created in the new folder
            <filename>css</filename> which defines the new skin's appearance. We'll call it <filename>Core.Header.css</filename>
            (remember that it must have the same name as the files in the "default" skin). This is the code needed for the CSS file:

            <programlisting><![CDATA[
#Logo {
    background: url(../img/custom-logo.png) no-repeat;
    height: 67px; /* specify height and width to match your logo's dimensions */
    width: 224px;
    /* optional: specify "top" and "right" to reposition the logo on the screen */
}
            ]]></programlisting>
        </para>
        <para>
            Now comes the second step, making the new skin known to the OTRS system. For this, we need to create a new config
            file <filename>$OTRS_HOME/Kernel/Config/Files/CustomSkin.xml</filename>, which will contain the needed settings
            as follows:

            <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<otrs_config version="1.0" init="Framework">
    <ConfigItem Name="Loader::Agent::Skin###100-custom" Required="0" Valid="1">
        <Description Translatable="1">Custom skin for the development manual.</Description>
        <Group>Framework</Group>
        <SubGroup>Frontend::Agent</SubGroup>
        <Setting>
            <Hash>
                <Item Key="InternalName">custom</Item>
                <Item Key="VisibleName">Custom</Item>
                <Item Key="Description">Custom skin for the development manual.</Item>
                <Item Key="HomePage">www.yourcompany.com</Item>
            </Hash>
        </Setting>
    </ConfigItem>
</otrs_config>
            ]]></programlisting>

            To make this configuration active, we need to navigate to the SysConfig module in the admin area
            of OTRS (alternatively, you can run the script <filename>$OTRS_HOME/bin/otrs.RebuildConfig.pl</filename>).
            This will regenerate the Perl cache of the XML configuration files, so that our new skin is now known
            and can be selected in the system. To make it the default skin that new agents see before they made their
            own skin selection, edit the SysConfig setting "Loader::Agent::DefaultSelectedSkin" and set it to "custom".
        </para>
        <para>
            In conclusion: to create a new skin in OTRS, we had to place the new logo file, and create one CSS and one XML file, resulting
            in three new files:
            <screen>
$OTRS_HOME/Kernel/Config/Files/CustomSkin.xml
$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom/img/custom-logo.png
$OTRS_HOME/var/httpd/htdocs/skins/Agent/custom/css/Core.Header.css
            </screen>
        </para>
    </section>
</section>
