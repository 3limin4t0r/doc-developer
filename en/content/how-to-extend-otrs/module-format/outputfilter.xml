<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<section id="outputfilter">
    <title>Output Filter</title>
    <para>
        Output filters allow to modify HTML on the fly. It is best practice to use output filters
        instead of modifying <filename>.dtl</filename> files directly.
        There are three good reasons for that.
        When the same adaption has to be applied to several frontend modules
        then the adaption only has to be implemented once.
        The second advantage is that when OTRS is upgraded
        there is a chance that the filter doesn't have to be updated, when the relevant pattern has not changed.
        When two extensions modify the same file there is a conflict during the installation of the second package.
        This conflict can be resolved by using two output filters that modify the same frontend module.
    </para>
    <para>
        There are four different kinds of output filters. They are active at different stages of the
        generation of HTML content.
    </para>
    <section id="outputfilter_filterelement_pre">
        <title>FilterElementPre</title>
        <para>
            The content of a template can be changed by the filter before any processing by the Layout module takes place.
            This kind of filter should be used in most cases.
            Processing instructions like $Text{"..."}, $QData{"..."} can be inserted
            into the template content and they will be honored by the subsequent DTL processing.
        </para>
    </section>
    <section id="outputfilter_filterelement_post">
        <title>FilterElementPost</title>
        <para>
            The content of a template can be changed after variable substitution and translation.
            The kind of filter should only be used when the filter needs access to translated strings
            or to substituted variables.
        </para>
    </section>
    <section id="outputfilter_filtercontent">
        <title>FilterContent</title>
        <para>
            This kind of filter allows to process the complete HTML output for the request
            right before it is sent to the browser.
            This can be used for global transformations.
            But in real life there is rarely a need to use this kind of filter.
        </para>
    </section>
    <section id="outputfilter_filtertest">
        <title>FilterText</title>
        <para>
            This kind of output filter is a plugin for the method
            Kernel::Output::HTML::Layout::Ascii2HTML()
            and is only active when the parameter LinkFeature is set to 1.
            Thus the FilterText output filters are currently only active for the display of
            the body of plain text articles.
            Plain text articles are generated by incoming non-HTML mails
            and when OTRS is configured to not use the rich text feature in the frontend.
        </para>
    </section>
    <section id="outputfilter-code">
        <title>Code example</title>
        <para>
            See package TemplateModule.
        </para>
    </section>
    <section id="outputfilter-configuration">
        <title>Configuration example</title>
        <para>
            See package TemplateModule.
        </para>
    </section>
    <section id="outputfilter-usecases">
        <title>Use Cases</title>
        <section id="outputfilter-usecase-10">
            <title>Show additional ticket attributes in AgentTicketZoom.</title>
            <para>
                All ticket attributes are passed to the AgentTicketZoom template.
                Therefore it suffices to insert e.g. the instruction $QData{"Title"} into the content.
                This can be achieved with a FilterElementPre output filter.
            </para>
        </section>
        <section id="outputfilter-usecase-20">
            <title>Add an additional CSS file.</title>
            <para>
                An additional CSS file can be added to all agent frontends with an FilterElementPre filter
                that only modifies <filename>Header.dtl</filename>.
                Therefore it suffices to insert e.g. the instruction $QData{"Title"} into the content.
                This can be achieved with a FilterElementPre output filter.
            </para>
        </section>
        <section id="outputfilter-usecase-30">
            <title>Show the service selection as a multi level menu.</title>
            <para>
                Use a FilterElementPost for this feature.
                The list of selectable services can be parsed from the processed template
                output. The multi level selection can be constructed from the service list and
                inserted into the template content. A FilterElementPost output filter must be used for that.
            </para>
        </section>
        <section id="outputfilter-usecase-40">
            <title>Create links within plain text article bodies.</title>
            <para>
                A biotech company uses gene names like IPI00217472 in plain text articles.
                A FilterText output filter can be used to create links to a sequence database,
                e.g. http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-e+[IPI-acc:IPI00217472]+-vn+2,
                for the gene names.
            </para>
        </section>
        <section id="outputfilter-usecase-50">
            <title>Prohibit active content</title>
            <para>
                There is firewall rule that disallows all active content. In order to avoid rejection by the firewall
                the HTML tag &lt;applet&gt; can be filtered with an FilterContent output filter.
            </para>
        </section>
    </section>
    <section id="outputfilter-caveats">
        <title>Caveats and Warnings</title>
        <para>
            Every ElementPre and ElementPost output filter is constructed and run
            for every Template that is needed for the current request.
            Thus low performance of the output filter or a large number of filters can
            severely degrade performance.
            When that becomes an issue, the construction of
            needed objects can be done in the Run-method after the checks.
            Thus the expensive code is run only in the relevant cases.
        </para>
    </section>
    <section id="outputfilter-bestpractice">
        <title>Best Practices</title>
        <para>
            In order to increase flexibility the list of affected templates should be
            configurable in SysConfig.
        </para>
    </section>
    <section id="outputfilter-releases">
        <title>Release Availability</title>
        <para>
            The four kinds of output filters are available in OTRS 2.4.
        </para>
    </section>
</section>
