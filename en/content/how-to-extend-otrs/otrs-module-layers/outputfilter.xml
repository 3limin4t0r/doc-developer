<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="outputfilter">
    <title>Output Filter</title>
    <para>
        Output filters allow to modify HTML on the fly. It is best practice to use output filters
        instead of modifying <filename>.tt</filename> files directly.
        There are three good reasons for that.
        When the same adaptation has to be applied to several frontend modules then the adaption only has to be implemented once.
        The second advantage is that when OTRS is upgraded
        there is a chance that the filter doesn't have to be updated, when the relevant pattern has not changed.
        When two extensions modify the same file there is a conflict during the installation of the second package.
        This conflict can be resolved by using two output filters that modify the same frontend module.
    </para>
    <para>
        There are three different kinds of output filters. They are active at different stages of the
        generation of HTML content.
    </para>
    <section id="outputfilter_filterelement_post">
        <title><literal>FilterElementPost</literal></title>
        <para>
            These filters allow to modify the output of a template after it was rendered.
        </para>
        <para>
            To translate content, you can run <code>$LayoutObject->Translate()</code> directly. If you need other template features, just define a small template file for your output filter and use it to render your content before injecting it into the main data. It can also be helpful to use jQuery DOM operations to reorder/replace content on the screen in some cases instead of using regular expressions. In this case you would inject the new code somewhere in the page as invisible content (e. g. with the class <literal>Hidden</literal>), and then move it with jQuery to the correct location in the DOM and show it.
        </para>
        <para>
            To make using post output filters easier, there is also a mechanism to request HTML comment hooks for certain templates/blocks. You can add in your module config XML like:
        </para>
        <para>
            <programlisting><![CDATA[
<ConfigItem
Name="Frontend::Template::GenerateBlockHooks###100-OTRSBusiness-ContactWithData"
Required="1" Valid="1">
    <Description Translatable="1">Generate HTML comment hooks for
the specified blocks so that filters can use them.</Description>
    <Group>OTRSBusiness</Group>
    <SubGroup>Core</SubGroup>
    <Setting>
        <Hash>
            <Item Key="AgentTicketZoom">
                <Array>
                    <Item>CustomerTable</Item>
                </Array>
            </Item>
        </Hash>
    </Setting>
</ConfigItem>
            ]]></programlisting>
        </para>
        <para>
            This will cause the block <literal>CustomerTable</literal> in <filename>AgentTicketZoom.tt</filename> to be
            wrapped in HTML comments each time it is rendered:
        </para>
        <para>
            <programlisting><![CDATA[
<!--HookStartCustomerTable-->
... block output ...
<!--HookEndCustomerTable-->
            ]]></programlisting>
        </para>
        <para>
            With this mechanism every package can request just the block hooks it
            needs, and they are consistently rendered. These HTML comments can then be used in your
            output filter for easy regular expression matching.
        </para>
    </section>
    <section id="outputfilter_filtercontent">
        <title><literal>FilterContent</literal></title>
        <para>
            This kind of filter allows to process the complete HTML output for the request
            right before it is sent to the browser. This can be used for global transformations.
        </para>
    </section>
    <section id="outputfilter_filtertext">
        <title><literal>FilterText</literal></title>
        <para>
            This kind of output filter is a plugin for the method
            <literal>Kernel::Output::HTML::Layout::Ascii2HTML()</literal>
            and is only active when the parameter <literal>LinkFeature</literal> is set to 1.
            Thus the <literal>FilterText</literal> output filters are currently only active for
            the display of the body of plain text articles.
            Plain text articles are generated by incoming non-HTML mails
            and when OTRS is configured to not use the Rich Text feature in the frontend.
        </para>
    </section>
    <section id="outputfilter-code">
        <title>Code example</title>
        <para>
            See package <literal>TemplateModule</literal>.
        </para>
    </section>
    <section id="outputfilter-configuration">
        <title>Configuration example</title>
        <para>
            See package <literal>TemplateModule</literal>.
        </para>
    </section>
    <section id="outputfilter-usecases">
        <title>Use Cases</title>
        <section id="outputfilter-usecase-10">
            <title>Show additional ticket attributes in <literal>AgentTicketZoom</literal></title>
            <para>
                This can be achieved with a <literal>FilterElementPost</literal> output filter.
            </para>
        </section>
        <section id="outputfilter-usecase-30">
            <title>Show the service selection as a multi level menu</title>
            <para>
                Use a <literal>FilterElementPost</literal> for this feature.
                The list of selectable services can be parsed from the processed template
                output. The multi level selection can be constructed from the service list and
                inserted into the template content. A <literal>FilterElementPost</literal> output
                filter must be used for that.
            </para>
        </section>
        <section id="outputfilter-usecase-40">
            <title>Create links within plain text article bodies</title>
            <para>
                A biotech company uses gene names like IPI00217472 in plain text articles.
                A <literal>FilterText</literal> output filter can be used to create links to a
                sequence database, e.g. http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-e+[IPI-acc:IPI00217472]+-vn+2,
                for the gene names.
            </para>
        </section>
        <section id="outputfilter-usecase-50">
            <title>Prohibit active content</title>
            <para>
                There is firewall rule that disallows all active content. In order to avoid
                rejection by the firewall, the HTML tag <literal>&lt;applet&gt;</literal> can be
                filtered with a <literal>FilterContent</literal> output filter.
            </para>
        </section>
    </section>
    <section id="outputfilter-caveats">
        <title>Caveats and Warnings</title>
        <para>
            Every <literal>FilterElementPost</literal> output filter is constructed and run
            for every configured Template that is needed for the current request.
            Thus low performance of the output filter or a large number of filters can
            severely degrade performance.
        </para>
    </section>
    <section id="outputfilter-bestpractice">
        <title>Best Practices</title>
        <para>
            In order to increase flexibility the list of affected templates should be
            configured in SysConfig.
        </para>
    </section>
    <section id="outputfilter-releases">
        <title>Release Availability</title>
        <para>
            The output filters are available since OTRS 2.4. The type <literal>FilterElementPre</literal>
            was dropped with OTRS 5.
        </para>
    </section>
</section>
