<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: package-building.xml,v 1.34 2008-04-29 21:58:46 martin Exp $ -->

<chapter>
    <title>Package Building</title>
    <para>
If you want to create an OPM package (.opm) you need to create a spec file (.sopm)
which includes the properties of the package.
    </para>
    <sect1 id="package-spec-file">
        <title>Package Spec File</title>
        <para>
The OPM package is XML based. You can create/edit the .sopm via a text or xml
editor. It contains meta data, a file list and database options.
        </para>
        <sect2 id="package-name">
            <title>Name</title>
            <para>
The package name (required).
            <programlisting>
&lt;Name&gt;Calendar&lt;/Name&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-version">
            <title>Version</title>
            <para>
The package version (required).
            <programlisting>
&lt;Version&gt;1.2.3&lt;/Version&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-framework">
            <title>Framework</title>
            <para>
The required framework version (2.3.x means e.g. 2.3.1 or 2.3.9) (required).
            <programlisting>
&lt;Framework&gt;2.3.x&lt;/Framework&gt;
            </programlisting>
            </para>
            <para>
Can also be used several times.
            <programlisting>
&lt;Framework&gt;2.3.x&lt;/Framework&gt;
&lt;Framework&gt;2.2.x&lt;/Framework&gt;
&lt;Framework&gt;2.1.x&lt;/Framework&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-vendor">
            <title>Vendor</title>
            <para>
The package vendor (required).
            <programlisting>
&lt;Vendor&gt;OTRS AG&lt;/Vendor&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-url">
            <title>URL</title>
            <para>
The vendor URL (required).
            <programlisting>
&lt;URL&gt;http://otrs.org/&lt;/URL&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-license">
            <title>License</title>
            <para>
The license of the package (required).
            <programlisting>
&lt;License&gt;GNU GENERAL PUBLIC LICENSE Version 2, June 1991&lt;/License&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-changelog">
            <title>ChangeLog</title>
            <para>
The package change log (optional).
            <programlisting>
&lt;ChangeLog Version="1.1.2" Date="2007-02-15 18:45:21"&gt;Added some feature.&lt;/ChangeLog&gt;
&lt;ChangeLog Version="1.1.1" Date="2007-02-15 16:17:51"&gt;New package.&lt;/ChangeLog&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-description">
            <title>Description</title>
            <para>
The package description in different languages (required).
            <programlisting>
&lt;Description Lang="en"&gt;A web calendar.&lt;/Description&gt;
&lt;Description Lang="de"&gt;Ein Web Kalender.&lt;/Description&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-buildhost">
            <title>BuildHost</title>
            <para>
This will be filled in automatically by OPM (auto).
            <programlisting>
&lt;BuildHost&gt;?&lt;/BuildHost&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-builddate">
            <title>BuildDate</title>
            <para>
This will be filled in automatically by OPM (auto).
            <programlisting>
&lt;BuildDate&gt;?&lt;/BuildDate&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-package-required">
            <title>PackageRequired</title>
            <para>
Packages that must be installed beforehand (optional).
If PackageRequired is used, a version of the required package must be specified.
            <programlisting>
&lt;PackageRequired Version="1.0.3"&gt;SomeOtherPackage&lt;/PackageRequired&gt;
&lt;PackageRequired Version="5.3.2"&gt;SomeotherPackage2&lt;/PackageRequired&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-module-required">
            <title>ModuleRequired</title>
            <para>
Perl modules that must be installed beforehand (optional).
            <programlisting>
&lt;ModuleRequired Version="1.03"&gt;Encode&lt;/ModuleRequired&gt;
&lt;ModuleRequired Version="5.32"&gt;MIME::Tools&lt;/ModuleRequired&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-os">
            <title>OS (^M)</title>
            <para>
Required OS (optional).
            <programlisting>
&lt;OS&gt;linux&lt;/OS&gt;
&lt;OS&gt;darwin&lt;/OS&gt;
&lt;OS&gt;mswin32&lt;/OS&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-filelist">
            <title>Filelist</title>
            <para>
This is a list of files included in the package (optional).
            <programlisting>
&lt;Filelist&gt;
    &lt;File Permission="644" Location="Kernel/Config/Files/Calendar.pm"/&gt;
    &lt;File Permission="644" Location="Kernel/System/CalendarEvent.pm"/&gt;
    &lt;File Permission="644" Location="Kernel/Modules/AgentCalendar.pm"/&gt;
    &lt;File Permission="644" Location="Kernel/Language/de_AgentCalendar.pm"/&gt;
&lt;/Filelist&gt;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="package-database-install">
            <title>DatabaseInstall</title>
            <para>
Database entries that have to be created when a package is installed (optional).
            <programlisting>
&lt;DatabaseInstall&gt;
    &lt;TableCreate Name="calendar_event"&gt;
    &lt;Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="BIGINT"/&gt;
    &lt;Column Name="title" Required="true" Size="250" Type="VARCHAR"/&gt;
    &lt;Column Name="content" Required="false" Size="250" Type="VARCHAR"/&gt;
    &lt;Column Name="start_time" Required="true" Type="DATE"/&gt;
    &lt;Column Name="end_time" Required="true" Type="DATE"/&gt;
    &lt;Column Name="owner_id" Required="true" Type="INTEGER"/&gt;
    &lt;Column Name="event_status" Required="true" Size="50" Type="VARCHAR"/&gt;
    &lt;/TableCreate&gt;
&lt;/DatabaseInstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;DatabaseInstall Type="post"&gt; or &lt;DatabaseInstall Type="pre"&gt; to define the time of execution separately  (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-database-upgrade">
            <title>DatabaseUpgrade</title>
            <para>
Information on which actions have to be performed in case of an upgrade (subject to version tag), (optional).
Example (if installed package version is below 1.3.4, defined action will be performed):
            <programlisting>
&lt;DatabaseUpgrade&gt;
    &lt;TableCreate Name="calendar_event_involved" Version="1.3.4"&gt;
        &lt;Column Name="event_id" Required="true" Type="BIGINT"/&gt;
        &lt;Column Name="user_id" Required="true" Type="INTEGER"/&gt;
    &lt;/TableCreate&gt;
&lt;/DatabaseUpgrade&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;DatabaseUpgrade Type="post"&gt; or &lt;DatabaseUpgrade Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-database-reinstall">
            <title>DatabaseReinstall</title>
            <para>
Information on what actions have to be performed if  the package is reinstalled, (optional).
            <programlisting>
&lt;DatabaseReinstall&gt;&lt;/DatabaseReinstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;DatabaseReinstall Type="post"&gt; or &lt;DatabaseReinstall Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-database-uninstall">
            <title>DatabaseUninstall</title>
            <para>
Uninstall (if a package gets uninstalled), (optional).
            <programlisting>
&lt;DatabaseUninstall&gt;
    &lt;TableDrop Name="calendar_event" /&gt;
&lt;/DatabaseUninstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;DatabaseUninstall Type="post"&gt; or &lt;DatabaseUninstall Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-intro-install">
            <title>IntroInstall</title>
            <para>
To show a "pre" or "post" install introdution in installation dialog.
            </para>
            <para>
            <programlisting>
&lt;IntroInstall Type="post" Lang="en" Title="Some Title"&gt;
Some Info formated in dtl/html....
&lt;/IntroInstall&gt;
            </programlisting>
            </para>
            <para>
You can also use the "Format" attribute to define if you want to use "html" (which is default) or "plain" to use automatically a "&lt;pre&gt;&lt;/pre&gt;" tag wenn intro is shown (to use the new lines and spaces of the content).
            </para>
        </sect2>
        <sect2 id="package-intro-uninstall">
            <title>IntroUninstall</title>
            <para>
To show a "pre" or "post" uninstall introdution in uninstallation dialog.
            </para>
            <para>
            <programlisting>
&lt;IntroUninstall Type="post" Lang="en" Title="Some Title"&gt;
Some Info formated in dtl/html....
&lt;/IntroUninstall&gt;
            </programlisting>
            </para>
            <para>
You can also use the "Format" attribute to define if you want to use "html" (which is default) or "plain" to use automatically a "&lt;pre&gt;&lt;/pre&gt;" tag wenn intro is shown (to use the new lines and spaces of the content).
            </para>
        </sect2>
        <sect2 id="package-intro-reinstall">
            <title>IntroReinstall</title>
            <para>
To show a "pre" or "post" reinstall introdution in reinstallation dialog.
            </para>
            <para>
            <programlisting>
&lt;IntroReinstall Type="post" Lang="en" Title="Some Title"&gt;
Some Info formated in dtl/html....
&lt;/IntroReinstall&gt;
            </programlisting>
            </para>
            <para>
You can also use the "Format" attribute to define if you want to use "html" (which is default) or "plain" to use automatically a "&lt;pre&gt;&lt;/pre&gt;" tag wenn intro is shown (to use the new lines and spaces of the content).
            </para>
        </sect2>
        <sect2 id="package-intro-upgrade">
            <title>IntroUpgrade</title>
            <para>
To show a "pre" or "post" upgrade introdution in upgrading dialog.
            </para>
            <para>
            <programlisting>
&lt;IntroUpgrade Type="post" Lang="en" Title="Some Title"&gt;
Some Info formated in dtl/html....
&lt;/IntroUpgrade&gt;
            </programlisting>
            </para>
            <para>
You can also use the "Format" attribute to define if you want to use "html" (which is default) or "plain" to use automatically a "&lt;pre&gt;&lt;/pre&gt;" tag wenn intro is shown (to use the new lines and spaces of the content).
            </para>
        </sect2>
        <sect2 id="package-code-install">
            <title>CodeInstall</title>
            <para>
To execute perl code if the package is installed (optional).
            <programlisting>
&lt;CodeInstall&gt;
    # example
    if (1) {
        print STDERR "Some info to STDERR\n";
    }
    # log example
    $Self-&gt;{LogObject}-&gt;Log(
        Priority =&gt; 'notice',
        Message =&gt; "Some Message!",
    )
    # database example
    $Self-&gt;{DBObject}-&gt;Do(SQL =&gt; "SOME SQL");
&lt;/CodeInstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;CodeInstall Type="post"&gt; or &lt;CodeInstall Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-code-uninstall">
            <title>CodeUninstall</title>
            <para>
To execute perl code if the package is uninstalled (optional).
On "pre" or "post" time of package uninstallation.
            <programlisting>
&lt;CodeUninstall&gt;
    # example
    if (1) {
        print STDERR "Some info to STDERR\n";
    }
&lt;/CodeUninstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;CodeUninstall Type="post"&gt; or &lt;CodeUninstall Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-code-reinstall">
            <title>CodeReinstall</title>
            <para>
To execute perl code if the package is reinstalled (optional).
            <programlisting>
&lt;CodeReinstall&gt;
    # example
    if (1) {
        print STDERR "Some info to STDERR\n";
    }
&lt;/CodeReinstall&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;CodeReinstall Type="post"&gt; or &lt;CodeReinstall Type="pre"&gt; to define the time of execution separately (post is default).
For more info see chapter "Package Life Cycle".
            </para>
        </sect2>
        <sect2 id="package-code-upgrade">
            <title>CodeUpgrade</title>
            <para>
To execute perl code if the package is upgraded (optional).
            <programlisting>
&lt;CodeUpgrade&gt;
    # example
    if (1) {
        print STDERR "Some info to STDERR\n";
    }
&lt;/CodeUpgrade&gt;
            </programlisting>
            </para>
            <para>
You also can choose &lt;CodeUpgrade Type="post"&gt; or &lt;CodeUpgrade Type="pre"&gt; to define the time of execution separately (post is default).
            </para>
        </sect2>
    </sect1>
    <sect1 id="package-example-sopm">
        <title>Example .sopm</title>
        <para>
This is a whole example spec file.
        <programlisting>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;otrs_package version="1.0"&gt;
    &lt;Name&gt;Calendar&lt;/Name&gt;
    &lt;Version&gt;0.0.1&lt;/Version&gt;
    &lt;Framework&gt;2.3.x&lt;/Framework&gt;
    &lt;Vendor&gt;OTRS AG&lt;/Vendor&gt;
    &lt;URL&gt;http://otrs.org/&lt;/URL&gt;
    &lt;License&gt;GNU GENERAL PUBLIC LICENSE Version 2, June 1991&lt;/License&gt;
    &lt;ChangeLog Version="1.1.2" Date="2007-02-15 18:45:21"&gt;Added some feature.&lt;/ChangeLog&gt;
    &lt;ChangeLog Version="1.1.1" Date="2007-02-15 16:17:51"&gt;New package.&lt;/ChangeLog&gt;
    &lt;Description Lang="en"&gt;A web calendar.&lt;/Description&gt;
    &lt;Description Lang="de"&gt;Ein Web Kalender.&lt;/Description&gt;
    &lt;IntroInstall Type="post" Lang="en" Title="Thank you!"&gt;Thank you for choosing the Calendar module.&lt;/IntroInstall&gt;
    &lt;IntroInstall Type="post" Lang="de" Title="Vielen Dank!"&gt;Vielen Dank fuer die Auswahl des Kalender Modules.&lt;/IntroInstall&gt;
    &lt;BuildDate&gt;?&lt;/BuildDate&gt;
    &lt;BuildHost&gt;?&lt;/BuildHost&gt;
    &lt;Filelist&gt;
        &lt;File Permission="644" Location="Kernel/Config/Files/Calendar.pm"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="Kernel/System/CalendarEvent.pm"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="Kernel/Modules/AgentCalendar.pm"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="Kernel/Language/de_AgentCalendar.pm"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="Kernel/Output/HTML/Standard/AgentCalendar.dtl"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="Kernel/Output/HTML/NotificationCalendar.pm"&gt;&lt;/File&gt;
        &lt;File Permission="644" Location="var/httpd/htdocs/images/Standard/calendar.png"&gt;&lt;/File&gt;
    &lt;/Filelist&gt;
    &lt;DatabaseInstall&gt;
        &lt;TableCreate Name="calendar_event"&gt;
            &lt;Column Name="id" Required="true" PrimaryKey="true" AutoIncrement="true" Type="BIGINT"/&gt;
            &lt;Column Name="title" Required="true" Size="250" Type="VARCHAR"/&gt;
            &lt;Column Name="content" Required="false" Size="250" Type="VARCHAR"/&gt;
            &lt;Column Name="start_time" Required="true" Type="DATE"/&gt;
            &lt;Column Name="end_time" Required="true" Type="DATE"/&gt;
            &lt;Column Name="owner_id" Required="true" Type="INTEGER"/&gt;
            &lt;Column Name="event_status" Required="true" Size="50" Type="VARCHAR"/&gt;
        &lt;/TableCreate&gt;
    &lt;/DatabaseInstall&gt;
    &lt;DatabaseUninstall&gt;
        &lt;TableDrop Name="calendar_event"/&gt;
    &lt;/DatabaseUninstall&gt;
&lt;/otrs_package&gt;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="package-build">
        <title>Package Build</title>
        <para>
To build an .opm package from the spec opm.
        <screen>
shell&gt; bin/opm.pl -a build -p /path/to/example.sopm
writing /tmp/example-0.0.1.opm
shell&gt;
        </screen>
        </para>
    </sect1>
    <sect1 id="package-life-cycle">
        <title>Package Life Cycle - Install/Upgrade/Uninstall</title>
        <para>
The following image shows you how the life cycle of a package instalation/upgrade/uninstallation works in the backend step by step.
        <screenshot>
            <graphic srccredit="" scale="60" fileref="screenshots/package-life-cycle.png"></graphic>
        </screenshot>
        </para>
    </sect1>
</chapter>
