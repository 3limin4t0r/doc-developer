<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $ -->

<chapter>
    <title>Module Format</title>
    <sect1 id="auth-module">
        <title>Auth Module</title>
        <para>
There are several agent authentication modules (DB, LDAP and HTTPBasicAuth)
which come with the OTRS framework. It is also possible to develop your own
authentication modules. The agent authentication modules are located under
Kernel/System/Auth/*.pm. For more information about their configuration see the admin manual.
Following, there is an example of a simple agent auth module. Save it under Kernel/System/Auth/Simple.pm.
You just need 3 functions: new(), GetOption() and Auth(). Return the uid, then the
authentication is ok.
        </para>
        <para>Format:
        <programlisting>
# --
# Kernel/System/Auth/Simple.pm - provides the simple authentication
# Copyright (C) 2001-2005 Martin Edenhofer martin+code at otrs.org
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --
# Note:
# available objects are: ConfigObject, LogObject and DBObject
# --

package Kernel::System::Auth::Simple;

use strict;

sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}
sub GetOption {
    my $Self = shift;
    my %Param = @_;
    # return option
    return (PreAuth => 0);
}
sub Auth {
    my $Self = shift;
    my %Param = @_;
    [...]
    if ($Authentication) {
        return $Param{User};
    }
    else {
        return;
    }
}
        </programlisting>
        </para>
    </sect1>
    <sect1 id="notify-module">
        <title>Notify Module</title>
        <para>
With agent notification modules you can inform agents about new information. A
normal navigation looks like the following screen shot.
        </para>
        <para>
            <screenshot>
                <graphic srccredit="" scale="60" fileref="pictures/notify-screen1.png"></graphic>
            </screenshot>
        </para>
        <para>
With this examplary module you can do something like the following.
        </para>
        <para>
            <screenshot>
                <graphic srccredit="" scale="60" fileref="pictures/notify-screen2.png"></graphic>
            </screenshot>
        </para>
        <para>
Format:
        <programlisting>
# --
# Kernel/Output/HTML/NotificationMotd.pm - message of the day
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::Output::HTML::NotificationMotd;
use strict;

# --
sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my $Self = shift;
    my %Param = @_;
    return $Self->{LayoutObject}->Notify(Info =>  Some daily news! );
}
# --
1;
        </programlisting>
        </para>
        <para>
To use this module add the following to the <filename>Kernel/Config.pm</filename>
and restart your webserver (if you use mod_perl).
        <programlisting>
# Frontend::NotifyModule - module name (50-Motd)
$Self->{'Frontend::NotifyModule'}->{'50-Motd'} = {
    Module => 'Kernel::Output::HTML::NotificationMotd',
};
        </programlisting>
        </para>
    </sect1>
    <sect1 id="navigation-module">
        <title>Navigation Module</title>
        <para>
            In this module layer you can create dynamic navigation bar items with
            dynamic content (Name and Description).
        </para>
        <para>
Format:
        <programlisting>
# --
# Kernel/Output/HTML/NavBarABC.pm - shows a navbar item dynamicaly
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::Output::HTML::NavBarABC;
use strict;

# --
sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my $Self = shift;
    my %Param = @_;
    my %Return = ();
    $Return{'0999989'} = {
            Block => 'ItemPersonal',
            Description => 'Some Desctipton',
            Name => 'Text',
            Image => 'new-message.png',
            Link => 'Action=AgentMailbox&amp;Subaction=New',
            AccessKey => 'j',
    };
    return %Return;
}
# --
1;
        </programlisting>
        </para>
        <para>
To use this module add the following code to the Kernel/Config.pm and restart
your webserver (if you use mod_perl).
        <programlisting>
[Kernel/Config.pm]
# agent interface notification module
$Self->{'Frontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        </programlisting>
        </para>
    </sect1>
    <sect1 id="frontend-modules">
        <title>Frontend Modules</title>
        <para>
Frontend Modules are located under  "$OTRS_HOME/Kernel/Modules/*.pm". There
are two public functions in there - new() and run() - which are accessed from the
Frontend Handle (e. g. index.pl). "new()" is used to create a frontend
module object. The Frontend Handle provides the used frontend module with the basic framework object.
These are, for example: ParamObject (to get formular params), DBObject
(to use existing database connects), LayoutObject (to use templates and other
html layout functions), ConfigObject (to access config settings), LogObject
(to use the framework log system), UserObject (to get the user functions from
the current user), GroupObject (to get the group functions).
        </para>
        <para>
For more information on core modules see
<ulink url="http://dev.otrs.org/">http://dev.otrs.org/</ulink>
        </para>
        <para>
Format:
        <programlisting>
# --
# Kernel/Modules/AgentTest.pm - message of the day
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::Modules::AgentTest;
use strict;

# --
sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my $Self = shift;
    my %Param = @_;
    [...]
    # ---------------------------------------------------------- #
    # add a new object (Note: dtl text 'New')
    # ---------------------------------------------------------- #
    if ($Self->{Subaction} eq 'Add') {
        my $Output   = '';
        my %Frontend = ();
        [...]
        # add add block
        $Self->{LayoutObject}->Block(
            Name => 'Add',
            Data => {%Param, %Frontend},
        );
        # build output
        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "Test");
        $Output .= $Self->{LayoutObject}->NavigationBar();
        $Output .= $Self->{LayoutObject}->Output(
            Data => {%Param, %Frontend},
            TemplateFile => 'AgentTest',
        );
        $Output .= $Self->{LayoutObject}->Footer();
        return $Output;
    }
    # ---------------------------------------------------------- #
    # show overview screen
    # ---------------------------------------------------------- #
    elsif ($Self->{Subaction} eq 'Overview') {
        # add overview block
        $Self->{LayoutObject}->Block(
            Name => 'Overview',
            Data => {%Param, %Frontend},
        );
        # build output
        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "Test");
        $Output .= $Self->{LayoutObject}->NavigationBar();
        $Output .= $Self->{LayoutObject}->Output(
            Data => {%Param, %Frontend},
            TemplateFile => 'AgentTest',
        );
        $Output .= $Self->{LayoutObject}->Footer();
        return $Output;
    }
    # ---------------------------------------------------------- #
    # show error screen
    # ---------------------------------------------------------- #
    return $Self->{LayoutObject}->ErrorScreen(Message => "Invalid Subaction process!");
}
# --
1;
        </programlisting>
        </para>
        <para>
You also need a module registration for frontend modules. Define read
only groups with the "GroupRo" and read/write groups with the 'Group' param (see
table below for details). You can define navigation bar icons via the
"NavBar'"param, too (see table below for details).
        <programlisting>
[Kernel/Config.pm]
$Self->{'Frontend::Module'}->{'AgentTest'} = {
    Group => ['admin'],
    GroupRo => ['test', 'admin'],
    Description => 'A test Module',
    NavBarName => 'Ticket',
    NavBar => [
        {
            Description => 'Test Module',
            Name => 'Test',
            Image => 'stats.png',
            Link => 'Action=AgentTest',
            NavBar => 'Ticket',
            Prio => 85,
        },
    ],
};
        </programlisting>
        </para>
        <para>
You can access this frontend module via http (browse) with the Action
param = Module or over the navigation bar.
        </para>
        <para>
            <ulink url="">http://localhost/otrs/index.pl?Action=AgentTest</ulink>
        </para>
        <para>
Description of Frontend::Module options:
        </para>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Key</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Group</entry>
                        <entry>An ARRAY reference of rw groups of this module.</entry>
                    </row>
                    <row>
                        <entry>GroupRo</entry>
                        <entry>An ARRAY reference of ro groups of this module.</entry>
                    </row>
                    <row>
                        <entry>Description</entry>
                        <entry>Module description, just for internal use - not shown in the user interface.</entry>
                    </row>
                    <row>
                        <entry>NavBarName</entry>
                        <entry>NavBar context name of this module.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
        <para>
Description of NavBar (icon points) options:
        </para>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Key</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Description</entry>
                        <entry>The description of the icon which is shown in the navbar after the curser is pointed on it.</entry>
                    </row>
                    <row>
                        <entry>Name</entry>
                        <entry>The icon name shown in the navbar.</entry>
                    </row>
                    <row>
                        <entry>Image</entry>
                        <entry>The icon image shown in the navbar.</entry>
                    </row>
                    <row>
                        <entry>Link</entry>
                        <entry>The link behind the icon in the navbar.</entry>
                    </row>
                    <row>
                        <entry>NavBar</entry>
                        <entry>Only shown this icon in this NavBar context.</entry>
                    </row>
                    <row>
                        <entry>Prio</entry>
                        <entry>Sort prio of the icon in the navbar.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
    </sect1>
    <sect1 id="core-modules">
        <title>Core Modules</title>
        <para>
Core modules are located under $OTRS_HOME/Kernel/System/*. This layer is for
the logical work. The modules are used to handle system routines like "lock ticket"
and "create ticket". These modules  always need pod (Perl Documentation).
        </para>
        <para>
A few common core modules are: Log (Kernel::System::Log); Ticket
(Kernel::System::Ticket), Auth (Kernel::System::Auth), User (Kernel::System::User),
Email (Kernel::System::Email).
        </para>
        <para>
For more information on the core modules see
<ulink url="http://dev.otrs.org/">http://dev.otrs.org</ulink>
        </para>
        <para>
Format:
        </para>
        <para>
        <programlisting>
# --
# Kernel/System/Backend.pm - a core module
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::System::Backend;
use strict;

=head1 NAME

Kernel::System::Log - global log interface

=head1 SYNOPSIS

All log functions.

=head1 PUBLIC INTERFACE

=over 4

=item new()

create a backend object

use Kernel::Config;
use Kernel::System::Backend;

my $ConfigObject = Kernel::Config->new();
my $BackendObject    = Kernel::System::Backend->new(ConfigObject => $ConfigObject);

=cut

sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}

=item SomeMethodeA()

some info about the methode

$BackendObject->SomeMethodeA(ParamA => 'error', ParamB => "Need something!");

=cut

sub SomeMethodeA{
    my $Self = shift;
    my %Param = @_;
    [...]
    return 1;
}
1;

=head1 TERMS AND CONDITIONS

This software is part of the OTRS project (http://otrs.org/).

This software comes with ABSOLUTELY NO WARRANTY. For details, see
the enclosed file COPYING for license information (GPL). If you
did not receive this file, see http://www.gnu.org/licenses/gpl.txt.

=head1 VERSION

$Revision: 1.15 $ $Date: 2006-04-02 23:25:09 $

=cut
        </programlisting>
        </para>
    </sect1>
    <sect1 id="customer-auth-module">
        <title>Customer Auth Module</title>
        <para>
The same as "Agent Auth Modules" but the module location is
<filename>Kernel/System/CustomerAuth/*.pm</filename>.
        </para>
    </sect1>
    <sect1 id="customer-user-module">
        <title>Customer User Module</title>
        <para>
This module layer can be used as a bridge between your customer source
system and OTRS. Thus it is possible to use your customer data directly for
your data ware house (read only and read/write).
        </para>
        <para>
Format:
        </para>
        <para>
        <programlisting>
# --
# Kernel/System/CustomerUser/ABC.pm - a customer data backend
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::System::CustomerUser::ABD;
use strict;

# --
sub new {
    my $Type = shift;
    my %Param = @_;
    [...]
    return $Self;
}
# --
sub CustomerName {
    [...]
    return $Name;
}
# --
sub CustomerSearch {
    [...]
    return %Result;
}
# --
sub CustomerUserList {
    [...]
    return %List;
}
# --
sub CustomerIDs {
    [...]
    return @CustomerIDs;
}
# --
sub CustomerUserDataGet {
    [...]
    return %Data;
}
# --
sub CustomerUserAdd {
    [...]
    return 1
}
# --
sub CustomerUserUpdate {
    [...]
    return 1;
}
# --
sub SetPassword {
    [...]
    return 1;
}
1;
        </programlisting>
        </para>
        <para>
To use this module, see the admin manual.
        </para>
    </sect1>
    <sect1 id="customer-navigation-module">
        <title>Customer Navigation Module</title>
        <para>
In this module layer you can create dynamic navigation bar items with
dynamic content (Name and Description).
        </para>
        <para>
The format is the same as in the Navigation Module.
        </para>
        <para>
Just the config setting key is different. To use this module, add the following
to the Kernel/Config.pm and restart your webserver (if you use mod_perl).
        </para>
        <para>
        <programlisting>
[Kernel/Config.pm]
# customer notifiacation module
$Self->{'CustomerFrontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        </programlisting>
        </para>
    </sect1>
    <sect1 id="stats-modul">
        <title>Stats Modul</title>
        <para>
A stats module is easy - you just need two functions.
Param() to get all usable params for the stats and Run() to return the stats result.
        </para>
        <para>
Kernel/Config.pm:
        </para>
        <para>
        <programlisting>
$Self->{SystemStatsMap}->{"Ticket::SomeExampleStats1"} = {
    Name => 'Some Example Stats',
    Module => 'Kernel::System::Stats::SomeExampleStats',
    Desc => 'New created tickets for each queue in selected month.',
    SumCol => 1,
    SumRow => 1,
    UseResultCache => 0,
    Output => ['Print', 'CSV', 'Graph'],
    OutputDefault => 'Print',
};
        </programlisting>
        </para>
        <para>
Kernel/System/Stats/SomeExampleStats.pm:
        </para>
        <para>
        <programlisting>
# --
# Kernel/System/Stats/SomeExampleStats.pm - stats module
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# $Id: module-format.xml,v 1.15 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::System::Stats::SomeExampleStats;

use strict;

sub new {
    my $Type = shift;
    my %Param = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    # get common opjects
    foreach (keys %Param) {
        $Self->{$_} = $Param{$_};
    }

    # check all needed objects
    foreach (qw(DBObject ConfigObject LogObject)) {
        die "Got no $_" if (!$Self->{$_});
    }
    return $Self;
}
# --
sub Param {
    my $Self = shift;
    my @Params = ();
    # get current time
    my ($s,$m,$h, $D,$M,$Y) = $Self->{TimeObject}->SystemTime2Date(
        SystemTime => $Self->{TimeObject}->SystemTime(),
    );
    # get one month bevore
    if ($M == 1) {
        $M = 12;
        $Y = $Y - 1;
    }
    else {
        $M = $M -1;
    }
    # create possible time selections
    my %Year = ();
    foreach ($Y-10..$Y+1) {
        $Year{$_} = $_;
    }
    my %Month = ();
    foreach (1..12) {
        my $Tmp = sprintf("%02d", $_);
        $Month{$_} = $Tmp;
    }
    push (@Params, {
            Frontend => 'Year',
            Name => 'Year',
            Multiple => 0,
            Size => 0,
            SelectedID => $Y,
            Data => {
                %Year,
            },
        },
    );
    push (@Params, {
            Frontend => 'Month',
            Name => 'Month',
            Multiple => 0,
            Size => 0,
            SelectedID => $M,
            Data => {
                %Month,
            },
        },
    );
    return @Params;
}
# --
sub Run {
    my $Self = shift;
    my %Param = @_;

    my $Title = "$Param{Year}-$Param{Month}";

    my @HeadData = ('Col A', 'Col B', 'Col C');

    my @Data = (
        [1, 4, 7],
        [6, 1, 4],
        [9, 4, 6],
    );

    return ([$Title],[@HeadData], @Data);
}
# --
1;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="ticket-modules">
        <title>Ticket Modules</title>
        <sect2 id="ticket-number-module">
            <title>Ticket Number Module</title>
            <para>
If you want to create your own ticket number format, just create your own ticket
number module. These modules are located under "Kernel/System/Ticket/Number/*.pm".
For default modules see the admin manual. You just need 2 functions:
CreateTicketNr() and GetTNByString():
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting>
# --
# Ticket/Number/Simple.pm - a ticket number auto increment generator
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --
# Generates auto increment ticket numbers like ss.... (e. g. 1010138, 1010139, ...)
# --

package Kernel::System::Ticket::Number::Simple;
use strict; use vars qw($VERSION);

$VERSION =  $Revision: 1.15 $ ;
$VERSION =~ s/^\$.*:\W(.*)\W.+?$/$1/;

sub CreateTicketNr {
    my $Self = shift;
    my $JumpCounter = shift || 0;
    # get needed config options
    [...]
    return $Tn;
}
# --
sub GetTNByString {
    my $Self = shift;
    my $String = shift || return;
    [...]
    return $Tn;
}
1;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="ticket-postmaster-module">
            <title>Ticket PostMaster Module</title>
            <para>
PostMaster modules are used during the PostMaster process.
There are two kinds of PostMaster modules. PostMasterPre (used after parsing an email)
and PostMasterPost (used after an email is processed and in the database) modules.
            </para>
            <para>
If you want to create your own postmaster filter, just create your own module.
These modules are located under "Kernel/System/PostMaster/Filter/*.pm".
For default modules see the admin manual. You just need two functions:
new() and Run():
            </para>
            <para>
The following is an examplary module to match emails and set X-OTRS-Headers
(see doc/X-OTRS-Headers.txt for more info).
            </para>
            <para>
Kernel/Config.pm:
            </para>
            <para>
            <programlisting>
    # Job Name: 1-Match
    # (block/ignore all spam email with From: noreply@)
    $Self->{'PostMaster::PreFilterModule'}->{'1-Example'} = {
        Module => 'Kernel::System::PostMaster::Filter::Example',
        Match => {
            From => 'noreply@',
        },
        Set => {
            'X-OTRS-Ignore' => 'yes',
        },
    };
            </programlisting>
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting>
# --
# Kernel/System/PostMaster/Filter/Example.pm - a postmaster filter
# Copyright (C) 2005 Hans Mueller mail@example.com
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::System::PostMaster::Filter::Example;
use strict; use vars qw($VERSION);

$VERSION =  $Revision: 1.15 $ ;
$VERSION =~ s/^\$.*:\W(.*)\W.+?$/$1/;

sub new {
    my $Type = shift;
    my %Param = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    $Self->{Debug} = $Param{Debug} || 0;

    # get needed opbjects
    foreach (qw(ConfigObject LogObject DBObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    return $Self;
}

sub Run {
    my $Self = shift;
    my %Param = @_;
    # get config options
    my %Config = ();
    my %Match = ();
    my %Set = ();
    if ($Param{JobConfig} &amp;&amp; ref($Param{JobConfig}) eq 'HASH') {
        %Config = %{$Param{JobConfig}};
        if ($Config{Match}) {
            %Match = %{$Config{Match}};
        }
        if ($Config{Set}) {
            %Set = %{$Config{Set}};
        }
    }
    # match 'Match => ???' stuff
    my $Matched = '';
    my $MatchedNot = 0;
    foreach (sort keys %Match) {
        if ($Param{GetParam}->{$_} &amp;&amp; $Param{GetParam}->{$_} =~ /$Match{$_}/i) {
            $Matched = $1 || '1';
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched!",
                );
            }
        }
        else {
            $MatchedNot = 1;
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched NOT!",
                );
            }
       }
    }
    # should I ignore the incoming mail?
    if ($Matched &amp;&amp; !$MatchedNot) {
       foreach (keys %Set) {
           if ($Set{$_} =~ /\[\*\*\*\]/i) {
               $Set{$_} = $Matched;
           }
           $Param{GetParam}->{$_} = $Set{$_};
           $Self->{LogObject}->Log(
               Priority => 'notice',
               Message => "Set param '$_' to '$Set{$_}' (Message-ID: $Param{GetParam}->{'Message-ID'}) ",
           );
        }
    }

    return 1;
}

1;
            </programlisting>
            </para>
        </sect2>
        <sect2 id="more-modules">
            <title>More Modules</title>
            <para>
The Agent Ticket Permission Modules (Kernel/System/Ticket/Permission/) contain functions to verify
an agent's authorisation to access a ticket.
            </para>
            <para>
The Customer Ticket Permission Modules (Kernel/System/Ticket/CustomerPermission/) contain functions
to verify a customer's authorisation to access a ticket.
            </para>
            <para>
The Article Module (Kernel/System/Ticket/Article.pm) facilitates the readout and generating of ticket articles.
            </para>
            <para>
More modules and their descriptions are listed under <ulink url="http://dev.otrs.org/">http://dev.otrs.org/</ulink>
            </para>
        </sect2>
    </sect1>
</chapter>
