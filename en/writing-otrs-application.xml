<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: writing-otrs-application.xml,v 1.10 2006-04-02 23:25:09 martin Exp $ -->

<chapter>
    <title>Writing an OTRS module for a new object</title>
    <para>
In this chapter, the writing of a new OTRS module is illustrated on the basis of a simple small programme.
Necessary prerequisite is an OTRS development environment as specified in the chapter of the same name.
    </para>
    <sect1 id="what-we-want-to-write">
        <title>What we want to write</title>
        <para>
We want to write a little OTRS module that displays the text 'Hello World' when called up.
First of all we must build the directory /Hello World for the module in the developer directory.
In this directory, all directories existent in OTRS can be created.
Each module should at least contain the following directories:
        </para>
        <para>Kernel/</para>
        <para>Kernel/System/</para>
        <para>Kernel/Modules/</para>
        <para>Kernel/Output/HTML/Standard/</para>
        <para>Kernel/Config/</para>
        <para>Kernel/Config/Files/</para>
        <para>Kernel/Language/</para>
    </sect1>
    <sect1 id="default-config-file">
        <title>Default Config File</title>
        <para>
The creation of a module registration facilitates the display of the new module in OTRS.
Therefore we create a file '/Kernel/System/Config/Files/HelloWorld.xml'.
In this file, we create a new config element.
The impact of the various settings is described in the chapter 'Config Mechanism'.
        </para>
        <para>
        <programlisting>
&lt;?xml version="1.0" encoding="iso-8859-1" ?&gt;
&lt;otrs_config version="1.0" init="Application"&gt;
        &lt;ConfigItem Name="Frontend::Module###AgentHelloWorld" Required="1" Valid="1"&gt;
        &lt;Description Lang="en"&gt;FrontendModulRegistration for HelloWorld modul.&lt;/Description&gt;
        &lt;Description Lang="de"&gt;FrontendModulRegistration für das HelloWorld Modul.&lt;/Description&gt;
        &lt;Group&gt;HelloWorld&lt;/Group&gt;
        &lt;SubGroup&gt;AgentFrontendModulRegistration&lt;/SubGroup&gt;
        &lt;Setting&gt;
            &lt;FrontendModuleReg&gt;
                &lt;Title&gt;HelloWorld&lt;/Title&gt;
                &lt;Group&gt;users&lt;/Group&gt;
                &lt;Description&gt;HelloWorld&lt;/Description&gt;
                &lt;NavBarName&gt;HelloWorld&lt;/NavBarName&gt;
                &lt;NavBar&gt;
                    &lt;Description&gt;HelloWorld&lt;/Description&gt;
                    &lt;Name&gt;HelloWorld&lt;/Name&gt;
                    &lt;Image&gt;overview.png&lt;/Image&gt;
                    &lt;Link&gt;Action=AgentHelloWorld&lt;/Link&gt;
                    &lt;NavBar&gt;HelloWorld&lt;/NavBar&gt;
                    &lt;Type&gt;Menu&lt;/Type&gt;
                    &lt;Prio&gt;8400&lt;/Prio&gt;
                    &lt;Block&gt;ItemArea&lt;/Block&gt;
                &lt;/NavBar&gt;
            &lt;/FrontendModuleReg&gt;
        &lt;/Setting&gt;
    &lt;/ConfigItem&gt;
&lt;/otrs_config&gt;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="writing-frontend-module">
        <title>Frontend Module</title>
        <para>
After creating the links and executing the Sysconfig, a new module with the name 'HelloWorld' is displayed.
When calling it up, an error message is displayed as OTRS cannot find the matching frontend module yet.
This is the next thing to be created. To do so, we create the following file:
        </para>
        <para>
        <programlisting>
# --
# Kernel/Modules/AgentHelloWorld.pm - frontend modul
# Copyright (C) 2001-2005 Martin Edenhofer &lt;martin+code@otrs.org&gt;
# --
# $Id: writing-otrs-application.xml,v 1.10 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::Modules::AgentHelloWorld;

use strict;
use Kernel::System::HelloWorld;

sub new {
    my $Type = shift;
    my %Param = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);
    # get common objects
    foreach (keys %Param) {
        $Self-&gt;{$_} = $Param{$_};
    }
    # check needed Opjects
    foreach (qw(ParamObject DBObject ModuleReg LogObject ConfigObject)) {
        $Self-&gt;{LayoutObject}-&gt;FatalError(Message =&gt; "Got no $_!") if (!$Self-&gt;{$_});
    }
    # create needed objects
    $Self-&gt;{HelloWorldObject} = Kernel::System::HelloWorld-&gt;new(%Param);

    return $Self;
}
# --
sub Run {
    my $Self        = shift;
    my %Param       = @_;
    my $Output      = '';
    my %Data = ();

    $Data{HelloWorldText} = $Self-&gt;{HelloWorldObject}-&gt;GetHelloWorldText();
    # build output
    $Output .= $Self-&gt;{LayoutObject}-&gt;Header(Title =&gt; "HelloWorld");
    $Output .= $Self-&gt;{LayoutObject}-&gt;NavigationBar();
    $Output .= $Self-&gt;{LayoutObject}-&gt;Output(
        Data =&gt; \%Data,
        TemplateFile =&gt; 'AgentHelloWorld',
    );
    $Output .= $Self-&gt;{LayoutObject}-&gt;Footer();
    return $Output;
}
1;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="writing-core-module">
        <title>Core Module</title>
        <para>
Next, we create the file for the core module "/HelloWorld/Kernel/System/HelloWorld.pm" with the following content:
        </para>
        <para>
        <programlisting>
# --
# Kernel/System/HelloWorld.pm - core modul
# Copyright (C) 2001-2005 Martin Edenhofer &lt;martin+code@otrs.org&gt;
# --
# $Id: writing-otrs-application.xml,v 1.10 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::System::HelloWorld;

use strict;

sub new {
    my $Type  = shift;
    my %Param = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    return $Self;
}

sub GetHelloWorldText {
    my $Self        = shift;
    my %Param       = @_;

    return 'Hello World';
}

1;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="dtl-template-file">
        <title>dtl Template File</title>
        <para>
The last thing missing before the new module can run is the relevant template.
Thus, we create the following file:
        </para>
        <para>
        <programlisting>
# --
# Kernel/Output/HTML/Standard/AgentHelloWorld.dtl - overview
# Copyright (C) 2001-2005 Martin Edenhofer &lt;martin+code@otrs.org&gt;
# --
# $Id: writing-otrs-application.xml,v 1.10 2006-04-02 23:25:09 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --
&lt;!-- start form --&gt;
&lt;table border="0" width="100%" cellspacing="0" cellpadding="3"&gt;
  &lt;tr&gt;
    &lt;td class="mainhead"&gt;
       $Env{"Box0"}$Text{"Overview"}: $Text{"HelloWorld"}$Env{"Box1"}
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="mainbody"&gt;
        &lt;br&gt;
        $Text{"$QData{"HelloWorldText"}"}!&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;!-- end form --&gt;
        </programlisting>
        </para>
        <para>
The module is working now and displays the text 'Hello World' when called up.
        </para>
    </sect1>
    <sect1 id="language-file">
        <title>Language File</title>
        <para>
If the text 'Hello World' is to be translated into German, a language file for this language must be created:
'/HelloWorld/Kernel/Language/de_AgentHelloWorld.pm'.
Example:
        </para>
        <para>
        <programlisting>
package Kernel::Language::de_AgentHelloWorld;

use strict;

sub Data {
    my $Self = shift;

    $Self-&gt;{Translation} = { %{$Self-&gt;{Translation}},
        'Hello World'  =&gt; 'Hallo Welt',
    };
}
1;
        </programlisting>
        </para>
    </sect1>
    <sect1 id="summery">
        <title>Summary</title>
        <para>
The example given above shows that it is not too difficult to write a new module for OTRS.
It is important, though, to make sure that the module and file name are unique and thus
do not interfere with the framework or other expansion modules.
When a module is finished, an OPM package must be generated from it (see chapter 'Package Building').
        </para>
    </sect1>
</chapter>
